{
    "docs": [
        {
            "location": "/", 
            "text": "Pathfora JS is a lightweight SDK for displaying personalized modules on your website. it integrates with your \nLytics\n account to track user actions, and conditionally display modules based on your users' audience memebership. This documentation will walk you through everything you need to create your own highly customized and personalized module. Code and live preview examples are provided along the way.\n\n\nGetting Started\n\n\nBefore you begin creating modules with Pathfora you must have add the \nLytics Javascript Tag\n to your website. The Pathfora tag must be loaded after the Lytics tag.\n\n\n!-- Your Lytics JS Tag --\n\n\nscript src=\nhttps://api.lytics.io/api/tag/{{YOUR LYTICS API KEY}}/lio.js\n/script\n\n\n\n!-- Pathfora Tag --\n\n\nscript src=\nhttp://c.lytics.io/static/pathfora.min.js\n/script\n\n\n\n\n\nNext you'll need to set up configuration for your module and initialize it with \npathfora.initializeWidgets\n example configurations, what all these settings mean, and their outputted modules can be found throughout the documentation.\n\n\nOverview\n\n\nHere are a couple sections to get you started on the basics of Pathfora JS. See the navigation in the sidebar for a full list of docs.\n\n\n\n\n\n\nTypes\n \n\n\n\n\nThe type parameter relays information to the layout (see below) related to the type of content being rendered. Pathfora currently supports four types of modules: message, form, subscription and gate.\n\n\n\n\n\n\n\n\nLayouts\n\n\n\n\nThe layout controls the style (what does the module look like \n how does it animate into view). Pathfora currently supports four different layouts for each of the types: modal, slideout, bar, and button.\n\n\n\n\n\n\n\n\nAudience Targeting\n\n\n\n\nThis section will walk you through how to make your modules truely personalized by targeting them to a specific subset of your users as defined by your Lytics audiences.\n\n\n\n\n\n\n\n\nDisplay Conditions\n\n\n\n\nDisplay conditions can control when the module is displayed based on the current date, previous actions of the user, current scroll position on the page, and many more settings.\n\n\n\n\n\n\n\n\nCustomization\n \n\n\n\n\nHere we cover a few of the options for basic to full customization of the settings such as button and field names, color themes, look and feel.\n\n\n\n\n\n\n\n\nDevelopment\n\n\nPathfora uses \nNPM\n for package management, and \nGulp\n to manage build tasks.\n\n\nInstall Dependencies\n\n\n$ npm install --global gulp-cli\n$ npm install\n\n\n\n\nGulp tasks\n\n\ngulp build\n\n\n\n\nMinify LESS files and uglify js files in the src directory, and place output in dist directory.\n\n\n\n\ngulp\n\n\n\n\nRuns the \nbuild\n tasks above and watches for any changes in the src directory, files are served on localhost port 8080\n\n\n\n\ngulp local\n\n\n\n\nReads some config params from an optional local file, \n.env.json\n and builds and watches as with the default gulp task. This can allow you to test CSS changes locally (by default \ndist/pathfora.min.js\n loads the most recently deployed CSS file) or override the Lytics API URL\n\n\n\n\nExample \n.env.json\n file, (using local CSS):\n\n\n{\n  \nAPIURL\n: \nhttps://api.lytics.io\n,\n  \nCSSURL\n: \nhttp://localhost:8080/dist/pathfora.min.css\n\n}\n\n\n\n\nTesting\n\n\nPathfora uses \nJasmine\n as a test framework, and \nKarma\n to run tests. Before running tests, or commiting changes be sure to run \ngulp build\n instead of \ngulp local\n, or tests will fail due to mismatching URLs.\n\n\nRunning Tests:\n\n\n$ gulp build \n karma start --single-run --browsers PhantomJS", 
            "title": "Pathfora JS"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Before you begin creating modules with Pathfora you must have add the  Lytics Javascript Tag  to your website. The Pathfora tag must be loaded after the Lytics tag.  !-- Your Lytics JS Tag --  script src= https://api.lytics.io/api/tag/{{YOUR LYTICS API KEY}}/lio.js /script  !-- Pathfora Tag --  script src= http://c.lytics.io/static/pathfora.min.js /script   Next you'll need to set up configuration for your module and initialize it with  pathfora.initializeWidgets  example configurations, what all these settings mean, and their outputted modules can be found throughout the documentation.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#overview", 
            "text": "Here are a couple sections to get you started on the basics of Pathfora JS. See the navigation in the sidebar for a full list of docs.    Types     The type parameter relays information to the layout (see below) related to the type of content being rendered. Pathfora currently supports four types of modules: message, form, subscription and gate.     Layouts   The layout controls the style (what does the module look like   how does it animate into view). Pathfora currently supports four different layouts for each of the types: modal, slideout, bar, and button.     Audience Targeting   This section will walk you through how to make your modules truely personalized by targeting them to a specific subset of your users as defined by your Lytics audiences.     Display Conditions   Display conditions can control when the module is displayed based on the current date, previous actions of the user, current scroll position on the page, and many more settings.     Customization     Here we cover a few of the options for basic to full customization of the settings such as button and field names, color themes, look and feel.", 
            "title": "Overview"
        }, 
        {
            "location": "/#development", 
            "text": "Pathfora uses  NPM  for package management, and  Gulp  to manage build tasks.", 
            "title": "Development"
        }, 
        {
            "location": "/#install-dependencies", 
            "text": "$ npm install --global gulp-cli\n$ npm install", 
            "title": "Install Dependencies"
        }, 
        {
            "location": "/#gulp-tasks", 
            "text": "gulp build   Minify LESS files and uglify js files in the src directory, and place output in dist directory.   gulp   Runs the  build  tasks above and watches for any changes in the src directory, files are served on localhost port 8080   gulp local   Reads some config params from an optional local file,  .env.json  and builds and watches as with the default gulp task. This can allow you to test CSS changes locally (by default  dist/pathfora.min.js  loads the most recently deployed CSS file) or override the Lytics API URL   Example  .env.json  file, (using local CSS):  {\n   APIURL :  https://api.lytics.io ,\n   CSSURL :  http://localhost:8080/dist/pathfora.min.css \n}", 
            "title": "Gulp tasks"
        }, 
        {
            "location": "/#testing", 
            "text": "Pathfora uses  Jasmine  as a test framework, and  Karma  to run tests. Before running tests, or commiting changes be sure to run  gulp build  instead of  gulp local , or tests will fail due to mismatching URLs.  Running Tests:  $ gulp build   karma start --single-run --browsers PhantomJS", 
            "title": "Testing"
        }, 
        {
            "location": "/types/message/", 
            "text": "Focused on deliverying outbound communication. Perhaps announcing a product launch, new content, top-level alert, etc. Message modules are simple text modules which can be used in a variety of formats.\n\n\nvar module = pathfora.Message({\n    // module settings\n});\n\npathfora.initializeWidgets([ module ]);\n\n\n\n\nlayout\n\n\nDefine which layout type the form module should use.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nmodal\n\n\nstring\n\n\nmodule uses a \nmodal layout\n\n\n\n\n\n\nslideout\n\n\nstring\n\n\nmodule uses a \nslideout layout\n\n\n\n\n\n\nbar\n\n\nstring\n\n\nmodule uses a \nbar layout\n\n\n\n\n\n\nbutton\n\n\nstring\n\n\nmodule uses a \nbutton layout\n\n\n\n\n\n\n\n\nModal - \nLive Preview\n\n\n\n\n\n\n\nSlideout - \nLive Preview\n\n\n\n\n\n\n\nBar - \nLive Preview\n\n\n\n\n\n\n\nButton - \nLive Preview", 
            "title": "Message"
        }, 
        {
            "location": "/types/message/#layout", 
            "text": "Define which layout type the form module should use.     Value  Type  Behavior      modal  string  module uses a  modal layout    slideout  string  module uses a  slideout layout    bar  string  module uses a  bar layout    button  string  module uses a  button layout", 
            "title": "layout"
        }, 
        {
            "location": "/types/message/#modal-live-preview", 
            "text": "", 
            "title": "Modal - Live Preview"
        }, 
        {
            "location": "/types/message/#slideout-live-preview", 
            "text": "", 
            "title": "Slideout - Live Preview"
        }, 
        {
            "location": "/types/message/#bar-live-preview", 
            "text": "", 
            "title": "Bar - Live Preview"
        }, 
        {
            "location": "/types/message/#button-live-preview", 
            "text": "", 
            "title": "Button - Live Preview"
        }, 
        {
            "location": "/types/form/", 
            "text": "Used primarily for data collection or user identification. Supporting a variety of form fields and options for passing data to various end-points this type presents a form for the user to fill out and submit.\n\n\nvar module = pathfora.Form({\n    // form module settings\n});\n\npathfora.initializeWidgets([ module ]);\n\n\n\n\nlayout\n\n\nDefine which layout type the form module should use.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nmodal\n\n\nstring\n\n\nmodule uses a \nmodal layout\n\n\n\n\n\n\nslideout\n\n\nstring\n\n\nmodule uses a \nslideout layout\n\n\n\n\n\n\n\n\nForm - \nLive Preview\n\n\n\n\n\n\n\nSlideout - \nLive Preview\n\n\n\n\n\n\n\nshowSocialLogin\n\n\nWith social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nfalse\n\n\nboolean\n\n\ndefault\n do not show social login buttons\n\n\n\n\n\n\ntrue\n\n\nboolean\n\n\nshow social login buttons\n\n\n\n\n\n\n\n\nSocial Login /w Google \n Facebook - \nLive Preview", 
            "title": "Form"
        }, 
        {
            "location": "/types/form/#layout", 
            "text": "Define which layout type the form module should use.     Value  Type  Behavior      modal  string  module uses a  modal layout    slideout  string  module uses a  slideout layout", 
            "title": "layout"
        }, 
        {
            "location": "/types/form/#form-live-preview", 
            "text": "", 
            "title": "Form - Live Preview"
        }, 
        {
            "location": "/types/form/#slideout-live-preview", 
            "text": "", 
            "title": "Slideout - Live Preview"
        }, 
        {
            "location": "/types/form/#showsociallogin", 
            "text": "With social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email.     Value  Type  Behavior      false  boolean  default  do not show social login buttons    true  boolean  show social login buttons", 
            "title": "showSocialLogin"
        }, 
        {
            "location": "/types/form/#social-login-w-google-facebook-live-preview", 
            "text": "", 
            "title": "Social Login /w Google &amp; Facebook - Live Preview"
        }, 
        {
            "location": "/types/subscription/", 
            "text": "A lite version of the form type this module focuses on gathering the minimum amount of user data necessary to maintain communication. By default only email address will be collected.\n\n\nvar module = pathfora.Subscription({\n    // module settings\n});\n\npathfora.initializeWidgets([ module ]);\n\n\n\n\nlayout\n\n\nDefine which layout type the form module should use.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nmodal\n\n\nstring\n\n\nmodule uses a \nmodal layout\n\n\n\n\n\n\nslideout\n\n\nstring\n\n\nmodule uses a \nslideout layout\n\n\n\n\n\n\nbar\n\n\nstring\n\n\nmodule uses a \nbar layout\n\n\n\n\n\n\n\n\nModal - \nLive Preview\n\n\n\n\n\n\n\nSlideout - \nLive Preview\n\n\n\n\n\n\n\nBar - \nLive Preview", 
            "title": "Subscription"
        }, 
        {
            "location": "/types/subscription/#layout", 
            "text": "Define which layout type the form module should use.     Value  Type  Behavior      modal  string  module uses a  modal layout    slideout  string  module uses a  slideout layout    bar  string  module uses a  bar layout", 
            "title": "layout"
        }, 
        {
            "location": "/types/subscription/#modal-live-preview", 
            "text": "", 
            "title": "Modal - Live Preview"
        }, 
        {
            "location": "/types/subscription/#slideout-live-preview", 
            "text": "", 
            "title": "Slideout - Live Preview"
        }, 
        {
            "location": "/types/subscription/#bar-live-preview", 
            "text": "", 
            "title": "Bar - Live Preview"
        }, 
        {
            "location": "/types/gate/", 
            "text": "A more invasive approach to data collection or user identification. This type of module prevents users from viewing content or navigating until some sort of data has been collected and processed. Highly effective when promoting white papers or other online materials that are not to be freely available.\n\n\nvar module = pathfora.SiteGate({\n    // module settings\n});\n\npathfora.initializeWidgets([ module ]);\n\n\n\n\nSiteGate - \nLive Preview\n\n\n\n\n\n\n\nshowSocialLogin\n\n\nWith social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nfalse\n\n\nboolean\n\n\ndefault\n do not show social login buttons\n\n\n\n\n\n\ntrue\n\n\nboolean\n\n\nshow social login buttons\n\n\n\n\n\n\n\n\nSocial Login /w Google \n Facebook - \nLive Preview\n\n\n\n\n\n\n\nshowForm\n\n\nBy default the a gate module includes a form, with this setting it can be hidden for a text-only gated widget.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\ntrue\n\n\nboolean\n\n\ndefault\n show the gated form\n\n\n\n\n\n\nfalse\n\n\nboolean\n\n\nhide the form for a text-only gated widget\n\n\n\n\n\n\n\n\nText-only Gate - \nLive Preview", 
            "title": "Gate"
        }, 
        {
            "location": "/types/gate/#sitegate-live-preview", 
            "text": "", 
            "title": "SiteGate - Live Preview"
        }, 
        {
            "location": "/types/gate/#showsociallogin", 
            "text": "With social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email.     Value  Type  Behavior      false  boolean  default  do not show social login buttons    true  boolean  show social login buttons", 
            "title": "showSocialLogin"
        }, 
        {
            "location": "/types/gate/#social-login-w-google-facebook-live-preview", 
            "text": "", 
            "title": "Social Login /w Google &amp; Facebook - Live Preview"
        }, 
        {
            "location": "/types/gate/#showform", 
            "text": "By default the a gate module includes a form, with this setting it can be hidden for a text-only gated widget.     Value  Type  Behavior      true  boolean  default  show the gated form    false  boolean  hide the form for a text-only gated widget", 
            "title": "showForm"
        }, 
        {
            "location": "/types/gate/#text-only-gate-live-preview", 
            "text": "", 
            "title": "Text-only Gate - Live Preview"
        }, 
        {
            "location": "/layouts/modal/", 
            "text": "A large size module with an overlay behind it - meant to cover a substantial area of the browser window, so that it demands attention from the user.\n\n\nvariant\n\n\nVariants determines any extra content that may be used by the module.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n1\n\n\nint\n\n\ndefault\n text-only module\n\n\n\n\n\n\n2\n\n\nint\n\n\nmodule includes an image\n\n\n\n\n\n\n3\n\n\nint\n\n\nmodule includes a content recommendation\n\n\n\n\n\n\n\n\nImage - \nLive Preview", 
            "title": "Modal"
        }, 
        {
            "location": "/layouts/modal/#variant", 
            "text": "Variants determines any extra content that may be used by the module.     Value  Type  Behavior      1  int  default  text-only module    2  int  module includes an image    3  int  module includes a content recommendation", 
            "title": "variant"
        }, 
        {
            "location": "/layouts/modal/#image-live-preview", 
            "text": "", 
            "title": "Image - Live Preview"
        }, 
        {
            "location": "/layouts/slideout/", 
            "text": "A medium module which slides from either side into the window. This module provides a good amount of space for text and content without taking the full attention of the user.\n\n\nposition\n\n\nPositition of the slideout module relative to the browser window.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nbottom-left\n\n\nstring\n\n\ndefault\n display the module in the bottom-left corner\n\n\n\n\n\n\nbottom-right\n\n\nstring\n\n\ndisplay the module in the bottom-right corner\n\n\n\n\n\n\n\n\nPositions - \nLive Preview\n\n\n\n\n\n\n\nvariant\n\n\nVariants determines any extra content that may be used by the module.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n1\n\n\nint\n\n\ndefault\n text-only module\n\n\n\n\n\n\n2\n\n\nint\n\n\nmodule includes an image\n\n\n\n\n\n\n3\n\n\nint\n\n\nmodule includes a content recommendation\n\n\n\n\n\n\n\n\nImage - \nLive Preview\n\n\n\n\n\n\n\norigin\n\n\nDirection from which the slideout module should slide from.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nleft\n\n\nstring\n\n\ndefault\n for bottom-left positioned modules\n\n\n\n\n\n\nright\n\n\nstring\n\n\ndefault\n for bottom-right positioned modules\n\n\n\n\n\n\nbottom\n\n\nstring\n\n\nmodule slides up from the bottom of the window\n\n\n\n\n\n\n\n\nBottom - \nLive Preview", 
            "title": "Slideout"
        }, 
        {
            "location": "/layouts/slideout/#position", 
            "text": "Positition of the slideout module relative to the browser window.     Value  Type  Behavior      bottom-left  string  default  display the module in the bottom-left corner    bottom-right  string  display the module in the bottom-right corner", 
            "title": "position"
        }, 
        {
            "location": "/layouts/slideout/#positions-live-preview", 
            "text": "", 
            "title": "Positions - Live Preview"
        }, 
        {
            "location": "/layouts/slideout/#variant", 
            "text": "Variants determines any extra content that may be used by the module.     Value  Type  Behavior      1  int  default  text-only module    2  int  module includes an image    3  int  module includes a content recommendation", 
            "title": "variant"
        }, 
        {
            "location": "/layouts/slideout/#image-live-preview", 
            "text": "", 
            "title": "Image - Live Preview"
        }, 
        {
            "location": "/layouts/slideout/#origin", 
            "text": "Direction from which the slideout module should slide from.     Value  Type  Behavior      left  string  default  for bottom-left positioned modules    right  string  default  for bottom-right positioned modules    bottom  string  module slides up from the bottom of the window", 
            "title": "origin"
        }, 
        {
            "location": "/layouts/slideout/#bottom-live-preview", 
            "text": "", 
            "title": "Bottom - Live Preview"
        }, 
        {
            "location": "/layouts/bar/", 
            "text": "A thin module which appears at the top or bottom of the browser window. Note that the bar module does not support header text.\n\n\nposition\n\n\nPositition of the bar module relative to the browser window.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\ntop\n\n\nstring\n\n\ndefault\n module is absolutely positioned to the top of the window\n\n\n\n\n\n\ntop-fixed\n\n\nstring\n\n\nmodule sticks to the top of the window when scrolling\n\n\n\n\n\n\nbottom-fixed\n\n\nstring\n\n\nmodule sticks to the bottom of the window when scrolling\n\n\n\n\n\n\n\n\nPositions - \nLive Preview\n\n\n\n\n\n\n\nvariant\n\n\nVariants determines any extra content that may be used by the module.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n1\n\n\nint\n\n\ndefault\n text-only module\n\n\n\n\n\n\n2\n\n\nint\n\n\nmodule includes an image\n\n\n\n\n\n\n\n\nImage - \nLive Preview\n\n\n\n\n\n\n\npushDown\n\n\nFor \ntop\n or \ntop-fixed\n positioned bars, we can select an element to push down (add a top margin) so it doesn't get covered by the module, this is especially helpful for top-aligned site navigation.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nselector of the element that should move down with the bar.\n\n\n\n\n\n\n\n\nImage - \nLive Preview", 
            "title": "Bar"
        }, 
        {
            "location": "/layouts/bar/#position", 
            "text": "Positition of the bar module relative to the browser window.     Value  Type  Behavior      top  string  default  module is absolutely positioned to the top of the window    top-fixed  string  module sticks to the top of the window when scrolling    bottom-fixed  string  module sticks to the bottom of the window when scrolling", 
            "title": "position"
        }, 
        {
            "location": "/layouts/bar/#positions-live-preview", 
            "text": "", 
            "title": "Positions - Live Preview"
        }, 
        {
            "location": "/layouts/bar/#variant", 
            "text": "Variants determines any extra content that may be used by the module.     Value  Type  Behavior      1  int  default  text-only module    2  int  module includes an image", 
            "title": "variant"
        }, 
        {
            "location": "/layouts/bar/#image-live-preview", 
            "text": "", 
            "title": "Image - Live Preview"
        }, 
        {
            "location": "/layouts/bar/#pushdown", 
            "text": "For  top  or  top-fixed  positioned bars, we can select an element to push down (add a top margin) so it doesn't get covered by the module, this is especially helpful for top-aligned site navigation.     Value  Type  Behavior       string  selector of the element that should move down with the bar.", 
            "title": "pushDown"
        }, 
        {
            "location": "/layouts/bar/#image-live-preview_1", 
            "text": "", 
            "title": "Image - Live Preview"
        }, 
        {
            "location": "/layouts/button/", 
            "text": "A small module which only allows for a short piece of text, and a single click action. Because of their limited size and capabilities, button modules are best used for short messages, such as calling out a new site feature, or directing a user to a new piece of content.\n\n\nposition\n\n\nPositition of the button module relative to the browser window.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\ntop-left\n\n\nstring\n\n\ndefault\n\n\n\n\n\n\ntop-right\n\n\nstring\n\n\n\n\n\n\n\n\nleft\n\n\nstring\n\n\n\n\n\n\n\n\nright\n\n\nstring\n\n\n\n\n\n\n\n\nbottom-right\n\n\nstring\n\n\n\n\n\n\n\n\nbottom-left\n\n\nstring\n\n\n\n\n\n\n\n\n\n\nPositions - \nLive Preview", 
            "title": "Button"
        }, 
        {
            "location": "/layouts/button/#position", 
            "text": "Positition of the button module relative to the browser window.     Value  Type  Behavior      top-left  string  default    top-right  string     left  string     right  string     bottom-right  string     bottom-left  string", 
            "title": "position"
        }, 
        {
            "location": "/layouts/button/#positions-live-preview", 
            "text": "", 
            "title": "Positions - Live Preview"
        }, 
        {
            "location": "/customization/buttons/", 
            "text": "Pathfora modules can have up to two action buttons \"confirm\" and \"cancel\". You can set custom text for these buttons as well as select to hide one or both of them. See the \ncallbacks\n section for how to add javascript callbacks on these buttons.\n\n\nokShow\n\n\nShow or hide the \"Confirm\" button.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\ntrue\n\n\nboolean\n\n\ndefault\n module has confirm button\n\n\n\n\n\n\nfalse\n\n\nboolean\n\n\nmodule does not have confirm button\n\n\n\n\n\n\n\n\ncancelShow\n\n\nShow or hide the \"Cancel\" button.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\ntrue\n\n\nboolean\n\n\ndefault\n module has cancel button\n\n\n\n\n\n\nfalse\n\n\nboolean\n\n\nmodule does not have cancel button\n\n\n\n\n\n\n\n\nHide Cancel Button - \nLive Preview\n\n\n\n\n\n\n\nokMessage\n\n\nSet the text for the \"Confirm\" button.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nConfirm\n\n\nstring\n\n\ndefault\n\n\n\n\n\n\n\n\nstring\n\n\nset the module's confirm button text\n\n\n\n\n\n\n\n\ncancelMessage\n\n\nSet the text for the \"Cancel\" button.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nCancel\n\n\nstring\n\n\ndefault\n\n\n\n\n\n\n\n\nstring\n\n\nset the module's confirm button text\n\n\n\n\n\n\n\n\nCustom Button Text - \nLive Preview", 
            "title": "Buttons"
        }, 
        {
            "location": "/customization/buttons/#okshow", 
            "text": "Show or hide the \"Confirm\" button.     Value  Type  Behavior      true  boolean  default  module has confirm button    false  boolean  module does not have confirm button", 
            "title": "okShow"
        }, 
        {
            "location": "/customization/buttons/#cancelshow", 
            "text": "Show or hide the \"Cancel\" button.     Value  Type  Behavior      true  boolean  default  module has cancel button    false  boolean  module does not have cancel button", 
            "title": "cancelShow"
        }, 
        {
            "location": "/customization/buttons/#hide-cancel-button-live-preview", 
            "text": "", 
            "title": "Hide Cancel Button - Live Preview"
        }, 
        {
            "location": "/customization/buttons/#okmessage", 
            "text": "Set the text for the \"Confirm\" button.     Value  Type  Behavior      Confirm  string  default     string  set the module's confirm button text", 
            "title": "okMessage"
        }, 
        {
            "location": "/customization/buttons/#cancelmessage", 
            "text": "Set the text for the \"Cancel\" button.     Value  Type  Behavior      Cancel  string  default     string  set the module's confirm button text", 
            "title": "cancelMessage"
        }, 
        {
            "location": "/customization/buttons/#custom-button-text-live-preview", 
            "text": "", 
            "title": "Custom Button Text - Live Preview"
        }, 
        {
            "location": "/customization/themes/", 
            "text": "Pathfora has two basic pre-built color themes, light (default if no theme is set) and dark. Furthermore, the user can set their own custom colors for any element of the module within the javascript configuration. For more advanced color and style customization you can \nadd your own CSS\n.\n\n\ntheme\n\n\nSet the color scheme of the module, this can be a predefined theme or indicate that the module should have custom colors.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nlight\n\n\nstring\n\n\ndefault\n default light color scheme\n\n\n\n\n\n\ndark\n\n\nstring\n\n\na predefined darker color scheme\n\n\n\n\n\n\ncustom\n\n\nstring\n\n\nthe user should define custom colors using \ncolors\n\n\n\n\n\n\n\n\nDark Theme - \nLive Preview\n\n\n\n\n\n\n\ncolors\n\n\nDefine a set of custom colors for each element of the module.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \ncolors\n\n    \nobj\n\n    \nmust be object formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \nfields\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n background \n\n    \nstring\n\n    \noptional\n hex color code for the background of the module\n\n  \n\n  \n\n    \n text \n\n    \nstring\n\n    \noptional\n hex color code for the msg text\n\n  \n\n  \n\n    \n headline \n\n    \nboolean\n\n    \noptional\n hex color code for the headline text/td>\n  \n\n  \n\n    \n close \n\n    \nboolean\n\n    \noptional\n hex color code for close button (\"X\" in the corner)\n\n  \n\n  \n\n    \n actionBackground \n\n    \nboolean\n\n    \noptional\n hex color code for the background of the \"confirm\" button\n\n  \n\n  \n\n    \n actionText \n\n    \nboolean\n\n    \noptional\n hex color code for the text of the \"confirm\" button\n\n  \n\n  \n\n    \n cancelBackground \n\n    \nboolean\n\n    \noptional\n hex color code for the background of the \"cancel\" button\n\n  \n\n  \n\n    \n cancelText \n\n    \nboolean\n\n    \noptional\n hex color code for the text of the \"cancel\" button\n\n  \n\n  \n\n    \n fieldBackground \n\n    \nboolean\n\n    \noptional\n hex color code for the background of field elements\n\n  \n\n\n\n\n\nCustom Theme - \nLive Preview", 
            "title": "Color Themes"
        }, 
        {
            "location": "/customization/themes/#theme", 
            "text": "Set the color scheme of the module, this can be a predefined theme or indicate that the module should have custom colors.     Value  Type  Behavior      light  string  default  default light color scheme    dark  string  a predefined darker color scheme    custom  string  the user should define custom colors using  colors", 
            "title": "theme"
        }, 
        {
            "location": "/customization/themes/#dark-theme-live-preview", 
            "text": "", 
            "title": "Dark Theme - Live Preview"
        }, 
        {
            "location": "/customization/themes/#colors", 
            "text": "Define a set of custom colors for each element of the module.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     colors \n     obj \n     must be object formatted using following options / values \n     \n   \n     fields  object \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      background  \n     string \n     optional  hex color code for the background of the module \n   \n   \n      text  \n     string \n     optional  hex color code for the msg text \n   \n   \n      headline  \n     boolean \n     optional  hex color code for the headline text/td>\n   \n   \n      close  \n     boolean \n     optional  hex color code for close button (\"X\" in the corner) \n   \n   \n      actionBackground  \n     boolean \n     optional  hex color code for the background of the \"confirm\" button \n   \n   \n      actionText  \n     boolean \n     optional  hex color code for the text of the \"confirm\" button \n   \n   \n      cancelBackground  \n     boolean \n     optional  hex color code for the background of the \"cancel\" button \n   \n   \n      cancelText  \n     boolean \n     optional  hex color code for the text of the \"cancel\" button \n   \n   \n      fieldBackground  \n     boolean \n     optional  hex color code for the background of field elements", 
            "title": "colors"
        }, 
        {
            "location": "/customization/themes/#custom-theme-live-preview", 
            "text": "", 
            "title": "Custom Theme - Live Preview"
        }, 
        {
            "location": "/customization/css/", 
            "text": "Pathfora is built to be entirely customizable for developers. With the javascript config alone you can \nchange the colors\n of any element of the module. But, to make your module fully fit the look and feel of your site you can add custom CSS.\n\n\nKey Class Names\n\n\nThe outer most \ndiv\n of all Pathfora modules have the \npf-widget\n class. For most modules this will be the the containing div surrounding the content, but for \nmodal\n and \ngate\n modules this div will contain the full-screen overlay behind the module. \npf-widget\n has a number of useful subclasses to help select modules by their settings from the javascript config.\n\n\nSubclasses of \npf-widget\n:\n\n\n\n\n\n\n\n\nClass Name\n\n\nUse\n\n\n\n\n\n\n\n\n\n\npf-[type]\n\n\nselect modules by type\n\n\n\n\n\n\npf-widget-[layout]\n\n\nselect modules by layout\n\n\n\n\n\n\npf-position-[position]\n\n\nselect modules by position\n\n\n\n\n\n\npf-widget-variant-[variant]\n\n\nselect modules by variant\n\n\n\n\n\n\nopened\n\n\nadded once the module becomes visiable to the user, can be used for changing the transition animation\n\n\n\n\n\n\n\n\nWithin the \npf-widget\n div most key elements are assigned class names. Form components are nested in a \nform\n element and should be selected and styled by element type.\n\n\nKey Classes:\n\n\n\n\n\n\n\n\nClass Name\n\n\nElement\n\n\n\n\n\n\n\n\n\n\npf-widget-content\n\n\nsecond container div inside \npf-widget\n (for modal and gate layouts this will the the box surrounding the actual module content)\n\n\n\n\n\n\npf-widget-headline\n\n\nh2\n headline text\n\n\n\n\n\n\npf-widget-message\n\n\np\n containing widget message text\n\n\n\n\n\n\npf-widget-close\n\n\n\"x\" icon to close the modal\n\n\n\n\n\n\npf-widget-btn\n\n\ngeneral class for all buttons\n\n\n\n\n\n\npf-widget-ok\n\n\n\"Confirm\" button\n\n\n\n\n\n\npf-widget-cancel\n\n\n\"Cancel\" button\n\n\n\n\n\n\npf-widget-img\n\n\nimage element for modules of \nvariant 2\n\n\n\n\n\n\npf-social-login\n\n\ndiv containing social login buttons for modules with \nshowSocialLogin\n enabled\n\n\n\n\n\n\n\n\nCustom Class Name\n\n\nAll modules use the \npf-widget\n class, thus any styles applied to this class and sub-elements will effect all widgets used on the page. If you want to select and style a single module without using its \nid\n as a selector, you can add a custom class name to the \npf-widget\n div in your javascript config.\n\n\nvar module = pathfora.Subscription({\n  id: 'form-css',\n  className: 'pf-sign-up-newsletter',\n  layout: 'modal',\n  headline: 'Sign Up!',\n  msg: 'Submit this form to get updates'\n});\n\nwindow.pathfora.initializeWidgets([ module ]);\n\n\n\n\nExample\n\n\nLive Preview\n\n\n\n\nJavascript\n\n\n\n\n\nCSS\n\n\n\n\n\nSASS/LESS\n\n\n.pf-widget {\n  \n.pf-twitter-module {\n    background-color: #4a4a4a;\n    color: #fff;\n    border-radius: 0px;\n    box-shadow: none;\n    font-family: Roboto, Arial, 'sans-serif';\n\n    /* message paragraph */\n    .pf-widget-message {\n      font-size: 15px;\n      line-height: 1.7;\n    }\n\n    /* headline */\n    .pf-widget-headline {\n      font-size: 28px;\n    }\n\n    .pf-widget-close, .pf-widget-headline {\n      color: #39aec0;\n    }\n\n    /* buttons */\n    .pf-widget-btn {\n      border-radius: 0px;\n      padding: 1px 25px;\n    }\n\n    /* confirm button */\n    .pf-widget-btn.pf-widget-ok {\n      background-color: #1b91a7;\n      color: #fff;\n      box-shadow: none;\n    }\n\n    /* cancel button */\n    .pf-widget-btn.pf-widget-cancel {\n      background: transparent;\n      color: #fff;\n      border: 1px solid #6a6a6a;\n    }\n\n    /* img */\n    .pf-widget-img {\n      border-radius: 0px;\n    }\n  }\n}", 
            "title": "Custom CSS"
        }, 
        {
            "location": "/customization/css/#key-class-names", 
            "text": "The outer most  div  of all Pathfora modules have the  pf-widget  class. For most modules this will be the the containing div surrounding the content, but for  modal  and  gate  modules this div will contain the full-screen overlay behind the module.  pf-widget  has a number of useful subclasses to help select modules by their settings from the javascript config.  Subclasses of  pf-widget :     Class Name  Use      pf-[type]  select modules by type    pf-widget-[layout]  select modules by layout    pf-position-[position]  select modules by position    pf-widget-variant-[variant]  select modules by variant    opened  added once the module becomes visiable to the user, can be used for changing the transition animation     Within the  pf-widget  div most key elements are assigned class names. Form components are nested in a  form  element and should be selected and styled by element type.  Key Classes:     Class Name  Element      pf-widget-content  second container div inside  pf-widget  (for modal and gate layouts this will the the box surrounding the actual module content)    pf-widget-headline  h2  headline text    pf-widget-message  p  containing widget message text    pf-widget-close  \"x\" icon to close the modal    pf-widget-btn  general class for all buttons    pf-widget-ok  \"Confirm\" button    pf-widget-cancel  \"Cancel\" button    pf-widget-img  image element for modules of  variant 2    pf-social-login  div containing social login buttons for modules with  showSocialLogin  enabled", 
            "title": "Key Class Names"
        }, 
        {
            "location": "/customization/css/#custom-class-name", 
            "text": "All modules use the  pf-widget  class, thus any styles applied to this class and sub-elements will effect all widgets used on the page. If you want to select and style a single module without using its  id  as a selector, you can add a custom class name to the  pf-widget  div in your javascript config.  var module = pathfora.Subscription({\n  id: 'form-css',\n  className: 'pf-sign-up-newsletter',\n  layout: 'modal',\n  headline: 'Sign Up!',\n  msg: 'Submit this form to get updates'\n});\n\nwindow.pathfora.initializeWidgets([ module ]);", 
            "title": "Custom Class Name"
        }, 
        {
            "location": "/customization/css/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/customization/css/#live-preview", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/customization/css/#javascript", 
            "text": "", 
            "title": "Javascript"
        }, 
        {
            "location": "/customization/css/#css", 
            "text": "", 
            "title": "CSS"
        }, 
        {
            "location": "/customization/css/#sassless", 
            "text": ".pf-widget {\n   .pf-twitter-module {\n    background-color: #4a4a4a;\n    color: #fff;\n    border-radius: 0px;\n    box-shadow: none;\n    font-family: Roboto, Arial, 'sans-serif';\n\n    /* message paragraph */\n    .pf-widget-message {\n      font-size: 15px;\n      line-height: 1.7;\n    }\n\n    /* headline */\n    .pf-widget-headline {\n      font-size: 28px;\n    }\n\n    .pf-widget-close, .pf-widget-headline {\n      color: #39aec0;\n    }\n\n    /* buttons */\n    .pf-widget-btn {\n      border-radius: 0px;\n      padding: 1px 25px;\n    }\n\n    /* confirm button */\n    .pf-widget-btn.pf-widget-ok {\n      background-color: #1b91a7;\n      color: #fff;\n      box-shadow: none;\n    }\n\n    /* cancel button */\n    .pf-widget-btn.pf-widget-cancel {\n      background: transparent;\n      color: #fff;\n      border: 1px solid #6a6a6a;\n    }\n\n    /* img */\n    .pf-widget-img {\n      border-radius: 0px;\n    }\n  }\n}", 
            "title": "SASS/LESS"
        }, 
        {
            "location": "/customization/form/", 
            "text": "Pathfora allows for some customization on form elements including hiding specific input fields, setting placeholder text, and selecting which fields are required for the user to submit the form.\n\n\nfields\n\n\nSelect which fields should be a part of the module's form.\n\n\n\n    \n\n        \nVALUE\n\n        \nTYPE\n\n        \nBEHAVIOR\n\n    \n\n    \n\n        \nfields\n\n        \nobj\n\n        \nmust be object formatted using following options / values\n\n    \n\n\n\n\n\n\n    \n\n        \nfields\n object\n\n    \n\n    \n\n        \nVALUE\n\n        \nTYPE\n\n        \nBEHAVIOR\n\n    \n\n    \n\n        \n name \n\n        \nboolean\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n title \n\n        \nboolean\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n email \n\n        \nboolean\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n message \n\n        \nboolean\n\n        \noptional\n Supported Types: Form\n\n    \n\n    \n\n        \n organization \n\n        \nboolean\n\n        \noptional\n Supported Types: Gate\n\n    \n\n\n\n\n\nShow/Hide Fields - \nLive Preview\n\n\n\n\n\n\n\nrequired\n\n\nSet which fields are required to be filled out by the user to submit the form.\n\n\n\n    \n\n        \nVALUE\n\n        \nTYPE\n\n        \nBEHAVIOR\n\n    \n\n    \n\n        \nrequired\n\n        \nobj\n\n        \nmust be object formatted using following options / values\n\n    \n\n\n\n\n\n\n    \n\n        \nrequired\n object\n\n    \n\n    \n\n        \nVALUE\n\n        \nTYPE\n\n        \nBEHAVIOR\n\n    \n\n    \n\n        \n name \n\n        \nboolean\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n title \n\n        \nboolean\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n email \n\n        \nboolean\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n message \n\n        \nboolean\n\n        \noptional\n Supported Types: Form\n\n    \n\n    \n\n        \n organization \n\n        \nboolean\n\n        \noptional\n Supported Types: Gate\n\n    \n\n\n\n\n\nRequired Fields - \nLive Preview\n\n\n\n\n\n\n\nplaceholders\n\n\nSet the placeholder text for form elements.\n\n\n\n    \n\n        \nVALUE\n\n        \nTYPE\n\n        \nBEHAVIOR\n\n    \n\n    \n\n        \nplaceholders\n\n        \nobj\n\n        \nmust be object formatted using following options / values\n\n    \n\n\n\n\n\n\n    \n\n        \nplaceholder\n object\n\n    \n\n    \n\n        \nVALUE\n\n        \nTYPE\n\n        \nBEHAVIOR\n\n    \n\n    \n\n        \n name \n\n        \nstring\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n title \n\n        \nstring\n\n        \noptional\n Supported Types: Form, Gate\n\n    \n\n    \n\n        \n email \n\n        \nstring\n\n        \noptional\n Supported Types: Subscription, Form, Gate\n\n    \n\n    \n\n        \n message \n\n        \nstring\n\n        \noptional\n Supported Types: Form\n\n    \n\n    \n\n        \n organization \n\n        \nstring\n\n        \noptional\n Supported Types: Gate\n\n    \n\n\n\n\n\nPlaceholders - \nLive Preview", 
            "title": "Form Elements"
        }, 
        {
            "location": "/customization/form/#fields", 
            "text": "Select which fields should be a part of the module's form.  \n     \n         VALUE \n         TYPE \n         BEHAVIOR \n     \n     \n         fields \n         obj \n         must be object formatted using following options / values \n       \n     \n         fields  object \n     \n     \n         VALUE \n         TYPE \n         BEHAVIOR \n     \n     \n          name  \n         boolean \n         optional  Supported Types: Form, Gate \n     \n     \n          title  \n         boolean \n         optional  Supported Types: Form, Gate \n     \n     \n          email  \n         boolean \n         optional  Supported Types: Form, Gate \n     \n     \n          message  \n         boolean \n         optional  Supported Types: Form \n     \n     \n          organization  \n         boolean \n         optional  Supported Types: Gate", 
            "title": "fields"
        }, 
        {
            "location": "/customization/form/#showhide-fields-live-preview", 
            "text": "", 
            "title": "Show/Hide Fields - Live Preview"
        }, 
        {
            "location": "/customization/form/#required", 
            "text": "Set which fields are required to be filled out by the user to submit the form.  \n     \n         VALUE \n         TYPE \n         BEHAVIOR \n     \n     \n         required \n         obj \n         must be object formatted using following options / values \n       \n     \n         required  object \n     \n     \n         VALUE \n         TYPE \n         BEHAVIOR \n     \n     \n          name  \n         boolean \n         optional  Supported Types: Form, Gate \n     \n     \n          title  \n         boolean \n         optional  Supported Types: Form, Gate \n     \n     \n          email  \n         boolean \n         optional  Supported Types: Form, Gate \n     \n     \n          message  \n         boolean \n         optional  Supported Types: Form \n     \n     \n          organization  \n         boolean \n         optional  Supported Types: Gate", 
            "title": "required"
        }, 
        {
            "location": "/customization/form/#required-fields-live-preview", 
            "text": "", 
            "title": "Required Fields - Live Preview"
        }, 
        {
            "location": "/customization/form/#placeholders", 
            "text": "Set the placeholder text for form elements.  \n     \n         VALUE \n         TYPE \n         BEHAVIOR \n     \n     \n         placeholders \n         obj \n         must be object formatted using following options / values \n       \n     \n         placeholder  object \n     \n     \n         VALUE \n         TYPE \n         BEHAVIOR \n     \n     \n          name  \n         string \n         optional  Supported Types: Form, Gate \n     \n     \n          title  \n         string \n         optional  Supported Types: Form, Gate \n     \n     \n          email  \n         string \n         optional  Supported Types: Subscription, Form, Gate \n     \n     \n          message  \n         string \n         optional  Supported Types: Form \n     \n     \n          organization  \n         string \n         optional  Supported Types: Gate", 
            "title": "placeholders"
        }, 
        {
            "location": "/customization/form/#placeholders-live-preview", 
            "text": "", 
            "title": "Placeholders - Live Preview"
        }, 
        {
            "location": "/ab_testing/", 
            "text": "Pathfora supports A/B testing on a global level as well as on a targeted audience. You can select to split a pool of users to show some proportion of them a group of modules \"A\" and the other portion a group \"B\", (group being a collection of 0 or more modules).\n\n\nvar moduleTest = pathfora.ABTest({\n  // A/B test settings\n});\n\npathfora.initializeABTesting([ moduleTest ]);\n\n\n\n\n\n  \n\n    \nABTest\n settings object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nid\n\n    \nstring\n\n    \nunique identifier for the AB Test\n\n  \n\n  \n\n    \ntype\n\n    \nstring\n\n    \nthe proportional split between A/B (currently only \n50/50\n is supported)\n\n  \n\n  \n\n    \ngroups\n\n    \narray\n\n    \njagged array defining the A/B groups that each module belongs to\n\n  \n\n\n\n\n\nGlobal\n\n\nFor a global A/B test, some proportion of all users will see module \"A\" while the remaining will see module \"B\". \n\n\nIn the example below roughly half of all users will be shown a gated form (A) and the other half will see a form modal (B).\n\n\nAll Users Form/SiteGate Test - \nLive Preview\n\n\n\n\n\nWith Audience Targeting\n\n\nA/B Testing can be combined with \naudience targeting\n to divide an audience into a 50/50 split. \n\n\nIn the example below module \"A\" will be displayed to roughly half of the users in the \nsmt_new\n audience, while the other half of the audience will be shown module \"B\".\n\n\nNew Users Message Test\n\n\nvar moduleA = pathfora.Message({\n  id: 'message-a',\n  layout: 'slideout',\n  msg: 'Message A',\n});\n\nvar moduleB = pathfora.Message({\n  id: 'message-b',\n  layout: 'slideout',\n  msg: 'Message B',\n});\n\nvar ab = pathfora.ABTest({\n  id: 'targeted-ab-test',\n  type: '50/50',\n  groups: [\n    [ moduleA ],\n    [ moduleB ]\n  ]\n});\n\nvar widgets = {\n  target: [{\n    segment: 'smt_new',\n    widgets: [ moduleA, moduleB ]\n  }]\n};\n\nvar lyticsAcctId = \n0d47e6304d12858905b4f111090a68a1\n;\n\npathfora.initializeABTesting([ ab ]);\npathfora.initializeWidgets(widgets, lyticsAcctId);\n\n\n\n\nTesting\n\n\nTo determine which group a user should be assigned to, Pathfora generates a random value the first time they visit the page. This value gets saved as a cookie \nPathforaTest_[id]\n so that Pathfora knows which group the user is in on return visits. Since anyone visiting a page that contains A/B test modules should only see the modules from one group, there is no immediate visual way for developers to verify that both groups are working as expected. \n\n\nHowever you can attempt to test that both groups are showing correctly by finding and deleting the cookie named \nPathforaTest_[id]\n and refreshing the page. It may take a couple tries to show the other group since you are randomly assigned to a group each time. Feel free to try this on the \nglobal example above\n.", 
            "title": "A/B Testing"
        }, 
        {
            "location": "/ab_testing/#global", 
            "text": "For a global A/B test, some proportion of all users will see module \"A\" while the remaining will see module \"B\".   In the example below roughly half of all users will be shown a gated form (A) and the other half will see a form modal (B).", 
            "title": "Global"
        }, 
        {
            "location": "/ab_testing/#all-users-formsitegate-test-live-preview", 
            "text": "", 
            "title": "All Users Form/SiteGate Test - Live Preview"
        }, 
        {
            "location": "/ab_testing/#with-audience-targeting", 
            "text": "A/B Testing can be combined with  audience targeting  to divide an audience into a 50/50 split.   In the example below module \"A\" will be displayed to roughly half of the users in the  smt_new  audience, while the other half of the audience will be shown module \"B\".", 
            "title": "With Audience Targeting"
        }, 
        {
            "location": "/ab_testing/#new-users-message-test", 
            "text": "var moduleA = pathfora.Message({\n  id: 'message-a',\n  layout: 'slideout',\n  msg: 'Message A',\n});\n\nvar moduleB = pathfora.Message({\n  id: 'message-b',\n  layout: 'slideout',\n  msg: 'Message B',\n});\n\nvar ab = pathfora.ABTest({\n  id: 'targeted-ab-test',\n  type: '50/50',\n  groups: [\n    [ moduleA ],\n    [ moduleB ]\n  ]\n});\n\nvar widgets = {\n  target: [{\n    segment: 'smt_new',\n    widgets: [ moduleA, moduleB ]\n  }]\n};\n\nvar lyticsAcctId =  0d47e6304d12858905b4f111090a68a1 ;\n\npathfora.initializeABTesting([ ab ]);\npathfora.initializeWidgets(widgets, lyticsAcctId);", 
            "title": "New Users Message Test"
        }, 
        {
            "location": "/ab_testing/#testing", 
            "text": "To determine which group a user should be assigned to, Pathfora generates a random value the first time they visit the page. This value gets saved as a cookie  PathforaTest_[id]  so that Pathfora knows which group the user is in on return visits. Since anyone visiting a page that contains A/B test modules should only see the modules from one group, there is no immediate visual way for developers to verify that both groups are working as expected.   However you can attempt to test that both groups are showing correctly by finding and deleting the cookie named  PathforaTest_[id]  and refreshing the page. It may take a couple tries to show the other group since you are randomly assigned to a group each time. Feel free to try this on the  global example above .", 
            "title": "Testing"
        }, 
        {
            "location": "/targeting/", 
            "text": "Part of what makes Pathfora powerful is it's ability to interact with \nLytics\n and target certain audiences with certain modules. Setting up the targeting in Pathfora requires an object with certain targeting rules as the first param to \ninitializeWidgets\n instead of a array of widgets. And it must include a second, \nstring\n param, your lytics account ID.\n\n\nvar modules = {\n  // targeting rules\n};\n\npathfora.initializeWidgets(modules, \nYOUR LYTICS ACCOUNT ID\n);\n\n\n\n\nSetup\n\n\nTo target an audience with a module you will need to know your Lytics Account ID. Your account ID should be the same as the one in the Lytics javascript tag.\n\n\n\n\nYou will also need to make sure that any domain you want to use Pathfora on is whitelisted in your account, you can contact your customer success representative \nsuccess@getlytics.com\n to do this. Your account should already have any domain whitelisted with the lytics javascript tag installed on it, but be sure to include your local and testing environments. \n\n\nFinally you'll need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID.\n\n\n\n\ntarget\n\n\nA list of rules assigning modules to audiences.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \ntarget\n\n    \narray\n\n    \nlist of objects containing targeting rules\n\n  \n\n\n\n\n\n\n  \n\n    \nobject in \ntarget\n array\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nsegment\n\n    \nstring\n\n    \nAPI access ID of the Lytics audience\n\n  \n\n  \n\n    \nwidgets\n\n    \narray\n\n    \nlist of modules to show to users in the audience\n\n  \n\n\n\n\n\nSingle Target Audience - High Value Users\n\n\n// example: show a bar module to all users in the `high_value_users` audience promoting new products\n\nvar module = pathfora.Message({\n  id: 'targeted_bar',\n  layout: 'bar',\n  msg: 'Thanks for being a valued customer, please check out our new products.'\n  cancelShow: false,\n  okMessage: 'View Now',\n  confirmAction: {\n    name: \ntargeted_bar_confirm\n,\n    callback: function () {\n      window.location.pathname = \n/new-products\n;\n    }\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'high_value_users', // API Access ID for your Lytics audience\n    widgets: [ module ]\n  }]\n};\n\nvar lyticsAcctId = \nYOUR LYTICS ACCOUNT ID\n;\n\npathfora.initializeWidgets(modules, lyticsAcctId);\n\n\n\n\nMultiple Target Audiences - New vs. Returning\n\n\n// example: change messaging of module for new vs returning users\n\nvar newModule = pathfora.Message({\n  id: 'new_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome'\n  msg: 'You must be new here! Please take a look at our guide for new users.'\n  cancelShow: false,\n  okMessage: 'View Guide',\n});\n\nvar returningModule = pathfora.Message({\n  id: 'returning_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome Back'\n  msg: 'Thanks for coming back, why not check out our blog for the newest updates?'\n  cancelShow: false,\n  okMessage: 'View Blog',\n});\n\nvar modules = {\n  target: [{\n    segment: 'new_users', // API Access ID for your Lytics audience\n    widgets: [ newModule ]\n  },\n  {\n    segment: 'returning', // API Access ID for your Lytics audience\n    widgets: [ returningModule ]\n  }]\n};\n\nvar lyticsAcctId = \nYOUR LYTICS ACCOUNT ID\n;\n\npathfora.initializeWidgets(modules, lyticsAcctId);\n\n\n\n\ninverse\n\n\nTarget all users who are not a part of any of the audiences in the defined targeting rules.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \ntarget\n\n    \narray\n\n    \nlist of modules to show any user who is not a member of any of the audiences in the targeting rules\n\n  \n\n\n\n\n\n// example: show a feedback form module to all users that are known (has email)\n// and a subsciption module to everyone else\n\nvar subscriptionModule = pathfora.Subscription({\n  id: 'sign_up_module',\n  layout: 'modal',\n  headline: 'Sign Up'\n  msg: 'We want to send you updates, sign up now!'\n});\n\nvar feedbackModule = pathfora.Message({\n  id: 'known_module',\n  layout: 'modal',\n  headline: 'Give us Feedback'\n  msg: 'What do you think of our newest updates?'\n  fields: {\n    name: false,\n    email: false,\n    title: false,\n    message: true\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'known', // API Access ID for your Lytics audience\n    widgets: [ feedbackModule ]\n  }],\n  inverse: [ subscriptionModule ]\n};\n\nvar lyticsAcctId = \nYOUR LYTICS ACCOUNT ID\n;\n\npathfora.initializeWidgets(modules, lyticsAcctId);", 
            "title": "Audience Targeting"
        }, 
        {
            "location": "/targeting/#setup", 
            "text": "To target an audience with a module you will need to know your Lytics Account ID. Your account ID should be the same as the one in the Lytics javascript tag.   You will also need to make sure that any domain you want to use Pathfora on is whitelisted in your account, you can contact your customer success representative  success@getlytics.com  to do this. Your account should already have any domain whitelisted with the lytics javascript tag installed on it, but be sure to include your local and testing environments.   Finally you'll need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID.", 
            "title": "Setup"
        }, 
        {
            "location": "/targeting/#target", 
            "text": "A list of rules assigning modules to audiences.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     target \n     array \n     list of objects containing targeting rules \n     \n   \n     object in  target  array \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     segment \n     string \n     API access ID of the Lytics audience \n   \n   \n     widgets \n     array \n     list of modules to show to users in the audience", 
            "title": "target"
        }, 
        {
            "location": "/targeting/#single-target-audience-high-value-users", 
            "text": "// example: show a bar module to all users in the `high_value_users` audience promoting new products\n\nvar module = pathfora.Message({\n  id: 'targeted_bar',\n  layout: 'bar',\n  msg: 'Thanks for being a valued customer, please check out our new products.'\n  cancelShow: false,\n  okMessage: 'View Now',\n  confirmAction: {\n    name:  targeted_bar_confirm ,\n    callback: function () {\n      window.location.pathname =  /new-products ;\n    }\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'high_value_users', // API Access ID for your Lytics audience\n    widgets: [ module ]\n  }]\n};\n\nvar lyticsAcctId =  YOUR LYTICS ACCOUNT ID ;\n\npathfora.initializeWidgets(modules, lyticsAcctId);", 
            "title": "Single Target Audience - High Value Users"
        }, 
        {
            "location": "/targeting/#multiple-target-audiences-new-vs-returning", 
            "text": "// example: change messaging of module for new vs returning users\n\nvar newModule = pathfora.Message({\n  id: 'new_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome'\n  msg: 'You must be new here! Please take a look at our guide for new users.'\n  cancelShow: false,\n  okMessage: 'View Guide',\n});\n\nvar returningModule = pathfora.Message({\n  id: 'returning_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome Back'\n  msg: 'Thanks for coming back, why not check out our blog for the newest updates?'\n  cancelShow: false,\n  okMessage: 'View Blog',\n});\n\nvar modules = {\n  target: [{\n    segment: 'new_users', // API Access ID for your Lytics audience\n    widgets: [ newModule ]\n  },\n  {\n    segment: 'returning', // API Access ID for your Lytics audience\n    widgets: [ returningModule ]\n  }]\n};\n\nvar lyticsAcctId =  YOUR LYTICS ACCOUNT ID ;\n\npathfora.initializeWidgets(modules, lyticsAcctId);", 
            "title": "Multiple Target Audiences - New vs. Returning"
        }, 
        {
            "location": "/targeting/#inverse", 
            "text": "Target all users who are not a part of any of the audiences in the defined targeting rules.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     target \n     array \n     list of modules to show any user who is not a member of any of the audiences in the targeting rules \n     // example: show a feedback form module to all users that are known (has email)\n// and a subsciption module to everyone else\n\nvar subscriptionModule = pathfora.Subscription({\n  id: 'sign_up_module',\n  layout: 'modal',\n  headline: 'Sign Up'\n  msg: 'We want to send you updates, sign up now!'\n});\n\nvar feedbackModule = pathfora.Message({\n  id: 'known_module',\n  layout: 'modal',\n  headline: 'Give us Feedback'\n  msg: 'What do you think of our newest updates?'\n  fields: {\n    name: false,\n    email: false,\n    title: false,\n    message: true\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'known', // API Access ID for your Lytics audience\n    widgets: [ feedbackModule ]\n  }],\n  inverse: [ subscriptionModule ]\n};\n\nvar lyticsAcctId =  YOUR LYTICS ACCOUNT ID ;\n\npathfora.initializeWidgets(modules, lyticsAcctId);", 
            "title": "inverse"
        }, 
        {
            "location": "/callbacks/", 
            "text": "All buttons, forms, and other such events support optional javascript callback settings.\n\n\nconfirmAction\n\n\nSet a \ntracking name\n and javascript callback for a \"confirm\" button click event.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nconfirmAction\n\n    \nobj\n\n    \nmust be object formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \nconfirmAction\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n name \n\n    \nstring\n\n    \noptional\n name of the confirm event to send to Lytics and Google Analytics\n\n  \n\n  \n\n    \n callback \n\n    \nfunction\n\n    \noptional\n function to execute when the use clicks the \"confirm\" button\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\ncancelAction\n\n\nSet a \ntracking name\n and javascript callback for a \"cancel\" button click event.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \ncancelAction\n\n    \nobj\n\n    \nmust be object formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \ncancelAction\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n name \n\n    \nstring\n\n    \noptional\n name of the cancel event to send to Lytics and Google Analytics\n\n  \n\n  \n\n    \n callback \n\n    \nfunction\n\n    \noptional\n function to execute when the use clicks the \"cancel\" button\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\nonInit\n\n\nJavascript callback function on initialization of the module, this should trigger just before the module is shown.\n\n\n\n  \n\n    \nonInit\n params\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n event \n\n    \nstring\n\n    \nname of the event\n\n  \n\n  \n\n    \n payload \n\n    \nobject\n\n    \npathfora module object\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\nonLoad\n\n\nJavascript callback function on loading the module, triggered when the module is shown to the user.\n\n\n\n  \n\n    \nonLoad\n params\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n event \n\n    \nstring\n\n    \nname of the event\n\n  \n\n  \n\n    \n payload \n\n    \nobject\n\n    \npathfora module object and the rendered DOM Element\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\nonClick\n\n\nJavascript callback function \nfor \nbutton layouts\n only\n on click of the button widget.\n\n\n\n  \n\n    \nonClick\n params\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n event \n\n    \nstring\n\n    \nname of the event\n\n  \n\n  \n\n    \n payload \n\n    \nobject\n\n    \nclick event\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\nonSubmit\n\n\nJavascript callback function \nfor any types with form elements\n on submission of the form (includes form data as param).\n\n\n\n  \n\n    \nonSubmit\n params\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n event \n\n    \nstring\n\n    \nname of the event\n\n  \n\n  \n\n    \n payload \n\n    \nobject\n\n    \nsubmit event payload including form data\n\n  \n\n\n\n\n\nLive Preview", 
            "title": "Callbacks"
        }, 
        {
            "location": "/callbacks/#confirmaction", 
            "text": "Set a  tracking name  and javascript callback for a \"confirm\" button click event.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     confirmAction \n     obj \n     must be object formatted using following options / values \n     \n   \n     confirmAction  object \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      name  \n     string \n     optional  name of the confirm event to send to Lytics and Google Analytics \n   \n   \n      callback  \n     function \n     optional  function to execute when the use clicks the \"confirm\" button", 
            "title": "confirmAction"
        }, 
        {
            "location": "/callbacks/#live-preview", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/callbacks/#cancelaction", 
            "text": "Set a  tracking name  and javascript callback for a \"cancel\" button click event.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     cancelAction \n     obj \n     must be object formatted using following options / values \n     \n   \n     cancelAction  object \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      name  \n     string \n     optional  name of the cancel event to send to Lytics and Google Analytics \n   \n   \n      callback  \n     function \n     optional  function to execute when the use clicks the \"cancel\" button", 
            "title": "cancelAction"
        }, 
        {
            "location": "/callbacks/#live-preview_1", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/callbacks/#oninit", 
            "text": "Javascript callback function on initialization of the module, this should trigger just before the module is shown.  \n   \n     onInit  params \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      event  \n     string \n     name of the event \n   \n   \n      payload  \n     object \n     pathfora module object", 
            "title": "onInit"
        }, 
        {
            "location": "/callbacks/#live-preview_2", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/callbacks/#onload", 
            "text": "Javascript callback function on loading the module, triggered when the module is shown to the user.  \n   \n     onLoad  params \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      event  \n     string \n     name of the event \n   \n   \n      payload  \n     object \n     pathfora module object and the rendered DOM Element", 
            "title": "onLoad"
        }, 
        {
            "location": "/callbacks/#live-preview_3", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/callbacks/#onclick", 
            "text": "Javascript callback function  for  button layouts  only  on click of the button widget.  \n   \n     onClick  params \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      event  \n     string \n     name of the event \n   \n   \n      payload  \n     object \n     click event", 
            "title": "onClick"
        }, 
        {
            "location": "/callbacks/#live-preview_4", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/callbacks/#onsubmit", 
            "text": "Javascript callback function  for any types with form elements  on submission of the form (includes form data as param).  \n   \n     onSubmit  params \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      event  \n     string \n     name of the event \n   \n   \n      payload  \n     object \n     submit event payload including form data", 
            "title": "onSubmit"
        }, 
        {
            "location": "/callbacks/#live-preview_5", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/display_conditions/", 
            "text": "The \ndisplayConditions\n key controls how, when, and for how long any single module is displayed/hidden. All options can be combined with one-another for maximum control. Each module requires its own set of \ndisplayConditions\n. By default all modules will leverage \nshowOnInit\n. Upon configuring another options this init based display is automatically disabled unless explicitly defined again in the module config.\n\n\nvar module = pathfora.Message({\n  displayConditions: {\n    // display conditions here\n  }\n});\n\n\n\n\nshowOnInit\n\n\nDetermines if the rendered module is displayed as soon as it is initialized or waits for another event.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\ntrue\n\n\nbool\n\n\ndefault\n module will be displayed as soon as it has been loaded\n\n\n\n\n\n\nfalse\n\n\nbool\n\n\nmodule will be added to DOM but not displayed until another trigger instructs it to\n\n\n\n\n\n\n\n\n// example: loads immediately after initializing the module\n\ndisplayConditions: {\n  showOnInit: true\n}\n\n\n\n\nshowDelay\n\n\nAdds a delay, in seconds, that must be completed before module is loaded.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n0\n\n\nint\n\n\ndefault\n using 0 disables the showDelay property and will show immediately\n\n\n\n\n\n\n0 - \u221e\n\n\nint\n\n\nmodule will be displayed after waiting x seconds after initialization\n\n\n\n\n\n\n\n\n// example: loads after a 10 second delay\n\ndisplayConditions: {\n  showDelay: 10\n}\n\n\n\n\nhideAfter\n\n\nAdds a countdown, in seconds, that must hides module on expiration.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n0\n\n\nint\n\n\ndefault\n using 0 disables the showDelay property and will not be hidden\n\n\n\n\n\n\n0 - \u221e\n\n\nint\n\n\nmodule will hidden from screen after x seconds have passed\n\n\n\n\n\n\n\n\n// example: hide module after 10 seconds\n\ndisplayConditions: {\n  hideAfter: 10\n}\n\n\n\n\ndisplayWhenElementVisible\n\n\nTriggers the module when a specific DOM element enters the viewport.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\nelement id\n\n\nstring\n\n\nwaits for an element with specific id to enter the viewport\n\n\n\n\n\n\n\n\n// example: show module when the #footer is visible\n\ndisplayConditions: {\n  displayWhenElementVisible: \n#footer\n\n}\n\n\n\n\nscrollPercentageToDisplay\n\n\nTriggers the modal after a percentage of the page scroll has been performed.\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n0\n\n\nint\n\n\ndefault\n using 0 disables the property and will show immediately\n\n\n\n\n\n\n0 - 100\n\n\nint\n\n\nmodule will hidden until x percent of total scroll has been performed\n\n\n\n\n\n\n\n\n// example: show module when the 50 percent of the page scroll has been completed\n\ndisplayConditions: {\n  scrollPercentageToDisplay: 50\n}\n\n\n\n\npageVisits\n\n\nTriggers the module when the user visits the page a certain amount of times (total saved in cookie).\n\n\n\n\n\n\n\n\nValue\n\n\nType\n\n\nBehavior\n\n\n\n\n\n\n\n\n\n\n0\n\n\nint\n\n\ndefault\n using 0 disables the property and will show on all visits\n\n\n\n\n\n\n0 - \u221e\n\n\nint\n\n\nmodule will show only when visits \n x\n\n\n\n\n\n\n\n\n// example: show module after they have visited at least 3 times\n\ndisplayConditions: {\n  pageVisits: 3\n}\n\n\n\n\ndate\n\n\nDisplay the module in a specified interval of time.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \ndate\n\n    \nobj\n\n    \nmust be object formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \ndate\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n start_at \n\n    \nstring\n\n    \noptional\n valid date string \n2016-02-15T11:00:00.000Z\n for date to start showing module\n\n  \n\n  \n\n    \n end_at \n\n    \nstring\n\n    \noptional\n valid date string \n2016-02-15T11:00:00.000Z\n for date to stop showing module\n\n  \n\n\n\n\n\n// example: show module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at: \n2017-02-12T11:00:00.000Z\n\n  }\n}\n\n\n\n\n// example: hide module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    end_at: \n2017-02-12T11:00:00.000Z\n\n  }\n}\n\n\n\n\n// example: show module between February 12, 2017 and March 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at: \n2017-02-12T11:00:00.000Z\n,\n    end_at: \n2017-03-12T11:00:00.000Z\n\n  }\n}\n\n\n\n\nimpressions\n\n\nHide the module after a certain number of impressions\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nimpressions\n\n    \nobj\n\n    \nmust be object formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \ndate\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \n session \n\n    \nint\n\n    \noptional\n integer count of how many session-based impressions before showing the module\n\n  \n\n  \n\n    \n total \n\n    \nint\n\n    \noptional\n integer count of how many total (multisession) impressions before showing the module\n\n  \n\n\n\n\n\n// example: hide module after the second impressions in the same session\n\ndisplayConditions: {\n  impressions: {\n    session: 2\n  }\n}\n\n\n\n\n// example: hide module after five total impressions\n\ndisplayConditions: {\n  impressions: {\n    total: 5\n  }\n}\n\n\n\n\n// example: hide the module after the second impression in the same session\n// or if it has been seen five times ever\n\ndisplayConditions: {\n  impressions: {\n    session: 2,\n    total: 5\n  }\n}\n\n\n\n\nhideAfterAction\n\n\nHide the module after a particular action has been taken (\nclosed, confirm, cancel\n)\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nhideAfterAction\n\n    \nobj\n\n    \nmust be object formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \nclosed\n / \nconfirm\n / \ncancel\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nhideCount\n\n    \nint\n\n    \noptional\n integer count of times module has been closed manually by user\n\n  \n\n  \n\n    \nduration\n\n    \nint\n\n    \noptional\n integer representing how long the module should be hidden in seconds\n\n  \n\n\n\n\n\n// example: hide module for 6 minutes after 5th close\n\ndisplayConditions: {\n  hideAfterAction: {\n    closed: {\n      hideCount: 5,\n      duration: 360\n    }\n  }\n}\n\n\n\n\n// example: hide module permanently after confirmation has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    confirm: {\n      hideCount: 1\n    }\n  }\n}\n\n\n\n\n// example: hide module for 1 week after cancel has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 604800\n    }\n  }\n}\n\n\n\n\n// example: all of the above\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 604800\n    },\n    confirm: {\n      hideCount: 1\n    },\n    closed: {\n      hideCount: 5,\n      duration: 360\n    }\n  }\n}\n\n\n\n\nurlContains\n\n\nOnly display the module on pages that match the url conditions defined.\n\n\n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nurlContains\n\n    \narray\n\n    \nmust be an array of objects formatted using following options / values\n\n  \n\n\n\n\n\n\n  \n\n    \nobject in \nurlContains\n array\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nmatch\n\n    \nstring\n\n    \noptional\n name of the matching rule (see below)\n\n  \n\n  \n\n    \nvalue\n\n    \nstring\n\n    \nvalue to match the current page url against\n\n  \n\n\n\n\n\n\n  \n\n    \nmatch\n string\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nsimple\n\n    \nstring\n\n    \ndefault\n fuzzy match that removes the URL protocol and query string before matching\n\n  \n\n  \n\n    \nexact\n\n    \nstring\n\n    \nthe url must match what is typed exactly: protocol, query params, etc.\n\n  \n\n  \n\n    \nstring\n\n    \nstring\n\n    \nsub-string match against the url\n\n  \n\n  \n\n    \nregex\n\n    \nstring\n\n    \nevaluates regex against the url\n\n  \n\n\n\n\n\n// example: simple match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'simple',\n      value: 'www.getlytics.com'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com\n// http://www.getlytics.com\n// http://www.getlytics.com?ad_campaign=1ed387faed\n\n// Doesn't Match:\n// http://www.getlytics.com/blog\n// https://activate.getlytics.com\n\n\n\n\n// example: exact match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'exact',\n      value: 'https://www.getlytics.com/resources?id=a763efd12c'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com/resources?id=a763efd12c\n\n// Doesn't Match:\n// http://www.getlytics.com/resources?id=a763efd12c\n// https://getlytics.com/resources?id=a763efd12c\n// https://www.getlytics.com/resources?id=a763efd12c\nsomething=that-will-404\n\n\n\n\n// example: string match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'string',\n      value: '/blog/'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/blog/\n// http://getlytics.com/blog/some-post-in-the-past\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// https://www.getlytics.com/\n// http://getlytics.com/careers\n\n\n\n\n// example: regex match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'regex',\n      value: '\\/integrations\\/.+?\\?.*?ref=our_partner'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=our_partner\n// http://www.getlytics.com/integrations/campaignmonitor?session=125929\nref=our_partner\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=some_stranger\n// http://www.getlytics.com/integrations?ref=our_partner\n// http://www.getlytics.com/blog/adroll?session=125929\nref=our_partner", 
            "title": "Display Conditions"
        }, 
        {
            "location": "/display_conditions/#showoninit", 
            "text": "Determines if the rendered module is displayed as soon as it is initialized or waits for another event.     Value  Type  Behavior      true  bool  default  module will be displayed as soon as it has been loaded    false  bool  module will be added to DOM but not displayed until another trigger instructs it to     // example: loads immediately after initializing the module\n\ndisplayConditions: {\n  showOnInit: true\n}", 
            "title": "showOnInit"
        }, 
        {
            "location": "/display_conditions/#showdelay", 
            "text": "Adds a delay, in seconds, that must be completed before module is loaded.     Value  Type  Behavior      0  int  default  using 0 disables the showDelay property and will show immediately    0 - \u221e  int  module will be displayed after waiting x seconds after initialization     // example: loads after a 10 second delay\n\ndisplayConditions: {\n  showDelay: 10\n}", 
            "title": "showDelay"
        }, 
        {
            "location": "/display_conditions/#hideafter", 
            "text": "Adds a countdown, in seconds, that must hides module on expiration.     Value  Type  Behavior      0  int  default  using 0 disables the showDelay property and will not be hidden    0 - \u221e  int  module will hidden from screen after x seconds have passed     // example: hide module after 10 seconds\n\ndisplayConditions: {\n  hideAfter: 10\n}", 
            "title": "hideAfter"
        }, 
        {
            "location": "/display_conditions/#displaywhenelementvisible", 
            "text": "Triggers the module when a specific DOM element enters the viewport.     Value  Type  Behavior      element id  string  waits for an element with specific id to enter the viewport     // example: show module when the #footer is visible\n\ndisplayConditions: {\n  displayWhenElementVisible:  #footer \n}", 
            "title": "displayWhenElementVisible"
        }, 
        {
            "location": "/display_conditions/#scrollpercentagetodisplay", 
            "text": "Triggers the modal after a percentage of the page scroll has been performed.     Value  Type  Behavior      0  int  default  using 0 disables the property and will show immediately    0 - 100  int  module will hidden until x percent of total scroll has been performed     // example: show module when the 50 percent of the page scroll has been completed\n\ndisplayConditions: {\n  scrollPercentageToDisplay: 50\n}", 
            "title": "scrollPercentageToDisplay"
        }, 
        {
            "location": "/display_conditions/#pagevisits", 
            "text": "Triggers the module when the user visits the page a certain amount of times (total saved in cookie).     Value  Type  Behavior      0  int  default  using 0 disables the property and will show on all visits    0 - \u221e  int  module will show only when visits   x     // example: show module after they have visited at least 3 times\n\ndisplayConditions: {\n  pageVisits: 3\n}", 
            "title": "pageVisits"
        }, 
        {
            "location": "/display_conditions/#date", 
            "text": "Display the module in a specified interval of time.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     date \n     obj \n     must be object formatted using following options / values \n     \n   \n     date  object \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      start_at  \n     string \n     optional  valid date string  2016-02-15T11:00:00.000Z  for date to start showing module \n   \n   \n      end_at  \n     string \n     optional  valid date string  2016-02-15T11:00:00.000Z  for date to stop showing module \n     // example: show module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at:  2017-02-12T11:00:00.000Z \n  }\n}  // example: hide module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    end_at:  2017-02-12T11:00:00.000Z \n  }\n}  // example: show module between February 12, 2017 and March 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at:  2017-02-12T11:00:00.000Z ,\n    end_at:  2017-03-12T11:00:00.000Z \n  }\n}", 
            "title": "date"
        }, 
        {
            "location": "/display_conditions/#impressions", 
            "text": "Hide the module after a certain number of impressions  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     impressions \n     obj \n     must be object formatted using following options / values \n     \n   \n     date  object \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n      session  \n     int \n     optional  integer count of how many session-based impressions before showing the module \n   \n   \n      total  \n     int \n     optional  integer count of how many total (multisession) impressions before showing the module \n     // example: hide module after the second impressions in the same session\n\ndisplayConditions: {\n  impressions: {\n    session: 2\n  }\n}  // example: hide module after five total impressions\n\ndisplayConditions: {\n  impressions: {\n    total: 5\n  }\n}  // example: hide the module after the second impression in the same session\n// or if it has been seen five times ever\n\ndisplayConditions: {\n  impressions: {\n    session: 2,\n    total: 5\n  }\n}", 
            "title": "impressions"
        }, 
        {
            "location": "/display_conditions/#hideafteraction", 
            "text": "Hide the module after a particular action has been taken ( closed, confirm, cancel )  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     hideAfterAction \n     obj \n     must be object formatted using following options / values \n     \n   \n     closed  /  confirm  /  cancel  object \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     hideCount \n     int \n     optional  integer count of times module has been closed manually by user \n   \n   \n     duration \n     int \n     optional  integer representing how long the module should be hidden in seconds \n     // example: hide module for 6 minutes after 5th close\n\ndisplayConditions: {\n  hideAfterAction: {\n    closed: {\n      hideCount: 5,\n      duration: 360\n    }\n  }\n}  // example: hide module permanently after confirmation has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    confirm: {\n      hideCount: 1\n    }\n  }\n}  // example: hide module for 1 week after cancel has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 604800\n    }\n  }\n}  // example: all of the above\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 604800\n    },\n    confirm: {\n      hideCount: 1\n    },\n    closed: {\n      hideCount: 5,\n      duration: 360\n    }\n  }\n}", 
            "title": "hideAfterAction"
        }, 
        {
            "location": "/display_conditions/#urlcontains", 
            "text": "Only display the module on pages that match the url conditions defined.  \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     urlContains \n     array \n     must be an array of objects formatted using following options / values \n     \n   \n     object in  urlContains  array \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     match \n     string \n     optional  name of the matching rule (see below) \n   \n   \n     value \n     string \n     value to match the current page url against \n     \n   \n     match  string \n   \n   \n     VALUE \n     TYPE \n     BEHAVIOR \n   \n   \n     simple \n     string \n     default  fuzzy match that removes the URL protocol and query string before matching \n   \n   \n     exact \n     string \n     the url must match what is typed exactly: protocol, query params, etc. \n   \n   \n     string \n     string \n     sub-string match against the url \n   \n   \n     regex \n     string \n     evaluates regex against the url \n     // example: simple match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'simple',\n      value: 'www.getlytics.com'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com\n// http://www.getlytics.com\n// http://www.getlytics.com?ad_campaign=1ed387faed\n\n// Doesn't Match:\n// http://www.getlytics.com/blog\n// https://activate.getlytics.com  // example: exact match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'exact',\n      value: 'https://www.getlytics.com/resources?id=a763efd12c'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com/resources?id=a763efd12c\n\n// Doesn't Match:\n// http://www.getlytics.com/resources?id=a763efd12c\n// https://getlytics.com/resources?id=a763efd12c\n// https://www.getlytics.com/resources?id=a763efd12c something=that-will-404  // example: string match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'string',\n      value: '/blog/'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/blog/\n// http://getlytics.com/blog/some-post-in-the-past\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// https://www.getlytics.com/\n// http://getlytics.com/careers  // example: regex match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'regex',\n      value: '\\/integrations\\/.+?\\?.*?ref=our_partner'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=our_partner\n// http://www.getlytics.com/integrations/campaignmonitor?session=125929 ref=our_partner\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=some_stranger\n// http://www.getlytics.com/integrations?ref=our_partner\n// http://www.getlytics.com/blog/adroll?session=125929 ref=our_partner", 
            "title": "urlContains"
        }, 
        {
            "location": "/config/", 
            "text": "For multiple modules with common elements we can define a configuration to apply to all modules, or all modules of a certain type. Maintaining a config helps reduce the code repitition and allows you to change settings accross many widgets in one place. A config object can be passed as third, optional argument to \ninitializeWidgets\n.\n\n\nvar config = {\n  // config settings\n};\n\n// Lytics Account ID can be an empty string if not used for targeting\npathfora.initializeWidgets([ module, module2 ], \n, config);\n\n\n\n\n\n  \n\n    \nconfig\n object\n\n  \n\n  \n\n    \nVALUE\n\n    \nTYPE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \ngeneric\n\n    \nobj\n\n    \noptional\n setting which should apply to all modules initialized with this config\n\n  \n\n  \n\n    \nmessage\n\n    \nobj\n\n    \noptional\n setting which should apply to all \nmessage\n modules initialized with this config\n\n  \n\n   \n\n    \nform\n\n    \nobj\n\n    \noptional\n setting which should apply to all \nform\n modules initialized with this config\n\n  \n\n  \n\n    \nsubscription\n\n    \nobject\n\n    \noptional\n setting which should apply to all \nsubscription\n modules initialized with this config\n\n  \n\n   \n\n    \nsitegate\n\n    \nobject\n\n    \noptional\n setting which should apply to all \ngate\n modules initialized with this config\n\n  \n\n \n\n\n\nExample\n\n\nLive Preview", 
            "title": "Generalizing Config"
        }, 
        {
            "location": "/config/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/config/#live-preview", 
            "text": "", 
            "title": "Live Preview"
        }, 
        {
            "location": "/tracking/", 
            "text": "Pathfora can send tracking events and the user data submitted to Lytics and Google Analytics, as long as your tags are all set up in the correct order, module data will be sent automatically. Below we will look at which fields are sent in detail and their formats.\n\n\nLytics\n\n\nAs long as your \nLytics javascript tag\n is loaded before the Pathfora tag, all event data, and data collected from modules with user input will be sent to the \ndefault\n stream in your Lytics account. The following raw data fields can be sent to Lytics by Pathfora.\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\npf-widget-id\n\n\nstring\n\n\nid of the module set in the config\n\n\n\n\n\n\npf-widget-type\n\n\nstring\n\n\ntype of the module\n\n\n\n\n\n\npf-widget-layout\n\n\nstring\n\n\nlayout of the module\n\n\n\n\n\n\npf-widget-variant\n\n\nint\n\n\nvariant of the module\n\n\n\n\n\n\npf-widget-event\n\n\nstring\n\n\nname of the event (see below)\n\n\n\n\n\n\npf-widget-action\n\n\nstring\n\n\ncustom tracking names for button click events as defined in \nconfirmAction\n or \ncancelAction\n\n\n\n\n\n\npf-form-username\n\n\nstring\n\n\nuser submitted value of \"name\" field on module\n\n\n\n\n\n\npf-form-title\n\n\nstring\n\n\nuser submitted value of \"title\" field on module\n\n\n\n\n\n\npf-form-email\n\n\nstring\n\n\nuser submitted value of \"email\" field on module\n\n\n\n\n\n\npf-form-message\n\n\nstring\n\n\nuser submitted value of \"message\" field on module\n\n\n\n\n\n\npf-form-organization\n\n\nstring\n\n\nuser submitted value of \"organization\" field on module\n\n\n\n\n\n\n\n\n\n  \n\n    \npf-widget-event\n string\n\n  \n\n  \n\n    \nVALUE\n\n    \nBEHAVIOR\n\n  \n\n  \n\n    \nshow\n\n    \nmodule was displayed to the user\n\n  \n\n  \n\n    \nclose\n\n    \nmodule was closed by the user\n\n  \n\n  \n\n    \nconfirm\n\n    \n\"confirm\" button was clicked by the user\n\n  \n\n  \n\n    \ncancel\n\n    \n\"cancel\" button was clicked by the user\n\n  \n\n  \n\n    \nsubmit\n\n    \nuser submitted information from a \nform module\n\n  \n\n  \n\n    \nsubscribe\n\n    \nuser submitted email from a \nsubscription module\n\n  \n\n  \n\n    \nunlock\n\n    \nuser submitted information from a \ngate module\n\n  \n\n\n\n\n\nTo verify that the event data fields are being sent properly to Lytics, you can simulate an action by interacting with your module and checking that the expected fields exist in the data streams section of your Lytics Account.\n\n\nBy default these fields are fields are available as user fields so that you can use them in the creation of segments. If you need help using these fields or would like to map the user fields differently please contact your customer success representative \nsuccess@getlytics.com\n.\n\n\nGoogle Analytics\n\n\nPathfora will send event data from the modules on your website to your google analytics account as long as it has access to the \nga\n function. This requires that you have the \nanalytics.js snippet\n on your website loaded before the Pathfora tag. An event sent to google analytics by pathfora will use the following attributes for \nevent tracking\n:\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\neventCategory\n\n\nstring\n\n\nLytics\n\n\n\n\n\n\neventAction\n\n\nstring\n\n\n[id of module] : [event name]\n\n\n\n\n\n\n\n\nThe \n[event name]\n signifier in eventAction will match the event names for the \npf-widget-event\n field \nsent to Lytics\n, however if you've defined custom names in the \nconfirmAction\n or \ncancelAction\n settings this will override the event name for those actions.", 
            "title": "Tracking"
        }, 
        {
            "location": "/tracking/#lytics", 
            "text": "As long as your  Lytics javascript tag  is loaded before the Pathfora tag, all event data, and data collected from modules with user input will be sent to the  default  stream in your Lytics account. The following raw data fields can be sent to Lytics by Pathfora.     Attribute  Type  Value      pf-widget-id  string  id of the module set in the config    pf-widget-type  string  type of the module    pf-widget-layout  string  layout of the module    pf-widget-variant  int  variant of the module    pf-widget-event  string  name of the event (see below)    pf-widget-action  string  custom tracking names for button click events as defined in  confirmAction  or  cancelAction    pf-form-username  string  user submitted value of \"name\" field on module    pf-form-title  string  user submitted value of \"title\" field on module    pf-form-email  string  user submitted value of \"email\" field on module    pf-form-message  string  user submitted value of \"message\" field on module    pf-form-organization  string  user submitted value of \"organization\" field on module     \n   \n     pf-widget-event  string \n   \n   \n     VALUE \n     BEHAVIOR \n   \n   \n     show \n     module was displayed to the user \n   \n   \n     close \n     module was closed by the user \n   \n   \n     confirm \n     \"confirm\" button was clicked by the user \n   \n   \n     cancel \n     \"cancel\" button was clicked by the user \n   \n   \n     submit \n     user submitted information from a  form module \n   \n   \n     subscribe \n     user submitted email from a  subscription module \n   \n   \n     unlock \n     user submitted information from a  gate module \n     To verify that the event data fields are being sent properly to Lytics, you can simulate an action by interacting with your module and checking that the expected fields exist in the data streams section of your Lytics Account.  By default these fields are fields are available as user fields so that you can use them in the creation of segments. If you need help using these fields or would like to map the user fields differently please contact your customer success representative  success@getlytics.com .", 
            "title": "Lytics"
        }, 
        {
            "location": "/tracking/#google-analytics", 
            "text": "Pathfora will send event data from the modules on your website to your google analytics account as long as it has access to the  ga  function. This requires that you have the  analytics.js snippet  on your website loaded before the Pathfora tag. An event sent to google analytics by pathfora will use the following attributes for  event tracking :     Attribute  Type  Value      eventCategory  string  Lytics    eventAction  string  [id of module] : [event name]     The  [event name]  signifier in eventAction will match the event names for the  pf-widget-event  field  sent to Lytics , however if you've defined custom names in the  confirmAction  or  cancelAction  settings this will override the event name for those actions.", 
            "title": "Google Analytics"
        }
    ]
}