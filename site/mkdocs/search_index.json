{
    "docs": [
        {
            "location": "/", 
            "text": "Lytics Pathfora JS is a lightweight SDK for displaying personalized modules on your website. It integrates with your \nLytics\n account to track user actions, and conditionally display modules based on your users' audience membership. This documentation will walk you through everything you need to create your own highly customized and personalized module. Code and live preview examples are provided along the way.\n\n\nGetting Started\n\n\nBefore you begin creating modules with Pathfora you must add the \nLytics javascript tag\n to your website. If you are using \nLytics Personalization\n to power your modules, Pathfora will be automatically loaded through your Lytics javascript tag. If you're creating a custom module, the Pathfora tag must be loaded after the Lytics tag.\n\n\n!-- Your Lytics JS Tag --\n\n\nscript src=\nhttps://c.lytics.io/api/tag/YOUR LYTICS ACCOUNT ID/lio.js\n/script\n\n\n\n!-- Pathfora Tag --\n\n\nscript src=\nhttp://c.lytics.io/static/pathfora.min.js\n/script\n\n\n\n\n\nNext you'll need to set up configuration for your module and initialize it with \ninitializeWidgets\n. Example configurations, settings, and their generated modules can be found throughout the documentation.\n\n\nOverview\n\n\nHere are a couple sections to get you started on the basics of Pathfora JS. See the navigation in the sidebar for a full list of docs.\n\n\n\n\n\n\nAPI Reference\n \n\n\n\n\nThis section acts as a reference for Pathfora's top level functions which will use the module configs you create to deploy modules on your website.\n\n\n\n\n\n\n\n\nTypes\n \n\n\n\n\nThe type parameter relays information to the layout (see below) related to the type of content being rendered. Pathfora currently supports four types of modules: message, form, subscription and gate.\n\n\n\n\n\n\n\n\nLayouts\n\n\n\n\nThe layout controls the style (what does the module look like \n how does it animate into view). Pathfora currently supports four different layouts for each of the types: modal, slideout, bar, and button.\n\n\n\n\n\n\n\n\nAudience Targeting\n\n\n\n\nThis section will walk you through how to make your modules truly personalized by targeting them to a specific subset of your users as defined by your Lytics audiences.\n\n\n\n\n\n\n\n\nDisplay Conditions\n\n\n\n\nDisplay conditions can control when the module is displayed based on the current date, previous actions of the user, current scroll position on the page, and many more settings.\n\n\n\n\n\n\n\n\nCustomization\n \n\n\n\n\nHere we cover a few of the options for basic to full customization of the settings such as button and field names, color themes, look and feel.", 
            "title": "Pathfora JS"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Before you begin creating modules with Pathfora you must add the  Lytics javascript tag  to your website. If you are using  Lytics Personalization  to power your modules, Pathfora will be automatically loaded through your Lytics javascript tag. If you're creating a custom module, the Pathfora tag must be loaded after the Lytics tag.  !-- Your Lytics JS Tag --  script src= https://c.lytics.io/api/tag/YOUR LYTICS ACCOUNT ID/lio.js /script  !-- Pathfora Tag --  script src= http://c.lytics.io/static/pathfora.min.js /script   Next you'll need to set up configuration for your module and initialize it with  initializeWidgets . Example configurations, settings, and their generated modules can be found throughout the documentation.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#overview", 
            "text": "Here are a couple sections to get you started on the basics of Pathfora JS. See the navigation in the sidebar for a full list of docs.    API Reference     This section acts as a reference for Pathfora's top level functions which will use the module configs you create to deploy modules on your website.     Types     The type parameter relays information to the layout (see below) related to the type of content being rendered. Pathfora currently supports four types of modules: message, form, subscription and gate.     Layouts   The layout controls the style (what does the module look like   how does it animate into view). Pathfora currently supports four different layouts for each of the types: modal, slideout, bar, and button.     Audience Targeting   This section will walk you through how to make your modules truly personalized by targeting them to a specific subset of your users as defined by your Lytics audiences.     Display Conditions   Display conditions can control when the module is displayed based on the current date, previous actions of the user, current scroll position on the page, and many more settings.     Customization     Here we cover a few of the options for basic to full customization of the settings such as button and field names, color themes, look and feel.", 
            "title": "Overview"
        }, 
        {
            "location": "/api/methods/", 
            "text": "This document will walk you through the methods of the \npathfora\n class that will be used to help you deploy your modules. The rest of the SDK documentation will walk you through how to customize your module's configuration, and provide code examples to show you these methods in context.\n\n\ninitializeWidgets\n\n\nThis method is used to initialize any modules built with Pathfora. It kicks off all the heavy lifting that needs to be done to render the modules on the page based on their configuration settings.\n\n\n\n  \n\n    \n\n      \ninitializeWidgets\n function\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nmodules\n\n    \narray or targetting object\n\n    \nlist of modules to initilize on the page\n\n  \n\n  \n\n    \nconfig\n\n    \nobject\n\n    \noptional\n \ngeneralized configuration\n settings for multiple modules\n\n  \n\n\n\n\n\nType Configuration Methods\n\n\nEach module type that Pathfora supports has its own configuration method, which accepts a single object as a parameter. This object should include the configuration settings for the module, the following keys are common across all module configuration types.\n\n\n\n  \n\n    \n\n      \ntype configuration object\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nid\n\n    \nstring\n\n    \nrequired\n unique id for the module, no two modules can have the same id\n\n  \n\n  \n\n    \nmsg\n\n    \nstring\n\n    \ntext message content, often contained in a paragraph tag in the module\n\n  \n\n  \n\n    \nheadline\n\n    \nstring\n\n    \nheader or title text for the module, not supported by some layouts\n\n  \n\n\n\n\n\nWe cover each of these type configuration methods and their parameters in individual type sections below.\n\n\n\n\nMessage\n\n\nForm\n\n\nSubscription\n\n\nGate\n\n\n\n\ninitializeABTesting\n\n\nThis method is used to initialize \nA/B Tests\n modules. If you're creating an A/B test scenario this should always be called \nbefore\n the \ninitializeWidgets\n method.\n\n\n\n  \n\n    \n\n      \ninitializeABTesting\n function\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nabTests\n\n    \narray\n\n    \nlist of A/B test config objects to initialize\n\n  \n\n\n\n\n\nA/B Test Configuration Method\n\n\nA/B Tests have their own configuration method \nABTest\n. We cover this configuration in detail in the \nA/B Testing\n section of this documentation.\n\n\nintegrateWithFacebook\n\n\nPathfora can integrate with your Facebook App to allow users to autofill the fields of \nform\n or \ngate\n modules with their facebook profile information. This method is used to authenticate this integration with Facebook. This method should be called \nbefore\n the \ninitializeWidgets\n method.\n\n\nNote:\n In addition to using this method, you will need to enable \nsocial login\n in your module's config to allow for form autofill.\n\n\n\n  \n\n    \n\n      \nintegrateWithFacebook\n function\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nappId\n\n    \nstring\n\n    \napp id\n for your Facebook application\n\n  \n\n\n\n\n\nintegrateWithGoogle\n\n\nPathfora can integrate with your Google App to allow users to autofill the fields of \nform\n or \ngate\n modules with their Google account information. This method is used to authenticate this integration with Google. This method should be called \nbefore\n the \ninitializeWidgets\n method.\n\n\nNote:\n In addition to using this method, you will need to enable \nsocial login\n in your module's config to allow for form autofill.\n\n\n\n  \n\n    \n\n      \nintegrateWithGoogle\n function\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nclientID\n\n    \nstring\n\n    \nclient id\n from your Google Developers Console project", 
            "title": "Methods"
        }, 
        {
            "location": "/api/methods/#initializewidgets", 
            "text": "This method is used to initialize any modules built with Pathfora. It kicks off all the heavy lifting that needs to be done to render the modules on the page based on their configuration settings.  \n   \n     \n       initializeWidgets  function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     modules \n     array or targetting object \n     list of modules to initilize on the page \n   \n   \n     config \n     object \n     optional   generalized configuration  settings for multiple modules", 
            "title": "initializeWidgets"
        }, 
        {
            "location": "/api/methods/#type-configuration-methods", 
            "text": "Each module type that Pathfora supports has its own configuration method, which accepts a single object as a parameter. This object should include the configuration settings for the module, the following keys are common across all module configuration types.  \n   \n     \n       type configuration object \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     id \n     string \n     required  unique id for the module, no two modules can have the same id \n   \n   \n     msg \n     string \n     text message content, often contained in a paragraph tag in the module \n   \n   \n     headline \n     string \n     header or title text for the module, not supported by some layouts \n     We cover each of these type configuration methods and their parameters in individual type sections below.   Message  Form  Subscription  Gate", 
            "title": "Type Configuration Methods"
        }, 
        {
            "location": "/api/methods/#initializeabtesting", 
            "text": "This method is used to initialize  A/B Tests  modules. If you're creating an A/B test scenario this should always be called  before  the  initializeWidgets  method.  \n   \n     \n       initializeABTesting  function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     abTests \n     array \n     list of A/B test config objects to initialize", 
            "title": "initializeABTesting"
        }, 
        {
            "location": "/api/methods/#ab-test-configuration-method", 
            "text": "A/B Tests have their own configuration method  ABTest . We cover this configuration in detail in the  A/B Testing  section of this documentation.", 
            "title": "A/B Test Configuration Method"
        }, 
        {
            "location": "/api/methods/#integratewithfacebook", 
            "text": "Pathfora can integrate with your Facebook App to allow users to autofill the fields of  form  or  gate  modules with their facebook profile information. This method is used to authenticate this integration with Facebook. This method should be called  before  the  initializeWidgets  method.  Note:  In addition to using this method, you will need to enable  social login  in your module's config to allow for form autofill.  \n   \n     \n       integrateWithFacebook  function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     appId \n     string \n     app id  for your Facebook application", 
            "title": "integrateWithFacebook"
        }, 
        {
            "location": "/api/methods/#integratewithgoogle", 
            "text": "Pathfora can integrate with your Google App to allow users to autofill the fields of  form  or  gate  modules with their Google account information. This method is used to authenticate this integration with Google. This method should be called  before  the  initializeWidgets  method.  Note:  In addition to using this method, you will need to enable  social login  in your module's config to allow for form autofill.  \n   \n     \n       integrateWithGoogle  function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     clientID \n     string \n     client id  from your Google Developers Console project", 
            "title": "integrateWithGoogle"
        }, 
        {
            "location": "/api/config/", 
            "text": "For multiple modules with common elements we can define a configuration to apply to all modules, or all modules of a certain type. Maintaining a common config helps reduce the code repitition and allows you to change settings accross many widgets in one place. A config object can be passed as a second, optional argument to \ninitializeWidgets\n.\n\n\nvar config = {\n  generic: {\n    theme: 'dark'\n  }\n};\n\npathfora.initializeWidgets([module, module2], config);\n\n\n\n\n\n  \n\n    \n\n      \nconfig\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n  \n\n    \ngeneric\n\n    \nobject\n\n    \noptional\n setting which should apply to all modules initialized with this config\n\n  \n\n  \n\n    \nmessage\n\n    \nobject\n\n    \noptional\n setting which should apply to all \nmessage\n modules initialized with this config\n\n  \n\n   \n\n    \nform\n\n    \nobject\n\n    \noptional\n setting which should apply to all \nform\n modules initialized with this config\n\n  \n\n  \n\n    \nsubscription\n\n    \nobject\n\n    \noptional\n setting which should apply to all \nsubscription\n modules initialized with this config\n\n  \n\n   \n\n    \nsitegate\n\n    \nobject\n\n    \noptional\n setting which should apply to all \ngate\n modules initialized with this config\n\n  \n\n \n\n\n\nExample\n\n\nLive Preview", 
            "title": "Generalized Configuration"
        }, 
        {
            "location": "/api/config/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/types/message/", 
            "text": "Message type modules are focused on delivering outbound communication. For example: announcing a product launch, new content, top-level alert, etc. These modules provide a simple text message which can be used in a variety of formats.\n\n\nvar module = new pathfora.Message({\n  id: 'my-message-module-id',\n  headline: 'My Headline Text',\n  msg: 'My message text here.'\n});\n\npathfora.initializeWidgets([module]);\n\n\n\n\nlayout\n\n\nDefine which layout type the form module should use.\n\n\n\n  \n\n    \n\n      \nlayout\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nmodal\n\n    \nmodule uses a \nmodal layout\n\n  \n\n  \n\n    \nslideout\n\n    \nmodule uses a \nslideout layout\n\n  \n\n  \n\n    \nbar\n\n    \nmodule uses a \nbar layout\n\n  \n\n  \n\n    \nbutton\n\n    \nmodule uses a \nbutton layout\n\n  \n\n\n\n\n\nModal - \nLive Preview\n\n\n\n\n\n\n\n\nSlideout - \nLive Preview\n\n\n\n\n\n\n\n\nBar - \nLive Preview\n\n\n\n\n\n\n\n\nButton - \nLive Preview", 
            "title": "Message"
        }, 
        {
            "location": "/types/message/#layout", 
            "text": "Define which layout type the form module should use.  \n   \n     \n       layout  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     modal \n     module uses a  modal layout \n   \n   \n     slideout \n     module uses a  slideout layout \n   \n   \n     bar \n     module uses a  bar layout \n   \n   \n     button \n     module uses a  button layout", 
            "title": "layout"
        }, 
        {
            "location": "/types/form/", 
            "text": "Form type modules are used primarily for data collection or user identification. Supporting a variety of form fields and options for passing data to various end-points, this type presents a form for the user to fill out and submit.\n\n\nvar module = new pathfora.Form({\n  id: 'my-form-module-id',\n  headline: 'My Headline Text',\n  msg: 'My message text here.'\n});\n\npathfora.initializeWidgets([module]);\n\n\n\n\nlayout\n\n\nDefine which layout type the form module should use.\n\n\n\n  \n\n    \n\n      \nlayout\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nmodal\n\n    \nmodule uses a \nmodal layout\n\n  \n\n  \n\n    \nslideout\n\n    \nmodule uses a \nslideout layout\n\n  \n\n\n\n\n\nForm - \nLive Preview\n\n\n\n\n\n\n\n\nSlideout - \nLive Preview\n\n\n\n\n\n\n\n\nshowSocialLogin\n\n\nWith social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email. This setting requires authentication with \nintegrateWithFacebook\n or \nintegrateWithGoogle\n.\n\n\n\n  \n\n    \n\n      \nshowSocialLogin\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nfalse\n\n    \ndefault\n do not show social login buttons\n\n  \n\n  \n\n    \ntrue\n\n    \nshow social login buttons\n\n  \n\n\n\n\n\nSocial Login /w Google \n Facebook - \nLive Preview", 
            "title": "Form"
        }, 
        {
            "location": "/types/form/#layout", 
            "text": "Define which layout type the form module should use.  \n   \n     \n       layout  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     modal \n     module uses a  modal layout \n   \n   \n     slideout \n     module uses a  slideout layout", 
            "title": "layout"
        }, 
        {
            "location": "/types/form/#showsociallogin", 
            "text": "With social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email. This setting requires authentication with  integrateWithFacebook  or  integrateWithGoogle .  \n   \n     \n       showSocialLogin  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     false \n     default  do not show social login buttons \n   \n   \n     true \n     show social login buttons", 
            "title": "showSocialLogin"
        }, 
        {
            "location": "/types/subscription/", 
            "text": "Subscription modules are a lite version of the form type focused on gathering the minimum amount of user data necessary to maintain communication. By default only email address will be collected by a subscription module.\n\n\nvar module = new pathfora.Subscription({\n  id: 'my-subscription-module-id',\n  headline: 'My Headline Text',\n  msg: 'My message text here.'\n});\n\npathfora.initializeWidgets([module]);\n\n\n\n\nlayout\n\n\nDefine which layout type the form module should use.\n\n\n\n  \n\n    \n\n      \nlayout\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nmodal\n\n    \nmodule uses a \nmodal layout\n\n  \n\n  \n\n    \nslideout\n\n    \nmodule uses a \nslideout layout\n\n  \n\n  \n\n    \nbar\n\n    \nmodule uses a \nbar layout\n\n  \n\n\n\n\n\nModal - \nLive Preview\n\n\n\n\n\n\n\n\nSlideout - \nLive Preview\n\n\n\n\n\n\n\n\nBar - \nLive Preview", 
            "title": "Subscription"
        }, 
        {
            "location": "/types/subscription/#layout", 
            "text": "Define which layout type the form module should use.  \n   \n     \n       layout  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     modal \n     module uses a  modal layout \n   \n   \n     slideout \n     module uses a  slideout layout \n   \n   \n     bar \n     module uses a  bar layout", 
            "title": "layout"
        }, 
        {
            "location": "/types/gate/", 
            "text": "Gate modules provide an approach for requiring data collection or user identification. This type of module prevents users from viewing content or navigating until some sort of data has been collected and processed. These modules are highly effective when promoting white papers or other online materials that are not to be freely available.\n\n\nvar module = new pathfora.SiteGate({\n  id: 'my-gate-module-id',\n  headline: 'My Headline Text',\n  msg: 'My message text here.'\n});\n\npathfora.initializeWidgets([module]);\n\n\n\n\nGate\n\n\nGate modules will remain hidden once the user has submitted their information once. A cookie \nPathforaUnlocked_[id of module]\n is created to save this status so that the user has access to the gated content as long as their cookies persist.\n\n\nSiteGate - \nLive Preview\n\n\n\n\n\n\n\n\nshowSocialLogin\n\n\nWith social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email. This setting requires authentication with \nintegrateWithFacebook\n or \nintegrateWithGoogle\n.\n\n\n\n  \n\n    \n\n      \nshowSocialLogin\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nfalse\n\n    \ndefault\n do not show social login buttons\n\n  \n\n  \n\n    \ntrue\n\n    \nshow social login buttons\n\n  \n\n\n\n\n\nSocial Login /w Google \n Facebook - \nLive Preview\n\n\n\n\n\n\n\n\nshowForm\n\n\nBy default the a gate module includes a form, with this setting it can be hidden for a text-only gated widget.\n\n\n\n  \n\n    \n\n      \nshowForm\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntrue\n\n    \ndefault\n show the gated form\n\n  \n\n  \n\n    \nfalse\n\n    \nhide the form for a text-only gated widget\n\n  \n\n\n\n\n\nText-only Gate - \nLive Preview", 
            "title": "Gate"
        }, 
        {
            "location": "/types/gate/#gate", 
            "text": "Gate modules will remain hidden once the user has submitted their information once. A cookie  PathforaUnlocked_[id of module]  is created to save this status so that the user has access to the gated content as long as their cookies persist.", 
            "title": "Gate"
        }, 
        {
            "location": "/types/gate/#showsociallogin", 
            "text": "With social login enabled, a module can show Google or Facebook login buttons which the user can use to connect to their account. This will autofill the form elements with their account information such as name and email. This setting requires authentication with  integrateWithFacebook  or  integrateWithGoogle .  \n   \n     \n       showSocialLogin  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     false \n     default  do not show social login buttons \n   \n   \n     true \n     show social login buttons", 
            "title": "showSocialLogin"
        }, 
        {
            "location": "/types/gate/#showform", 
            "text": "By default the a gate module includes a form, with this setting it can be hidden for a text-only gated widget.  \n   \n     \n       showForm  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     true \n     default  show the gated form \n   \n   \n     false \n     hide the form for a text-only gated widget", 
            "title": "showForm"
        }, 
        {
            "location": "/layouts/modal/", 
            "text": "A modal is a large size module with an overlay behind it. It's meant to cover a substantial area of the browser window, so that it demands attention from the user.\n\n\nvariant\n\n\nVariant determines any extra content (dictated by extra keys in the config) that may be used by the module.\n\n\n\n  \n\n    \n\n      \nvariant\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n1\n\n    \ndefault\n text-only-module\n\n  \n\n  \n\n    \n2\n\n    \nmodule includes an image\n\n  \n\n  \n\n    \n3\n\n    \nmodule includes a \ncontent recommendation\n (this feature is in \nbeta\n)\n\n  \n\n\n\n\n\nimage\n\n\nDefine the featured image you would like to use for the module.\n\n\nNote:\n This setting is only valid for modules with a variant value of 2.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nimage\n\n    \nstring\n\n    \nURL of the image to feature\n\n  \n\n\n\n\n\nImage (variant 2) - \nLive Preview", 
            "title": "Modal"
        }, 
        {
            "location": "/layouts/modal/#variant", 
            "text": "Variant determines any extra content (dictated by extra keys in the config) that may be used by the module.  \n   \n     \n       variant  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     1 \n     default  text-only-module \n   \n   \n     2 \n     module includes an image \n   \n   \n     3 \n     module includes a  content recommendation  (this feature is in  beta )", 
            "title": "variant"
        }, 
        {
            "location": "/layouts/modal/#image", 
            "text": "Define the featured image you would like to use for the module.  Note:  This setting is only valid for modules with a variant value of 2.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     image \n     string \n     URL of the image to feature", 
            "title": "image"
        }, 
        {
            "location": "/layouts/slideout/", 
            "text": "A slideout is a medium module which slides from either side into the window. This module provides a good amount of space for text and content without taking the full attention of the user.\n\n\nposition\n\n\nPositition of the slideout module relative to the browser window.\n\n\n\n  \n\n    \n\n      \nposition\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nbottom-left\n\n    \ndefault\n display the module in the bottom left corner of the window\n\n  \n\n  \n\n    \nbottom-right\n\n    \ndisplay the module in the bottom right corner of the window\n\n  \n\n\n\n\n\nPositions - \nLive Preview\n\n\n\n\n\n\n\n\norigin\n\n\nOrigin is the direction from which the the module will slide in.\n\n\n\n  \n\n    \n\n      \norigin\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nleft\n\n    \ndefault\n for bottom-left positioned modules\n\n  \n\n  \n\n    \nright\n\n    \ndefault\n for bottom-right positioned modules\n\n  \n\n  \n\n    \nbottom\n\n    \nmodule slides up from the bottom of the window\n\n  \n\n\n\n\n\nBottom - \nLive Preview\n\n\n\n\n\n\nvariant\n\n\nVariant determines any extra content that may be used by the module.\n\n\n\n  \n\n    \n\n      \nvariant\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n1\n\n    \ndefault\n text-only-module\n\n  \n\n  \n\n    \n2\n\n    \nmodule includes an image\n\n  \n\n  \n\n    \n3\n\n    \nmodule includes a \ncontent recommendation\n (this feature is in \nbeta\n)\n\n  \n\n\n\n\n\nimage\n\n\nDefine the featured image you would like to use for the module.\n\n\nNote:\n This setting is only valid for modules with a variant value of 2.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nimage\n\n    \nstring\n\n    \nURL of the image to feature\n\n  \n\n\n\n\n\nImage (variant 2) - \nLive Preview", 
            "title": "Slideout"
        }, 
        {
            "location": "/layouts/slideout/#position", 
            "text": "Positition of the slideout module relative to the browser window.  \n   \n     \n       position  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     bottom-left \n     default  display the module in the bottom left corner of the window \n   \n   \n     bottom-right \n     display the module in the bottom right corner of the window", 
            "title": "position"
        }, 
        {
            "location": "/layouts/slideout/#origin", 
            "text": "Origin is the direction from which the the module will slide in.  \n   \n     \n       origin  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     left \n     default  for bottom-left positioned modules \n   \n   \n     right \n     default  for bottom-right positioned modules \n   \n   \n     bottom \n     module slides up from the bottom of the window", 
            "title": "origin"
        }, 
        {
            "location": "/layouts/slideout/#variant", 
            "text": "Variant determines any extra content that may be used by the module.  \n   \n     \n       variant  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     1 \n     default  text-only-module \n   \n   \n     2 \n     module includes an image \n   \n   \n     3 \n     module includes a  content recommendation  (this feature is in  beta )", 
            "title": "variant"
        }, 
        {
            "location": "/layouts/slideout/#image", 
            "text": "Define the featured image you would like to use for the module.  Note:  This setting is only valid for modules with a variant value of 2.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     image \n     string \n     URL of the image to feature", 
            "title": "image"
        }, 
        {
            "location": "/layouts/bar/", 
            "text": "A bar is a thin module which appears at the top or bottom of the browser window.\n\n\nNote:\n the bar module does not support the \nheadline\n config property.\n\n\nposition\n\n\nPositition of the bar module relative to the browser window.\n\n\n\n  \n\n    \n\n      \nposition\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntop\n\n    \ndefault\n module is absolutely positioned to the top of the window\n\n  \n\n  \n\n    \ntop-fixed\n\n    \nmodule sticks to the top of the window when scrolling\n\n  \n\n  \n\n    \nbottom-fixed\n\n    \nmodule sticks to the bottom of the window when scrolling\n\n  \n\n\n\n\n\nPositions - \nLive Preview\n\n\n\n\n\n\n\n\nvariant\n\n\nVariant determines any extra content that may be used by the module.\n\n\n\n  \n\n    \n\n      \nvariant\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n1\n\n    \ndefault\n text-only-module\n\n  \n\n  \n\n    \n2\n\n    \nmodule includes an image\n\n  \n\n\n\n\n\nimage\n\n\nDefine the featured image you would like to use for the module.\n\n\nNote:\n This setting is only valid for modules with a variant value of 2.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nimage\n\n    \nstring\n\n    \nURL of the image to feature\n\n  \n\n\n\n\n\nImage (variant 2) - \nLive Preview\n\n\n\n\n\n\n\n\npushDown\n\n\nFor \ntop\n or \ntop-fixed\n positioned bars, we can select an element to push down (add a top margin) so it doesn't get covered by the module. This is especially helpful for a top-aligned site navigation.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \npushDown\n\n    \nstring\n\n    \nselector of the element that should move down with the bar\n\n  \n\n  \n\n\n\n\n\nLive Preview", 
            "title": "Bar"
        }, 
        {
            "location": "/layouts/bar/#position", 
            "text": "Positition of the bar module relative to the browser window.  \n   \n     \n       position  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     top \n     default  module is absolutely positioned to the top of the window \n   \n   \n     top-fixed \n     module sticks to the top of the window when scrolling \n   \n   \n     bottom-fixed \n     module sticks to the bottom of the window when scrolling", 
            "title": "position"
        }, 
        {
            "location": "/layouts/bar/#variant", 
            "text": "Variant determines any extra content that may be used by the module.  \n   \n     \n       variant  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     1 \n     default  text-only-module \n   \n   \n     2 \n     module includes an image", 
            "title": "variant"
        }, 
        {
            "location": "/layouts/bar/#image", 
            "text": "Define the featured image you would like to use for the module.  Note:  This setting is only valid for modules with a variant value of 2.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     image \n     string \n     URL of the image to feature", 
            "title": "image"
        }, 
        {
            "location": "/layouts/bar/#pushdown", 
            "text": "For  top  or  top-fixed  positioned bars, we can select an element to push down (add a top margin) so it doesn't get covered by the module. This is especially helpful for a top-aligned site navigation.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     pushDown \n     string \n     selector of the element that should move down with the bar", 
            "title": "pushDown"
        }, 
        {
            "location": "/layouts/button/", 
            "text": "A button is a small module which only allows for a short piece of text, and a single click action. Because of their limited size and capabilities, button modules are best used for short messages, such as calling out a new site feature, or directing a user to a new piece of content.\n\n\nposition\n\n\nPositition of the button module relative to the browser window.\n\n\n\n  \n\n    \n\n      \nposition\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntop-left\n\n    \ndefault\n display the module in the top left corner of the window\n\n  \n\n  \n\n    \ntop-right\n\n    \ndisplay the module in the top right corner of the window\n\n  \n\n  \n\n    \nleft\n\n    \ndisplay the module so that it sticks to the left side of the window\n\n  \n\n  \n\n    \nright\n\n    \ndisplay the module so that it sticks to the right side of the window\n\n  \n\n  \n\n    \nbottom-right\n\n    \ndisplay the module in the bottom right corner of the window\n\n  \n\n  \n\n    \nbottom-left\n\n    \ndisplay the module in the bottom left corner of the window\n\n  \n\n\n\n\n\nPositions - \nLive Preview", 
            "title": "Button"
        }, 
        {
            "location": "/layouts/button/#position", 
            "text": "Positition of the button module relative to the browser window.  \n   \n     \n       position  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     top-left \n     default  display the module in the top left corner of the window \n   \n   \n     top-right \n     display the module in the top right corner of the window \n   \n   \n     left \n     display the module so that it sticks to the left side of the window \n   \n   \n     right \n     display the module so that it sticks to the right side of the window \n   \n   \n     bottom-right \n     display the module in the bottom right corner of the window \n   \n   \n     bottom-left \n     display the module in the bottom left corner of the window", 
            "title": "position"
        }, 
        {
            "location": "/customization/buttons/", 
            "text": "Pathfora modules can have up to two action buttons \"confirm\" and \"cancel\". You can set custom text for these buttons as well as select to hide one or both of them. See the \ncallbacks\n section for how to add javascript callbacks on these buttons.\n\n\nokShow\n\n\nShow or hide the \"Confirm\" button.\n\n\n\n  \n\n    \n\n      \nokShow\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntrue\n\n    \ndefault\n module has confirm button\n\n  \n\n  \n\n    \nfalse\n\n    \nmodule does not have confirm button\n\n  \n\n\n\n\n\ncancelShow\n\n\nShow or hide the \"Cancel\" button.\n\n\n\n  \n\n    \n\n      \ncancelShow\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntrue\n\n    \ndefault\n module has cancel button\n\n  \n\n  \n\n    \nfalse\n\n    \nmodule does not have cancel button\n\n  \n\n\n\n\n\nHide Cancel Button - \nLive Preview\n\n\n\n\n\n\n\n\nokMessage\n\n\nSet the text for the \"Confirm\" button.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nconfirmMessage\n\n    \nstring\n\n    \nset custom text for the module's confirm button\n\n  \n\n\n\n\n\ncancelMessage\n\n\nSet the text for the \"Cancel\" button.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ncancelMessage\n\n    \nstring\n\n    \nset custom text for the module's cancel button\n\n  \n\n\n\n\n\nCustom Button Text - \nLive Preview", 
            "title": "Action Buttons"
        }, 
        {
            "location": "/customization/buttons/#okshow", 
            "text": "Show or hide the \"Confirm\" button.  \n   \n     \n       okShow  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     true \n     default  module has confirm button \n   \n   \n     false \n     module does not have confirm button", 
            "title": "okShow"
        }, 
        {
            "location": "/customization/buttons/#cancelshow", 
            "text": "Show or hide the \"Cancel\" button.  \n   \n     \n       cancelShow  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     true \n     default  module has cancel button \n   \n   \n     false \n     module does not have cancel button", 
            "title": "cancelShow"
        }, 
        {
            "location": "/customization/buttons/#okmessage", 
            "text": "Set the text for the \"Confirm\" button.  \n   \n     \n       Key \n       Value \n       Behavior \n     \n   \n\n   \n     confirmMessage \n     string \n     set custom text for the module's confirm button", 
            "title": "okMessage"
        }, 
        {
            "location": "/customization/buttons/#cancelmessage", 
            "text": "Set the text for the \"Cancel\" button.  \n   \n     \n       Key \n       Value \n       Behavior \n     \n   \n\n   \n     cancelMessage \n     string \n     set custom text for the module's cancel button", 
            "title": "cancelMessage"
        }, 
        {
            "location": "/customization/themes/", 
            "text": "Pathfora has two basic built-in color themes: light (default if no theme is set) and dark. Furthermore, the user can set their own custom colors for any element of the module within the javascript configuration. For more advanced color and style customization you can \nadd your own CSS\n.\n\n\ntheme\n\n\nSet the color scheme of the module. This can be a predefined theme or indicate that the module should have custom colors.\n\n\n\n  \n\n    \n\n      \ntheme\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nlight\n\n    \ndefault\n default light color scheme\n\n  \n\n  \n\n    \ndark\n\n    \na predefined darker color scheme\n\n  \n\n  \n\n    \ncustom\n\n    \nthe user should define custom colors using \ncolors\n\n  \n\n\n\n\n\nDark Theme - \nLive Preview\n\n\n\n\n\n\n\n\ncolors\n\n\nDefine a set of custom colors for each element of the module.\n\n\n\n  \n\n    \n\n      \ncolors\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nbackground\n\n    \nstring\n\n    \noptional\n hex color code for the background of the module\n\n  \n\n  \n\n    \ntext\n\n    \nstring\n\n    \noptional\n hex color code for the msg text\n\n  \n\n  \n\n    \nheadline\n\n    \nstring\n\n    \noptional\n hex color code for the headline text\n\n  \n\n  \n\n    \nclose\n\n    \nstring\n\n    \noptional\n hex color code for close button (\"X\" in the corner)\n\n  \n\n  \n\n    \nactionBackground\n\n    \nstring\n\n    \noptional\n hex color code for the background of the \"confirm\" button\n\n  \n\n  \n\n    \nactionText\n\n    \nstring\n\n    \noptional\n hex color code for the text of the \"confirm\" button\n\n  \n\n  \n\n    \ncancelBackground\n\n    \nstring\n\n    \noptional\n hex color code for the background of the \"cancel\" button\n\n  \n\n  \n\n    \ncancelText\n\n    \nstring\n\n    \noptional\n hex color code for the text of the \"cancel\" button\n\n  \n\n  \n\n    \nfieldBackground\n\n    \nstring\n\n    \noptional\n hex color code for the background of field elements\n\n  \n\n\n\n\n\nCustom Theme - \nLive Preview", 
            "title": "Color Themes"
        }, 
        {
            "location": "/customization/themes/#theme", 
            "text": "Set the color scheme of the module. This can be a predefined theme or indicate that the module should have custom colors.  \n   \n     \n       theme  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     light \n     default  default light color scheme \n   \n   \n     dark \n     a predefined darker color scheme \n   \n   \n     custom \n     the user should define custom colors using  colors", 
            "title": "theme"
        }, 
        {
            "location": "/customization/themes/#colors", 
            "text": "Define a set of custom colors for each element of the module.  \n   \n     \n       colors  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     background \n     string \n     optional  hex color code for the background of the module \n   \n   \n     text \n     string \n     optional  hex color code for the msg text \n   \n   \n     headline \n     string \n     optional  hex color code for the headline text \n   \n   \n     close \n     string \n     optional  hex color code for close button (\"X\" in the corner) \n   \n   \n     actionBackground \n     string \n     optional  hex color code for the background of the \"confirm\" button \n   \n   \n     actionText \n     string \n     optional  hex color code for the text of the \"confirm\" button \n   \n   \n     cancelBackground \n     string \n     optional  hex color code for the background of the \"cancel\" button \n   \n   \n     cancelText \n     string \n     optional  hex color code for the text of the \"cancel\" button \n   \n   \n     fieldBackground \n     string \n     optional  hex color code for the background of field elements", 
            "title": "colors"
        }, 
        {
            "location": "/customization/css/", 
            "text": "Pathfora is built to be entirely customizable for developers. With the javascript config alone you can \nchange the colors\n of any element of the module. But, to make your module fully fit the look and feel of your site you can add custom CSS.\n\n\nKey Class Names\n\n\nThe outer most \ndiv\n of all Pathfora modules have the \npf-widget\n class. For most modules this will be the containing div surrounding the content, but for \nmodal\n and \ngate\n modules this div will contain the full-screen overlay behind the module. \npf-widget\n has a number of useful subclasses to help select modules by their settings from the javascript config.\n\n\nSubclasses of \npf-widget\n:\n\n\n\n\n\n\n\n\nClass Name\n\n\nUse\n\n\n\n\n\n\n\n\n\n\npf-[type]\n\n\nselect modules by type\n\n\n\n\n\n\npf-widget-[layout]\n\n\nselect modules by layout\n\n\n\n\n\n\npf-position-[position]\n\n\nselect modules by position\n\n\n\n\n\n\npf-widget-variant-[variant]\n\n\nselect modules by variant\n\n\n\n\n\n\nopened\n\n\nadded once the module becomes visiable to the user, can be used for changing the transition animation\n\n\n\n\n\n\n\n\nWithin the \npf-widget\n div most key elements are assigned class names. Form components are nested in a \nform\n element and should be selected and styled by element type.\n\n\nKey Classes:\n\n\n\n\n\n\n\n\nClass Name\n\n\nElement\n\n\n\n\n\n\n\n\n\n\npf-widget-content\n\n\nsecond container div inside \npf-widget\n (for modal and gate layouts this will the the box surrounding the actual module content)\n\n\n\n\n\n\npf-widget-headline\n\n\nh2\n headline text\n\n\n\n\n\n\npf-widget-message\n\n\np\n containing widget message text\n\n\n\n\n\n\npf-widget-close\n\n\n\"x\" icon to close the modal\n\n\n\n\n\n\npf-widget-btn\n\n\ngeneral class for all buttons\n\n\n\n\n\n\npf-widget-ok\n\n\n\"Confirm\" button\n\n\n\n\n\n\npf-widget-cancel\n\n\n\"Cancel\" button\n\n\n\n\n\n\npf-widget-img\n\n\nimage element for modules of \nvariant 2\n\n\n\n\n\n\npf-social-login\n\n\ndiv containing social login buttons for modules with \nshowSocialLogin\n enabled\n\n\n\n\n\n\n\n\nTo see these classes in action, you can view the html \ntemplates\n that will be rendered on your website. This is the html that gets minified, and added to a div with the class \npf-widget\n. That div then gets added to the DOM of your website.\n\n\nCustom Class Name\n\n\nAll modules use the \npf-widget\n class and thus any styles applied to this class and sub-elements will effect all modules used on the page. If you want to select and style a single module without using its \nid\n as a selector, you can add a custom class name to the \npf-widget\n div in your javascript config.\n\n\nvar module = new pathfora.Subscription({\n  id: 'form-css',\n  className: 'sign-up-newsletter',\n  layout: 'modal',\n  headline: 'Sign Up!',\n  msg: 'Submit this form to get updates'\n});\n\npathfora.initializeWidgets([module]);\n\n\n\n\nExample\n\n\nLive Preview\n\n\n\n\n\nJavascript\n\n\n\n\n\nCSS\n\n\n\n\n\nSASS/LESS\n\n\n.pf-widget {\n  \n.pf-twitter-module {\n    background-color: #4a4a4a;\n    color: #fff;\n    border-radius: 0px;\n    box-shadow: none;\n    font-family: Roboto, Arial, 'sans-serif';\n\n    /* message paragraph */\n    .pf-widget-message {\n      font-size: 15px;\n      line-height: 1.7;\n    }\n\n    /* headline */\n    .pf-widget-headline {\n      font-size: 28px;\n    }\n\n    .pf-widget-close, .pf-widget-headline {\n      color: #39aec0;\n    }\n\n    /* buttons */\n    .pf-widget-btn {\n      border-radius: 0px;\n      padding: 1px 25px;\n    }\n\n    /* confirm button */\n    .pf-widget-btn.pf-widget-ok {\n      background-color: #1b91a7;\n      color: #fff;\n      box-shadow: none;\n    }\n\n    /* cancel button */\n    .pf-widget-btn.pf-widget-cancel {\n      background: transparent;\n      color: #fff;\n      border: 1px solid #6a6a6a;\n    }\n\n    /* img */\n    .pf-widget-img {\n      border-radius: 0px;\n    }\n  }\n}", 
            "title": "Custom CSS"
        }, 
        {
            "location": "/customization/css/#key-class-names", 
            "text": "The outer most  div  of all Pathfora modules have the  pf-widget  class. For most modules this will be the containing div surrounding the content, but for  modal  and  gate  modules this div will contain the full-screen overlay behind the module.  pf-widget  has a number of useful subclasses to help select modules by their settings from the javascript config.  Subclasses of  pf-widget :     Class Name  Use      pf-[type]  select modules by type    pf-widget-[layout]  select modules by layout    pf-position-[position]  select modules by position    pf-widget-variant-[variant]  select modules by variant    opened  added once the module becomes visiable to the user, can be used for changing the transition animation     Within the  pf-widget  div most key elements are assigned class names. Form components are nested in a  form  element and should be selected and styled by element type.  Key Classes:     Class Name  Element      pf-widget-content  second container div inside  pf-widget  (for modal and gate layouts this will the the box surrounding the actual module content)    pf-widget-headline  h2  headline text    pf-widget-message  p  containing widget message text    pf-widget-close  \"x\" icon to close the modal    pf-widget-btn  general class for all buttons    pf-widget-ok  \"Confirm\" button    pf-widget-cancel  \"Cancel\" button    pf-widget-img  image element for modules of  variant 2    pf-social-login  div containing social login buttons for modules with  showSocialLogin  enabled     To see these classes in action, you can view the html  templates  that will be rendered on your website. This is the html that gets minified, and added to a div with the class  pf-widget . That div then gets added to the DOM of your website.", 
            "title": "Key Class Names"
        }, 
        {
            "location": "/customization/css/#custom-class-name", 
            "text": "All modules use the  pf-widget  class and thus any styles applied to this class and sub-elements will effect all modules used on the page. If you want to select and style a single module without using its  id  as a selector, you can add a custom class name to the  pf-widget  div in your javascript config.  var module = new pathfora.Subscription({\n  id: 'form-css',\n  className: 'sign-up-newsletter',\n  layout: 'modal',\n  headline: 'Sign Up!',\n  msg: 'Submit this form to get updates'\n});\n\npathfora.initializeWidgets([module]);", 
            "title": "Custom Class Name"
        }, 
        {
            "location": "/customization/css/#example", 
            "text": "", 
            "title": "Example"
        }, 
        {
            "location": "/customization/css/#javascript", 
            "text": "", 
            "title": "Javascript"
        }, 
        {
            "location": "/customization/css/#css", 
            "text": "", 
            "title": "CSS"
        }, 
        {
            "location": "/customization/css/#sassless", 
            "text": ".pf-widget {\n   .pf-twitter-module {\n    background-color: #4a4a4a;\n    color: #fff;\n    border-radius: 0px;\n    box-shadow: none;\n    font-family: Roboto, Arial, 'sans-serif';\n\n    /* message paragraph */\n    .pf-widget-message {\n      font-size: 15px;\n      line-height: 1.7;\n    }\n\n    /* headline */\n    .pf-widget-headline {\n      font-size: 28px;\n    }\n\n    .pf-widget-close, .pf-widget-headline {\n      color: #39aec0;\n    }\n\n    /* buttons */\n    .pf-widget-btn {\n      border-radius: 0px;\n      padding: 1px 25px;\n    }\n\n    /* confirm button */\n    .pf-widget-btn.pf-widget-ok {\n      background-color: #1b91a7;\n      color: #fff;\n      box-shadow: none;\n    }\n\n    /* cancel button */\n    .pf-widget-btn.pf-widget-cancel {\n      background: transparent;\n      color: #fff;\n      border: 1px solid #6a6a6a;\n    }\n\n    /* img */\n    .pf-widget-img {\n      border-radius: 0px;\n    }\n  }\n}", 
            "title": "SASS/LESS"
        }, 
        {
            "location": "/customization/form/", 
            "text": "Pathfora allows for some customization on form elements including hiding specific input fields, setting placeholder text, and selecting which fields are required for the user to submit the form.\n\n\nfields\n\n\nSelect which fields should be a part of the module's form. By default, a \nform\n module has the name, email, title, and message fields. And a \ngate\n module has the name, email, company, and title fields. \n\n\n\n  \n\n    \n\n      \nfields\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nname\n\n    \nboolean\n\n    \noptional\n show or hide input for the user's full name\n\n  \n\n  \n\n    \nemail\n\n    \nboolean\n\n    \noptional\n show or hide input for the user's email address\n\n  \n\n  \n\n    \ntitle\n\n    \nboolean\n\n    \noptional\n show or hide input for the user's job title\n\n  \n\n  \n\n    \ncompany\n\n    \nboolean\n\n    \noptional\n show or hide input for the user's company of employment\n\n  \n\n  \n\n    \nphone\n\n    \nboolean\n\n    \noptional\n show or hide input for the user's phone number\n\n  \n\n  \n\n    \nmessage\n\n    \nboolean\n\n    \noptional\n show or hide texarea field for comments or a longer form message\n\n  \n\n\n\n\n\nShow/Hide Fields - \nLive Preview\n\n\n\n\n\n\n\n\nrequired\n\n\nSet which fields are required to be filled out by the user to submit the form. By default only name and email fields are required for all modules with forms.\n\n\n\n  \n\n    \n\n      \nrequired\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nname\n\n    \nboolean\n\n    \noptional\n set the required status for the name field\n\n  \n\n  \n\n    \nemail\n\n    \nboolean\n\n    \noptional\n set the required status for the email address field\n\n  \n\n  \n\n    \ntitle\n\n    \nboolean\n\n    \noptional\n set the required status for the job title field\n\n  \n\n  \n\n    \ncompany\n\n    \nboolean\n\n    \noptional\n set the required status for the company of employment field\n\n  \n\n  \n\n    \nphone\n\n    \nboolean\n\n    \noptional\n set the required status for the phone number field\n\n  \n\n  \n\n    \nmessage\n\n    \nboolean\n\n    \noptional\n set the required status for the long form message field\n\n  \n\n\n\n\n\nRequired Fields - \nLive Preview\n\n\n\n\n\n\n\n\nplaceholders\n\n\nSet the placeholder text for form elements.\n\n\n\n  \n\n    \n\n      \nplaceholders\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nname\n\n    \nstring\n\n    \noptional\n set the placeholder text for the name field\n\n  \n\n  \n\n    \nemail\n\n    \nstring\n\n    \noptional\n set the placeholder text for the email address field\n\n  \n\n  \n\n    \ntitle\n\n    \nstring\n\n    \noptional\n set the placeholder text for the job title field\n\n  \n\n  \n\n    \ncompany\n\n    \nstring\n\n    \noptional\n set the placeholder text for the company of employment field\n\n  \n\n  \n\n    \nphone\n\n    \nstring\n\n    \noptional\n set the placeholder text for the phone number field\n\n  \n\n  \n\n    \nmessage\n\n    \nstring\n\n    \noptional\n set the placeholder text for the long form message field\n\n  \n\n\n\n\n\nPlaceholders - \nLive Preview", 
            "title": "Form Elements"
        }, 
        {
            "location": "/customization/form/#fields", 
            "text": "Select which fields should be a part of the module's form. By default, a  form  module has the name, email, title, and message fields. And a  gate  module has the name, email, company, and title fields.   \n   \n     \n       fields  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     name \n     boolean \n     optional  show or hide input for the user's full name \n   \n   \n     email \n     boolean \n     optional  show or hide input for the user's email address \n   \n   \n     title \n     boolean \n     optional  show or hide input for the user's job title \n   \n   \n     company \n     boolean \n     optional  show or hide input for the user's company of employment \n   \n   \n     phone \n     boolean \n     optional  show or hide input for the user's phone number \n   \n   \n     message \n     boolean \n     optional  show or hide texarea field for comments or a longer form message", 
            "title": "fields"
        }, 
        {
            "location": "/customization/form/#required", 
            "text": "Set which fields are required to be filled out by the user to submit the form. By default only name and email fields are required for all modules with forms.  \n   \n     \n       required  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     name \n     boolean \n     optional  set the required status for the name field \n   \n   \n     email \n     boolean \n     optional  set the required status for the email address field \n   \n   \n     title \n     boolean \n     optional  set the required status for the job title field \n   \n   \n     company \n     boolean \n     optional  set the required status for the company of employment field \n   \n   \n     phone \n     boolean \n     optional  set the required status for the phone number field \n   \n   \n     message \n     boolean \n     optional  set the required status for the long form message field", 
            "title": "required"
        }, 
        {
            "location": "/customization/form/#placeholders", 
            "text": "Set the placeholder text for form elements.  \n   \n     \n       placeholders  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     name \n     string \n     optional  set the placeholder text for the name field \n   \n   \n     email \n     string \n     optional  set the placeholder text for the email address field \n   \n   \n     title \n     string \n     optional  set the placeholder text for the job title field \n   \n   \n     company \n     string \n     optional  set the placeholder text for the company of employment field \n   \n   \n     phone \n     string \n     optional  set the placeholder text for the phone number field \n   \n   \n     message \n     string \n     optional  set the placeholder text for the long form message field", 
            "title": "placeholders"
        }, 
        {
            "location": "/customization/responsive/", 
            "text": "By default, all Pathfora modules have a responsive design which will scale for screen size and device. Larger modules such as \ngate\n or \nmodals\n will likely take up the full screen space on a mobile device. Smaller modules such as \nbar\n and \nslideout\n will fit completely within a mobile screen if the content is short enough, and scroll otherwise. The responsive behavior can be turned off if you would not like to show your modules on smaller screen sizes.\n\n\nresponsive\n\n\nTurn on or off responsive styles for windows of certain dimensions.\n\n\n\n  \n\n    \n\n      \nresponsive\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntrue\n\n    \ndefault\n modules will scale for any browser size\n\n  \n\n  \n\n    \nfalse\n\n    \nmodules will be hidden for windows less than 768px in width or less than 640px in height", 
            "title": "Responsive Styles"
        }, 
        {
            "location": "/customization/responsive/#responsive", 
            "text": "Turn on or off responsive styles for windows of certain dimensions.  \n   \n     \n       responsive  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     true \n     default  modules will scale for any browser size \n   \n   \n     false \n     modules will be hidden for windows less than 768px in width or less than 640px in height", 
            "title": "responsive"
        }, 
        {
            "location": "/ab_testing/", 
            "text": "Pathfora supports A/B testing on a global level as well as on a targeted audience. You can split a pool of users to show some proportion of them a group of modules \"A\" and the other portion a group \"B\".\n\n\nvar moduleTest = new pathfora.ABTest({\n  id: 'ab-test-id',\n  type: '50/50',\n  groups: [\n    [moduleA],\n    []\n  ]\n});\n\npathfora.initializeABTesting([moduleTest]);\npathfora.initializeWidgets([moduleA]);\n\n\n\n\nABTest\n\n\nPathfora has a special configuration method for A/B Testing. This configuration is then used as a parameter for \ninitializeABTesting\n.\n\n\n\n  \n\n    \n\n      \nABTest\n settings object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nid\n\n    \nstring\n\n    \nunique identifier for the A/B Test\n\n  \n\n  \n\n    \ntype\n\n    \nstring\n\n    \nthe proportional split between A/B (currently only \n50/50\n, \n80/20\n, and \n100\n is supported)\n\n  \n\n  \n\n    \ngroups\n\n    \narray\n\n    \njagged array defining the A/B groups that each module belongs to\n\n  \n\n\n\n\n\nGlobal\n\n\nFor a global A/B test, some proportion of all users will see module \"A\" while the remaining will see module \"B\". \n\n\nIn the example below roughly half of all users will be shown a gated form (A) and the other half will see a form modal (B).\n\n\nAll Users Form/SiteGate Test - \nLive Preview\n\n\n\n\n\n\nWith Audience Targeting\n\n\nA/B Testing can be combined with \naudience targeting\n to divide an audience into a 50/50 split. \n\n\nIn the example below module \"A\" will be displayed to roughly half of the users in the \nsmt_new\n audience, while the other half of the audience will be shown module \"B\".\n\n\nNew Users Message Test\n\n\nvar moduleA = new pathfora.Message({\n  id: 'message-a',\n  layout: 'slideout',\n  msg: 'Message A'\n});\n\nvar moduleB = new pathfora.Message({\n  id: 'message-b',\n  layout: 'slideout',\n  msg: 'Message B'\n});\n\nvar ab = new pathfora.ABTest({\n  id: 'targeted-ab-test',\n  type: '50/50',\n  groups: [\n    [moduleA],\n    [moduleB]\n  ]\n});\n\nvar widgets = {\n  target: [{\n    segment: 'smt_new',\n    widgets: [moduleA, moduleB]\n  }]\n};\n\npathfora.initializeABTesting([ab]);\npathfora.initializeWidgets(widgets);\n\n\n\n\nTesting\n\n\nTo determine which group a user should be assigned to, Pathfora generates a random value the first time they visit the page. This value gets saved as a cookie \nPathforaTest_[id]\n so that Pathfora knows which group the user is in on return visits. Since anyone visiting a page that contains A/B test modules should only see the modules from one group, there is no immediate visual way for developers to verify that both groups are working as expected. \n\n\nHowever, you can attempt to test that both groups are showing correctly by finding and deleting the cookie named \nPathforaTest_[id]\n and refreshing the page. It may take a couple tries to show the other group since you are randomly assigned to a group each time. Feel free to try this on the \nglobal example above\n.", 
            "title": "A/B Testing"
        }, 
        {
            "location": "/ab_testing/#abtest", 
            "text": "Pathfora has a special configuration method for A/B Testing. This configuration is then used as a parameter for  initializeABTesting .  \n   \n     \n       ABTest  settings object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     id \n     string \n     unique identifier for the A/B Test \n   \n   \n     type \n     string \n     the proportional split between A/B (currently only  50/50 ,  80/20 , and  100  is supported) \n   \n   \n     groups \n     array \n     jagged array defining the A/B groups that each module belongs to", 
            "title": "ABTest"
        }, 
        {
            "location": "/ab_testing/#global", 
            "text": "For a global A/B test, some proportion of all users will see module \"A\" while the remaining will see module \"B\".   In the example below roughly half of all users will be shown a gated form (A) and the other half will see a form modal (B).", 
            "title": "Global"
        }, 
        {
            "location": "/ab_testing/#with-audience-targeting", 
            "text": "A/B Testing can be combined with  audience targeting  to divide an audience into a 50/50 split.   In the example below module \"A\" will be displayed to roughly half of the users in the  smt_new  audience, while the other half of the audience will be shown module \"B\".", 
            "title": "With Audience Targeting"
        }, 
        {
            "location": "/ab_testing/#new-users-message-test", 
            "text": "var moduleA = new pathfora.Message({\n  id: 'message-a',\n  layout: 'slideout',\n  msg: 'Message A'\n});\n\nvar moduleB = new pathfora.Message({\n  id: 'message-b',\n  layout: 'slideout',\n  msg: 'Message B'\n});\n\nvar ab = new pathfora.ABTest({\n  id: 'targeted-ab-test',\n  type: '50/50',\n  groups: [\n    [moduleA],\n    [moduleB]\n  ]\n});\n\nvar widgets = {\n  target: [{\n    segment: 'smt_new',\n    widgets: [moduleA, moduleB]\n  }]\n};\n\npathfora.initializeABTesting([ab]);\npathfora.initializeWidgets(widgets);", 
            "title": "New Users Message Test"
        }, 
        {
            "location": "/ab_testing/#testing", 
            "text": "To determine which group a user should be assigned to, Pathfora generates a random value the first time they visit the page. This value gets saved as a cookie  PathforaTest_[id]  so that Pathfora knows which group the user is in on return visits. Since anyone visiting a page that contains A/B test modules should only see the modules from one group, there is no immediate visual way for developers to verify that both groups are working as expected.   However, you can attempt to test that both groups are showing correctly by finding and deleting the cookie named  PathforaTest_[id]  and refreshing the page. It may take a couple tries to show the other group since you are randomly assigned to a group each time. Feel free to try this on the  global example above .", 
            "title": "Testing"
        }, 
        {
            "location": "/targeting/", 
            "text": "Pathfora gains power by seamlessly integrating with \nLytics\n for real-time user identification. This allows for precise audience targeting with each module. Setting this up in Pathfora requires an object with certain targeting rules as the first parameter to \ninitializeWidgets\n.\n\n\nvar modules = {\n  target: [{\n    segment: 'smt_name',\n    widgets: [module]\n  }]\n};\n\npathfora.initializeWidgets(modules);\n\n\n\n\nFor audience targeting, it is required that you load the \nLytics Javascript Tag\n. Pathfora interacts with this tag to retrieve the a list of Lytics audiences that the user is a member of. If you do not load this tag for targeted modules they will never initialize. \n\n\nSetup Your Audiences\n\n\nYou will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id in the targeting rules.\n\n\n\ntarget\n\n\nA list of rules assigning modules to audiences.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntarget\n\n    \nstring\n\n    \nlist of targeting rule objects\n\n  \n\n  \n\n\n\n\n\n\n  \n\n    \n\n      \nobject in \ntarget\n array\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nsegment\n\n    \nstring\n\n    \nAPI access ID of the Lytics audience\n\n  \n\n  \n\n    \nwidgets\n\n    \narray\n\n    \nlist of modulels to show the users in the audience\n\n  \n\n\n\n\n\nSingle Target Audience - High Value Users\n\n\n// example: show a bar module to all users in the `high_value_users` audience promoting new products\n\nvar module = new pathfora.Message({\n  id: 'targeted_bar',\n  layout: 'bar',\n  msg: 'Thanks for being a valued customer, please check out our new products.',\n  cancelShow: false,\n  okMessage: 'View Now',\n  confirmAction: {\n    name: 'targeted_bar_confirm',\n    callback: function () {\n      window.location.pathname = '/new-products';\n    }\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'high_value_users', // API Access ID for your Lytics audience\n    widgets: [module]\n  }]\n};\n\npathfora.initializeWidgets(modules);\n\n\n\n\nMultiple Target Audiences - New vs. Returning\n\n\n// example: change messaging of module for new vs returning users\n\nvar newModule = new pathfora.Message({\n  id: 'new_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome',\n  msg: 'You must be new here! Please take a look at our guide for new users.',\n  cancelShow: false,\n  okMessage: 'View Guide'\n});\n\nvar returningModule = new pathfora.Message({\n  id: 'returning_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome Back',\n  msg: 'Thanks for coming back, why not check out our blog for the newest updates?',\n  cancelShow: false,\n  okMessage: 'View Blog'\n});\n\nvar modules = {\n  target: [{\n    segment: 'new_users', // API Access ID for your Lytics audience\n    widgets: [newModule]\n  },\n  {\n    segment: 'returning', // API Access ID for your Lytics audience\n    widgets: [returningModule]\n  }]\n};\n\npathfora.initializeWidgets(modules);\n\n\n\n\n\ninverse\n\n\nTarget all users who are not a part of any of the audiences in the defined targeting rules.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ninverse\n\n    \narray\n\n    \nlist of modules to show any user who is not a member of any of the audiences in the targeting rules\n\n  \n\n  \n\n\n\n\n\n// example: show a feedback form module to all users that are known (has email)\n// and a subsciption module to everyone else\n\nvar subscriptionModule = new pathfora.Subscription({\n  id: 'sign_up_module',\n  layout: 'modal',\n  headline: 'Sign Up',\n  msg: 'We want to send you updates, sign up now!'\n});\n\nvar feedbackModule = new pathfora.Message({\n  id: 'known_module',\n  layout: 'modal',\n  headline: 'Give us Feedback',\n  msg: 'What do you think of our newest updates?',\n  fields: {\n    name: false,\n    email: false,\n    title: false,\n    message: true\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'known', // API Access ID for your Lytics audience\n    widgets: [feedbackModule]\n  }],\n  inverse: [subscriptionModule]\n};\n\npathfora.initializeWidgets(modules);", 
            "title": "Audience Targeting"
        }, 
        {
            "location": "/targeting/#setup-your-audiences", 
            "text": "You will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id in the targeting rules.", 
            "title": "Setup Your Audiences"
        }, 
        {
            "location": "/targeting/#target", 
            "text": "A list of rules assigning modules to audiences.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     target \n     string \n     list of targeting rule objects \n   \n     \n   \n     \n       object in  target  array \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     segment \n     string \n     API access ID of the Lytics audience \n   \n   \n     widgets \n     array \n     list of modulels to show the users in the audience", 
            "title": "target"
        }, 
        {
            "location": "/targeting/#single-target-audience-high-value-users", 
            "text": "// example: show a bar module to all users in the `high_value_users` audience promoting new products\n\nvar module = new pathfora.Message({\n  id: 'targeted_bar',\n  layout: 'bar',\n  msg: 'Thanks for being a valued customer, please check out our new products.',\n  cancelShow: false,\n  okMessage: 'View Now',\n  confirmAction: {\n    name: 'targeted_bar_confirm',\n    callback: function () {\n      window.location.pathname = '/new-products';\n    }\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'high_value_users', // API Access ID for your Lytics audience\n    widgets: [module]\n  }]\n};\n\npathfora.initializeWidgets(modules);", 
            "title": "Single Target Audience - High Value Users"
        }, 
        {
            "location": "/targeting/#multiple-target-audiences-new-vs-returning", 
            "text": "// example: change messaging of module for new vs returning users\n\nvar newModule = new pathfora.Message({\n  id: 'new_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome',\n  msg: 'You must be new here! Please take a look at our guide for new users.',\n  cancelShow: false,\n  okMessage: 'View Guide'\n});\n\nvar returningModule = new pathfora.Message({\n  id: 'returning_slideout',\n  layout: 'slideout',\n  position: 'bottom-right',\n  headline: 'Welcome Back',\n  msg: 'Thanks for coming back, why not check out our blog for the newest updates?',\n  cancelShow: false,\n  okMessage: 'View Blog'\n});\n\nvar modules = {\n  target: [{\n    segment: 'new_users', // API Access ID for your Lytics audience\n    widgets: [newModule]\n  },\n  {\n    segment: 'returning', // API Access ID for your Lytics audience\n    widgets: [returningModule]\n  }]\n};\n\npathfora.initializeWidgets(modules);", 
            "title": "Multiple Target Audiences - New vs. Returning"
        }, 
        {
            "location": "/targeting/#inverse", 
            "text": "Target all users who are not a part of any of the audiences in the defined targeting rules.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     inverse \n     array \n     list of modules to show any user who is not a member of any of the audiences in the targeting rules \n   \n     // example: show a feedback form module to all users that are known (has email)\n// and a subsciption module to everyone else\n\nvar subscriptionModule = new pathfora.Subscription({\n  id: 'sign_up_module',\n  layout: 'modal',\n  headline: 'Sign Up',\n  msg: 'We want to send you updates, sign up now!'\n});\n\nvar feedbackModule = new pathfora.Message({\n  id: 'known_module',\n  layout: 'modal',\n  headline: 'Give us Feedback',\n  msg: 'What do you think of our newest updates?',\n  fields: {\n    name: false,\n    email: false,\n    title: false,\n    message: true\n  }\n});\n\nvar modules = {\n  target: [{\n    segment: 'known', // API Access ID for your Lytics audience\n    widgets: [feedbackModule]\n  }],\n  inverse: [subscriptionModule]\n};\n\npathfora.initializeWidgets(modules);", 
            "title": "inverse"
        }, 
        {
            "location": "/callbacks/", 
            "text": "All actions taken for clicking a button, submitting a form, and other such events support optional javascript callback settings.\n\n\nconfirmAction\n\n\nSet a \ntracking name\n and javascript callback for a \"confirm\" button click event.\n\n\n\n  \n\n    \n\n      \nconfirmAction\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nname\n\n    \nstring\n\n    \noptional\n name of the confirm event to send to Lytics and Google Analytics\n\n  \n\n  \n\n    \ncallback\n\n    \nfunction\n\n    \noptional\n function to execute when the use clicks the \"confirm\" button\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\n\ncancelAction\n\n\nSet a \ntracking name\n and javascript callback for a \"cancel\" button click event.\n\n\n\n  \n\n    \n\n      \ncancelAction\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nname\n\n    \nstring\n\n    \noptional\n name of the cancel event to send to Lytics and Google Analytics\n\n  \n\n  \n\n    \ncallback\n\n    \nfunction\n\n    \noptional\n function to execute when the use clicks the \"cancel\" button\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\n\nonInit\n\n\nJavascript callback function on initialization of the module. This should trigger just before the module is shown.\n\n\n\n  \n\n    \n\n      \nonInit\nfunction\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nevent\n\n    \nstring\n\n    \noptional\n name of the event\n\n  \n\n  \n\n    \nmodule\n\n    \nobject\n\n    \noptional\n Pathfora module object\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\n\nonLoad\n\n\nJavascript callback function on loading the module, triggered when the module is shown to the user.\n\n\n\n  \n\n    \n\n      \nonLoad\nfunction\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nevent\n\n    \nstring\n\n    \noptional\n name of the event\n\n  \n\n  \n\n    \npayload\n\n    \nobject\n\n    \noptional\n object containing the Pathfora module and the rendered DOM Element\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\n\nonClick\n\n\nJavascript callback function \nfor \nbutton layouts\n only\n on click of the button widget.\n\n\n\n  \n\n    \n\n      \nonClick\nfunction\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nevent\n\n    \nstring\n\n    \noptional\n name of the event\n\n  \n\n  \n\n    \npayload\n\n    \nobject\n\n    \noptional\n object containing the rendered DOM Element and the javascript MouseEvent\n\n  \n\n\n\n\n\nLive Preview\n\n\n\n\n\n\nonSubmit\n\n\nJavascript callback function \nfor any types with form elements\n on submission of the form (includes form data as param).\n\n\n\n  \n\n    \n\n      \nonSubmit\nfunction\n\n    \n\n    \n\n      \nParameter\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nevent\n\n    \nstring\n\n    \noptional\n name of the event\n\n  \n\n  \n\n    \npayload\n\n    \nobject\n\n    \noptional\n object containing the rendered DOM Element, and the javascript Event, and the data submitted by the user\n\n  \n\n\n\n\n\nLive Preview", 
            "title": "Callbacks"
        }, 
        {
            "location": "/callbacks/#confirmaction", 
            "text": "Set a  tracking name  and javascript callback for a \"confirm\" button click event.  \n   \n     \n       confirmAction  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     name \n     string \n     optional  name of the confirm event to send to Lytics and Google Analytics \n   \n   \n     callback \n     function \n     optional  function to execute when the use clicks the \"confirm\" button", 
            "title": "confirmAction"
        }, 
        {
            "location": "/callbacks/#cancelaction", 
            "text": "Set a  tracking name  and javascript callback for a \"cancel\" button click event.  \n   \n     \n       cancelAction  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     name \n     string \n     optional  name of the cancel event to send to Lytics and Google Analytics \n   \n   \n     callback \n     function \n     optional  function to execute when the use clicks the \"cancel\" button", 
            "title": "cancelAction"
        }, 
        {
            "location": "/callbacks/#oninit", 
            "text": "Javascript callback function on initialization of the module. This should trigger just before the module is shown.  \n   \n     \n       onInit function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     event \n     string \n     optional  name of the event \n   \n   \n     module \n     object \n     optional  Pathfora module object", 
            "title": "onInit"
        }, 
        {
            "location": "/callbacks/#onload", 
            "text": "Javascript callback function on loading the module, triggered when the module is shown to the user.  \n   \n     \n       onLoad function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     event \n     string \n     optional  name of the event \n   \n   \n     payload \n     object \n     optional  object containing the Pathfora module and the rendered DOM Element", 
            "title": "onLoad"
        }, 
        {
            "location": "/callbacks/#onclick", 
            "text": "Javascript callback function  for  button layouts  only  on click of the button widget.  \n   \n     \n       onClick function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     event \n     string \n     optional  name of the event \n   \n   \n     payload \n     object \n     optional  object containing the rendered DOM Element and the javascript MouseEvent", 
            "title": "onClick"
        }, 
        {
            "location": "/callbacks/#onsubmit", 
            "text": "Javascript callback function  for any types with form elements  on submission of the form (includes form data as param).  \n   \n     \n       onSubmit function \n     \n     \n       Parameter \n       Type \n       Behavior \n     \n   \n\n   \n     event \n     string \n     optional  name of the event \n   \n   \n     payload \n     object \n     optional  object containing the rendered DOM Element, and the javascript Event, and the data submitted by the user", 
            "title": "onSubmit"
        }, 
        {
            "location": "/content_recommend/", 
            "text": "Lytics content recommendations are now supported as a \nbeta\n feature in Pathfora. Instead of hand selecting content to show an audience, you can can create a module that will suggest content at a individual level, based on the viewer's content affinities in Lytics. If you would like to try out this feature \nplease\n contact your customer success representative \nsuccess@lytics.io\n to help set this up.\n\n\nNote\n: only \nMessage\n modules using a \nslideout\n or \nmodal\n layout and a \nvariant\n of \n3\n support content recommendations.\n\n\nrecommend\n\n\nRecommend controls any parameters necessary for making a content suggestions to a user using the Lytics content recommendation API.\n\n\n\n  \n\n    \n\n      \nrecommend\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nql\n\n    \nstring\n\n    \nformatted query to filter based on url, topic or other content variables*\n\n  \n\n\n\n\n\n*Contact your customer success representative \nsuccess@lytics.io\n for assistance in writing a filter to recommend based on url matching, topic relevance, and/or meta attributes.\n\n\ncontent\n\n\nContent acts as a backfill/helper for the \nrecommend key\n. If the content recommendation API cannot return a recommendation for the user (if they don't have any content affinity data or an error occurs), a default document may be provided.\n\n\n\n  \n\n    \n\n      \nobject in \ncontent\n array\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nurl\n\n    \nstring\n\n    \nurl of the default document to recommend to the user\n\n  \n\n  \n\n    \ntitle\n\n    \nstring\n\n    \nmeta title of the default document\n\n  \n\n  \n\n    \ndescription\n\n    \nstring\n\n    \nmeta description of the default document\n\n  \n\n  \n\n    \nimage\n\n    \nstring\n\n    \nurl of the meta image of the default document\n\n  \n\n  \n\n    \ndefault\n\n    \nboolean\n\n    \nrequired\n true if the content provided is to be used should the recommendation fail\n\n  \n\n\n\n\n\nNote:\n The examples below will show the default content since the account used does not have content affinity set up.\n\n\nContent Recommendation Modal - \nLive Preview\n\n\n\n\n\n\n\n\nContent Recommendation Slideout - \nLive Preview", 
            "title": "Content Recommendations"
        }, 
        {
            "location": "/content_recommend/#recommend", 
            "text": "Recommend controls any parameters necessary for making a content suggestions to a user using the Lytics content recommendation API.  \n   \n     \n       recommend  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     ql \n     string \n     formatted query to filter based on url, topic or other content variables* \n     *Contact your customer success representative  success@lytics.io  for assistance in writing a filter to recommend based on url matching, topic relevance, and/or meta attributes.", 
            "title": "recommend"
        }, 
        {
            "location": "/content_recommend/#content", 
            "text": "Content acts as a backfill/helper for the  recommend key . If the content recommendation API cannot return a recommendation for the user (if they don't have any content affinity data or an error occurs), a default document may be provided.  \n   \n     \n       object in  content  array \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     url \n     string \n     url of the default document to recommend to the user \n   \n   \n     title \n     string \n     meta title of the default document \n   \n   \n     description \n     string \n     meta description of the default document \n   \n   \n     image \n     string \n     url of the meta image of the default document \n   \n   \n     default \n     boolean \n     required  true if the content provided is to be used should the recommendation fail \n     Note:  The examples below will show the default content since the account used does not have content affinity set up.", 
            "title": "content"
        }, 
        {
            "location": "/display_conditions/", 
            "text": "The \ndisplayConditions\n key controls how, when, and for how long any single module is displayed/hidden. All options can be combined with one another for maximum control. Each module requires its own set of \ndisplayConditions\n. By default all modules will leverage \nshowOnInit\n. Once other display conditions are set, they will override this default.\n\n\nvar module = new pathfora.Message({\n  displayConditions: {\n    showDelay: 10,\n    impressions: {\n      session: 2\n    }\n  }\n});\n\npathfora.initializeWidgets([module]);\n\n\n\n\nSome display conditions may require that cookies be enabled to work properly.\n\n\nshowOnInit\n\n\nDetermines if the rendered module is displayed as soon as it is initialized or waits for another event.\n\n\n\n  \n\n    \n\n      \nshowOnInit\n boolean\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ntrue\n\n    \ndefault\n module will be displayed as soon as it has been loaded\n\n  \n\n  \n\n    \nfalse\n\n    \nmodule will be added to DOM but not displayed until another trigger instructs it to\n\n  \n\n\n\n\n\n// example: loads immediately after initializing the module\n\ndisplayConditions: {\n  showOnInit: true\n}\n\n\n\n\nshowDelay\n\n\nAdds a delay, in seconds, that must be completed before module is loaded.\n\n\n\n  \n\n    \n\n      \nshowDelay\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n0\n\n    \ndefault\n using 0 disables the showDelay property and will show immediately\n\n  \n\n  \n\n    \n0 \u2013 \u221e\n\n    \nmodule will be displayed after waiting x seconds after initialization\n\n  \n\n\n\n\n\n// example: loads after a 10 second delay\n\ndisplayConditions: {\n  showDelay: 10\n}\n\n\n\n\nhideAfter\n\n\nAdds a countdown, in seconds, that must hides module on expiration.\n\n\n\n  \n\n    \n\n      \nhideAfter\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n0\n\n    \ndefault\n using 0 disables the showDelay property and will not be hidden\n\n  \n\n  \n\n    \n0 \u2013 \u221e\n\n    \nmodule will hidden from screen after x seconds have passed\n\n  \n\n\n\n\n\n// example: hide module after 10 seconds\n\ndisplayConditions: {\n  hideAfter: 10\n}\n\n\n\n\ndisplayWhenElementVisible\n\n\nTriggers the module when a specific DOM element enters the viewport.\n\n\n\n  \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \ndisplayWhenElementVisible\n\n    \nstring\n\n    \nselector for the element which when visible will trigger the module\n\n  \n\n\n\n\n\n// example: show module when the .footer is visible\n\ndisplayConditions: {\n  displayWhenElementVisible: '.footer'\n}\n\n\n\n\nscrollPercentageToDisplay\n\n\nTriggers the modal after a percentage of the page scroll has been performed.\n\n\n\n  \n\n    \n\n      \nscrollPercentageToDisplay\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n0\n\n    \ndefault\n using 0 disables the property and will show immediately\n\n  \n\n  \n\n    \n0 \u2013 100\n\n    \nmodule will hidden until x percent of total scroll has been performed\n\n  \n\n\n\n\n\n// example: show module when the 50 percent of the page scroll has been completed\n\ndisplayConditions: {\n  scrollPercentageToDisplay: 50\n}\n\n\n\n\npageVisits\n\n\nTriggers the module when the user visits the page a certain amount of times. The total number of page visits is saved in cookie \nPathforaPageView\n to compare against this value.\n\n\n\n  \n\n    \n\n      \npageVisits\n int\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \n0\n\n    \ndefault\n using 0 disables the property and will show on all visits\n\n  \n\n  \n\n    \n0 \u2013 \u221e\n\n    \nmodule will show only when the user has visited more than x times\n\n  \n\n\n\n\n\n// example: show module after they have visited at least 3 times\n\ndisplayConditions: {\n  pageVisits: 3\n}\n\n\n\n\ndate\n\n\nDisplay the module in a specified interval of time.\n\n\n\n  \n\n    \n\n      \ndate\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nstart_at\n\n    \nstring\n\n    \noptional\n valid ISO 8601 formatted date for date to start showing module\n\n  \n\n  \n\n    \nend_at\n\n    \nstring\n\n    \noptional\n valid ISO 8601 formatted date for date to stop showing module\n\n  \n\n\n\n\n\n// example: show module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at: '2017-02-12T11:00:00.000Z'\n  }\n}\n\n\n\n\n// example: hide module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    end_at: '2017-02-12T11:00:00.000Z'\n  }\n}\n\n\n\n\n// example: show module between February 12, 2017 and March 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at: '2017-02-12T11:00:00.000Z',\n    end_at: '2017-03-12T11:00:00.000Z'\n  }\n}\n\n\n\n\nimpressions\n\n\nHide the module after a certain number of impressions. The current number of impressions is saved in a cookie \nPathforaImpressions_[module id]\n to compare against this value.\n\n\n\n  \n\n    \n\n      \nimpressions\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nsession\n\n    \nint\n\n    \noptional\n count of how many session-based impressions before showing the module\n\n  \n\n  \n\n    \ntotal\n\n    \nint\n\n    \noptional\n count of how many total (multisession) impressions before showing the module\n\n  \n\n\n\n\n\n// example: hide module after the second impressions in the same session\n\ndisplayConditions: {\n  impressions: {\n    session: 2\n  }\n}\n\n\n\n\n// example: hide module after five total impressions\n\ndisplayConditions: {\n  impressions: {\n    total: 5\n  }\n}\n\n\n\n\n// example: hide the module after the second impression in the same session\n// or if it has been seen five times ever\n\ndisplayConditions: {\n  impressions: {\n    session: 2,\n    total: 5\n  }\n}\n\n\n\n\nhideAfterAction\n\n\nHide the module after a particular action has been taken (\nclosed\n, \ncancel\n, or \nconfirm\n). The current number of impressions is saved in a cookie \nPathfora[action]_[module id]\n to compare against this value.\n\n\n\n  \n\n    \n\n      \nhideAfterAction\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nclosed\n\n    \nobject\n\n    \noptional\n settings for hiding the module based on the close action\n\n  \n\n  \n\n    \ncancel\n\n    \nobject\n\n    \noptional\n settings for hiding the module based on the cancel button click action\n\n  \n\n  \n\n    \nconfirm\n\n    \nobject\n\n    \noptional\n settings for hiding the module based on the confirm button action\n\n  \n\n\n\n\n\n\n  \n\n    \n\n      \nclosed\n / \nconfirm\n / \ncancel\n object\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nhideCount\n\n    \nint\n\n    \noptional\n count of times module has been closed manually by user before hiding the module\n\n  \n\n  \n\n    \nduration\n\n    \nint\n\n    \noptional\n how long the module should be hidden in seconds\n\n  \n\n\n\n\n\n// example: hide module for 6 minutes after 5th close\n\ndisplayConditions: {\n  hideAfterAction: {\n    closed: {\n      hideCount: 5,\n      duration: 60 * 6\n    }\n  }\n}\n\n\n\n\n// example: hide module permanently after confirmation has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    confirm: {\n      hideCount: 1\n    }\n  }\n}\n\n\n\n\n// example: hide module for 1 week after cancel has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 60 * 60 * 24 * 7\n    }\n  }\n}\n\n\n\n\n// example: all of the above\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 60 * 60 * 24 * 7\n    },\n    confirm: {\n      hideCount: 1\n    },\n    closed: {\n      hideCount: 5,\n      duration: 60 * 6\n    }\n  }\n}\n\n\n\n\nurlContains\n\n\nOnly display the module on pages that match the url conditions defined.\n\n\n\n  \n\n    \n\n      \nobject in \nurlContains\n array\n\n    \n\n    \n\n      \nKey\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nmatch\n\n    \nstring\n\n    \noptional\n name of the matching rule (see below)\n\n  \n\n  \n\n    \nvalue\n\n    \nstring\n\n    \nvalue to match the current page url against\n\n  \n\n\n\n\n\n\n  \n\n    \n\n      \nmatch\n string\n\n    \n\n    \n\n      \nValue\n\n      \nType\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nsimple\n\n    \nstring\n\n    \ndefault\n fuzzy match that removes the URL protocol and query string before matching\n\n  \n\n  \n\n    \nexact\n\n    \nstring\n\n    \nthe url must match what is typed exactly: protocol, query params, etc.\n\n  \n\n  \n\n    \nstring\n\n    \nstring\n\n    \nsub-string match against the url\n\n  \n\n  \n\n    \nregex\n\n    \nstring\n\n    \nevaluates regex against the url\n\n  \n\n\n\n\n\n// example: simple match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'simple',\n      value: 'www.getlytics.com'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com\n// http://www.getlytics.com\n// http://www.getlytics.com?ad_campaign=1ed387faed\n\n// Doesn't Match:\n// http://www.getlytics.com/blog\n// https://activate.getlytics.com\n\n\n\n\n// example: exact match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'exact',\n      value: 'https://www.getlytics.com/resources?id=a763efd12c'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com/resources?id=a763efd12c\n\n// Doesn't Match:\n// http://www.getlytics.com/resources?id=a763efd12c\n// https://getlytics.com/resources?id=a763efd12c\n// https://www.getlytics.com/resources?id=a763efd12c\nsomething=that-will-404\n\n\n\n\n// example: string match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'string',\n      value: '/blog/'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/blog/\n// http://getlytics.com/blog/some-post-in-the-past\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// https://www.getlytics.com/\n// http://getlytics.com/careers\n\n\n\n\n// example: regex match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'regex',\n      value: '\\/integrations\\/.+?\\?.*?ref=our_partner'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=our_partner\n// http://www.getlytics.com/integrations/campaignmonitor?session=125929\nref=our_partner\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=some_stranger\n// http://www.getlytics.com/integrations?ref=our_partner\n// http://www.getlytics.com/blog/adroll?session=125929\nref=our_partner", 
            "title": "Display Conditions"
        }, 
        {
            "location": "/display_conditions/#showoninit", 
            "text": "Determines if the rendered module is displayed as soon as it is initialized or waits for another event.  \n   \n     \n       showOnInit  boolean \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     true \n     default  module will be displayed as soon as it has been loaded \n   \n   \n     false \n     module will be added to DOM but not displayed until another trigger instructs it to \n     // example: loads immediately after initializing the module\n\ndisplayConditions: {\n  showOnInit: true\n}", 
            "title": "showOnInit"
        }, 
        {
            "location": "/display_conditions/#showdelay", 
            "text": "Adds a delay, in seconds, that must be completed before module is loaded.  \n   \n     \n       showDelay  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     0 \n     default  using 0 disables the showDelay property and will show immediately \n   \n   \n     0 \u2013 \u221e \n     module will be displayed after waiting x seconds after initialization \n     // example: loads after a 10 second delay\n\ndisplayConditions: {\n  showDelay: 10\n}", 
            "title": "showDelay"
        }, 
        {
            "location": "/display_conditions/#hideafter", 
            "text": "Adds a countdown, in seconds, that must hides module on expiration.  \n   \n     \n       hideAfter  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     0 \n     default  using 0 disables the showDelay property and will not be hidden \n   \n   \n     0 \u2013 \u221e \n     module will hidden from screen after x seconds have passed \n     // example: hide module after 10 seconds\n\ndisplayConditions: {\n  hideAfter: 10\n}", 
            "title": "hideAfter"
        }, 
        {
            "location": "/display_conditions/#displaywhenelementvisible", 
            "text": "Triggers the module when a specific DOM element enters the viewport.  \n   \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     displayWhenElementVisible \n     string \n     selector for the element which when visible will trigger the module \n     // example: show module when the .footer is visible\n\ndisplayConditions: {\n  displayWhenElementVisible: '.footer'\n}", 
            "title": "displayWhenElementVisible"
        }, 
        {
            "location": "/display_conditions/#scrollpercentagetodisplay", 
            "text": "Triggers the modal after a percentage of the page scroll has been performed.  \n   \n     \n       scrollPercentageToDisplay  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     0 \n     default  using 0 disables the property and will show immediately \n   \n   \n     0 \u2013 100 \n     module will hidden until x percent of total scroll has been performed \n     // example: show module when the 50 percent of the page scroll has been completed\n\ndisplayConditions: {\n  scrollPercentageToDisplay: 50\n}", 
            "title": "scrollPercentageToDisplay"
        }, 
        {
            "location": "/display_conditions/#pagevisits", 
            "text": "Triggers the module when the user visits the page a certain amount of times. The total number of page visits is saved in cookie  PathforaPageView  to compare against this value.  \n   \n     \n       pageVisits  int \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     0 \n     default  using 0 disables the property and will show on all visits \n   \n   \n     0 \u2013 \u221e \n     module will show only when the user has visited more than x times \n     // example: show module after they have visited at least 3 times\n\ndisplayConditions: {\n  pageVisits: 3\n}", 
            "title": "pageVisits"
        }, 
        {
            "location": "/display_conditions/#date", 
            "text": "Display the module in a specified interval of time.  \n   \n     \n       date  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     start_at \n     string \n     optional  valid ISO 8601 formatted date for date to start showing module \n   \n   \n     end_at \n     string \n     optional  valid ISO 8601 formatted date for date to stop showing module \n     // example: show module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at: '2017-02-12T11:00:00.000Z'\n  }\n}  // example: hide module starting February 12, 2017\n\ndisplayConditions: {\n  date: {\n    end_at: '2017-02-12T11:00:00.000Z'\n  }\n}  // example: show module between February 12, 2017 and March 12, 2017\n\ndisplayConditions: {\n  date: {\n    start_at: '2017-02-12T11:00:00.000Z',\n    end_at: '2017-03-12T11:00:00.000Z'\n  }\n}", 
            "title": "date"
        }, 
        {
            "location": "/display_conditions/#impressions", 
            "text": "Hide the module after a certain number of impressions. The current number of impressions is saved in a cookie  PathforaImpressions_[module id]  to compare against this value.  \n   \n     \n       impressions  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     session \n     int \n     optional  count of how many session-based impressions before showing the module \n   \n   \n     total \n     int \n     optional  count of how many total (multisession) impressions before showing the module \n     // example: hide module after the second impressions in the same session\n\ndisplayConditions: {\n  impressions: {\n    session: 2\n  }\n}  // example: hide module after five total impressions\n\ndisplayConditions: {\n  impressions: {\n    total: 5\n  }\n}  // example: hide the module after the second impression in the same session\n// or if it has been seen five times ever\n\ndisplayConditions: {\n  impressions: {\n    session: 2,\n    total: 5\n  }\n}", 
            "title": "impressions"
        }, 
        {
            "location": "/display_conditions/#hideafteraction", 
            "text": "Hide the module after a particular action has been taken ( closed ,  cancel , or  confirm ). The current number of impressions is saved in a cookie  Pathfora[action]_[module id]  to compare against this value.  \n   \n     \n       hideAfterAction  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     closed \n     object \n     optional  settings for hiding the module based on the close action \n   \n   \n     cancel \n     object \n     optional  settings for hiding the module based on the cancel button click action \n   \n   \n     confirm \n     object \n     optional  settings for hiding the module based on the confirm button action \n     \n   \n     \n       closed  /  confirm  /  cancel  object \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     hideCount \n     int \n     optional  count of times module has been closed manually by user before hiding the module \n   \n   \n     duration \n     int \n     optional  how long the module should be hidden in seconds \n     // example: hide module for 6 minutes after 5th close\n\ndisplayConditions: {\n  hideAfterAction: {\n    closed: {\n      hideCount: 5,\n      duration: 60 * 6\n    }\n  }\n}  // example: hide module permanently after confirmation has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    confirm: {\n      hideCount: 1\n    }\n  }\n}  // example: hide module for 1 week after cancel has been clicked\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 60 * 60 * 24 * 7\n    }\n  }\n}  // example: all of the above\n\ndisplayConditions: {\n  hideAfterAction: {\n    cancel: {\n      hideCount: 1,\n      duration: 60 * 60 * 24 * 7\n    },\n    confirm: {\n      hideCount: 1\n    },\n    closed: {\n      hideCount: 5,\n      duration: 60 * 6\n    }\n  }\n}", 
            "title": "hideAfterAction"
        }, 
        {
            "location": "/display_conditions/#urlcontains", 
            "text": "Only display the module on pages that match the url conditions defined.  \n   \n     \n       object in  urlContains  array \n     \n     \n       Key \n       Type \n       Behavior \n     \n   \n\n   \n     match \n     string \n     optional  name of the matching rule (see below) \n   \n   \n     value \n     string \n     value to match the current page url against \n     \n   \n     \n       match  string \n     \n     \n       Value \n       Type \n       Behavior \n     \n   \n\n   \n     simple \n     string \n     default  fuzzy match that removes the URL protocol and query string before matching \n   \n   \n     exact \n     string \n     the url must match what is typed exactly: protocol, query params, etc. \n   \n   \n     string \n     string \n     sub-string match against the url \n   \n   \n     regex \n     string \n     evaluates regex against the url \n     // example: simple match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'simple',\n      value: 'www.getlytics.com'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com\n// http://www.getlytics.com\n// http://www.getlytics.com?ad_campaign=1ed387faed\n\n// Doesn't Match:\n// http://www.getlytics.com/blog\n// https://activate.getlytics.com  // example: exact match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'exact',\n      value: 'https://www.getlytics.com/resources?id=a763efd12c'\n    }\n  ]\n}\n\n// Matches:\n// https://www.getlytics.com/resources?id=a763efd12c\n\n// Doesn't Match:\n// http://www.getlytics.com/resources?id=a763efd12c\n// https://getlytics.com/resources?id=a763efd12c\n// https://www.getlytics.com/resources?id=a763efd12c something=that-will-404  // example: string match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'string',\n      value: '/blog/'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/blog/\n// http://getlytics.com/blog/some-post-in-the-past\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// https://www.getlytics.com/\n// http://getlytics.com/careers  // example: regex match\n\ndisplayConditions: {\n  urlContains: [\n    {\n      match: 'regex',\n      value: '\\/integrations\\/.+?\\?.*?ref=our_partner'\n    }\n  ]\n}\n\n// Matches:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=our_partner\n// http://www.getlytics.com/integrations/campaignmonitor?session=125929 ref=our_partner\n// https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle\n\n// Doesn't Match:\n// http://www.getlytics.com/integrations/campaignmonitor?ref=some_stranger\n// http://www.getlytics.com/integrations?ref=our_partner\n// http://www.getlytics.com/blog/adroll?session=125929 ref=our_partner", 
            "title": "urlContains"
        }, 
        {
            "location": "/tracking/", 
            "text": "Pathfora can send tracking events and the user data submitted to Lytics and Google Analytics. As long as your tags are all set up in the correct order, module data will be sent automatically. Below we will look at which fields are sent in detail and their formats.\n\n\nLytics\n\n\nAs long as your \nLytics javascript tag\n is loaded before the Pathfora tag, all event data and data collected from modules with user input will be sent to the the stream \nconfigured in your Lytics javascript tag\n. The following raw data fields can be sent to Lytics by Pathfora.\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\npf-widget-id\n\n\nstring\n\n\nid of the module set in the config\n\n\n\n\n\n\npf-widget-type\n\n\nstring\n\n\ntype of the module\n\n\n\n\n\n\npf-widget-layout\n\n\nstring\n\n\nlayout of the module\n\n\n\n\n\n\npf-widget-variant\n\n\nint\n\n\nvariant of the module\n\n\n\n\n\n\npf-widget-event\n\n\nstring\n\n\nname of the event (see below)\n\n\n\n\n\n\npf-widget-action\n\n\nstring\n\n\ncustom tracking names for button click events as defined in \nconfirmAction\n or \ncancelAction\n\n\n\n\n\n\npf-form-username\n\n\nstring\n\n\nuser submitted value of \"name\" field on module\n\n\n\n\n\n\npf-form-title\n\n\nstring\n\n\nuser submitted value of \"title\" field on module\n\n\n\n\n\n\npf-form-email\n\n\nstring\n\n\nuser submitted value of \"email\" field on module\n\n\n\n\n\n\npf-form-message\n\n\nstring\n\n\nuser submitted value of \"message\" field on module\n\n\n\n\n\n\npf-form-company\n\n\nstring\n\n\nuser submitted value of \"company\" field on module\n\n\n\n\n\n\npf-form-phone\n\n\nstring\n\n\nuser submitted value of \"phone number\" field on module\n\n\n\n\n\n\n\n\n\n  \n\n    \n\n      \npf-widget-event\n string\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nshow\n\n    \nmodule was displayed to the user\n\n  \n\n  \n\n    \nclose\n\n    \nmodule was closed by the user\n\n  \n\n  \n\n    \nconfirm\n\n    \n\"confirm\" button was clicked by the user\n\n  \n\n  \n\n    \ncancel\n\n    \n\"cancel\" button was clicked by the user\n\n  \n\n  \n\n    \nsubmit\n\n    \nuser submitted information from a \nform module\n\n  \n\n  \n\n    \nsubscribe\n\n    \nuser submitted email from a \nsubscription module\n\n  \n\n  \n\n    \nunlock\n\n    \nuser submitted information from a \ngate module\n\n  \n\n\n\n\n\nTo verify that the event data fields are being sent properly to Lytics, you can simulate an action by interacting with your module and checking that the expected fields exist in the data streams section of your Lytics Account.\n\n\nBy default these fields are available as user fields so that you can use them in the creation of segments. If you need help using these fields or would like to map the user fields differently please contact your customer success representative \nsuccess@getlytics.com\n.\n\n\nGoogle Analytics\n\n\nPathfora will send event data from the modules on your website to your Google Analytics account as long as it has access to the \nga\n function. This requires that you have the \nanalytics.js snippet\n on your website loaded before the Pathfora tag. An event sent to Google Analytics by Pathfora will use the following attributes for \nevent tracking\n:\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nValue\n\n\n\n\n\n\n\n\n\n\neventCategory\n\n\nstring\n\n\nLytics\n\n\n\n\n\n\neventAction\n\n\nstring\n\n\n[id of module] : [event name]\n\n\n\n\n\n\n\n\nThe \n[event name]\n signifier in eventAction will match the event names for the \npf-widget-event\n field \nsent to Lytics\n. However, if you've defined custom names in the \nconfirmAction\n or \ncancelAction\n settings this will override the event name for those actions.", 
            "title": "Tracking"
        }, 
        {
            "location": "/tracking/#lytics", 
            "text": "As long as your  Lytics javascript tag  is loaded before the Pathfora tag, all event data and data collected from modules with user input will be sent to the the stream  configured in your Lytics javascript tag . The following raw data fields can be sent to Lytics by Pathfora.     Attribute  Type  Value      pf-widget-id  string  id of the module set in the config    pf-widget-type  string  type of the module    pf-widget-layout  string  layout of the module    pf-widget-variant  int  variant of the module    pf-widget-event  string  name of the event (see below)    pf-widget-action  string  custom tracking names for button click events as defined in  confirmAction  or  cancelAction    pf-form-username  string  user submitted value of \"name\" field on module    pf-form-title  string  user submitted value of \"title\" field on module    pf-form-email  string  user submitted value of \"email\" field on module    pf-form-message  string  user submitted value of \"message\" field on module    pf-form-company  string  user submitted value of \"company\" field on module    pf-form-phone  string  user submitted value of \"phone number\" field on module     \n   \n     \n       pf-widget-event  string \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     show \n     module was displayed to the user \n   \n   \n     close \n     module was closed by the user \n   \n   \n     confirm \n     \"confirm\" button was clicked by the user \n   \n   \n     cancel \n     \"cancel\" button was clicked by the user \n   \n   \n     submit \n     user submitted information from a  form module \n   \n   \n     subscribe \n     user submitted email from a  subscription module \n   \n   \n     unlock \n     user submitted information from a  gate module \n     To verify that the event data fields are being sent properly to Lytics, you can simulate an action by interacting with your module and checking that the expected fields exist in the data streams section of your Lytics Account.  By default these fields are available as user fields so that you can use them in the creation of segments. If you need help using these fields or would like to map the user fields differently please contact your customer success representative  success@getlytics.com .", 
            "title": "Lytics"
        }, 
        {
            "location": "/tracking/#google-analytics", 
            "text": "Pathfora will send event data from the modules on your website to your Google Analytics account as long as it has access to the  ga  function. This requires that you have the  analytics.js snippet  on your website loaded before the Pathfora tag. An event sent to Google Analytics by Pathfora will use the following attributes for  event tracking :     Attribute  Type  Value      eventCategory  string  Lytics    eventAction  string  [id of module] : [event name]     The  [event name]  signifier in eventAction will match the event names for the  pf-widget-event  field  sent to Lytics . However, if you've defined custom names in the  confirmAction  or  cancelAction  settings this will override the event name for those actions.", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/toggle/", 
            "text": "Beyond it's modules, the Pathfora library can also show or hide inline content based on audience membership. With a little bit of HTML and some specially named attributes you can begin seemlessly personalizing the content of your website to fit targetted audiences.\n\n\n!-- This content will show to first-time visitors --\n\n\ndiv data-pfgroup=\nmy-personalized-group\n data-pftrigger=\nnew_user\n\n  You must be new here! Please take a look at our guide for new users.\n\n/div\n\n\n\n!-- This content will show to returning visitors --\n\n\ndiv data-pfgroup=\nmy-personalized-group\n data-pftrigger=\nreturning\n\n  Thanks for coming back, why not check out our blog for the newest updates?\n\n/div\n\n\n\n\n\nYou must load the \nLytics Javascript Tag\n to toggle elements based on audience membership. Pathfora interacts with this tag to retrieve the a list of Lytics audiences that the user is a member of and will select which elements to show/hide based on this list.\n\n\nSetup Your Audiences\n\n\nYou will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id as the value of the \ndata-pftrigger\n attribute.\n\n\n\n\nAttributes\n\n\nEach toggleable piece of content should have a surrounding container HTML element. This element can be of any type and must have the following two attributes.\n\n\n\n  \n\n    \n\n      \nHTML data \nattribute\n\n    \n\n    \n\n      \nAttribute\n\n      \nValue Type\n\n      \nValue\n\n    \n\n  \n\n\n  \n\n    \ndata-pfgroup\n\n    \nstring\n\n    \na unique string name for the set of elements to group together\n\n  \n\n  \n\n\n  \n\n    \ndata-pftrigger\n\n    \nstring\n\n    \nID of the audience in Lytics or \ndefault\n\n  \n\n\n\n\n\nIf you have multiple elements with the same \npfgroup\n name, only the first element with a matching \npftrigger\n value will show. This means at most only one piece of content in a group will show. \n\n\nAdditionally, if the user is not a member of one of these audiences you can create a default piece of content and set the \npftrigger\n value to be \ndefault\n. This default element will only show if the user is not a member of any other \npftrigger\n audience in a group.\n\n\nContent Element Toggle - \nLive Preview\n\n\n\nYou can check which audiences you are a member of by typing \nlio.data.segments\n into a console log. If you are in the \nhigh_value\n or \nregistered_users\n audience you should see the appropriate content, otherwise you will see the default options.", 
            "title": "Element Toggle"
        }, 
        {
            "location": "/toggle/#setup-your-audiences", 
            "text": "You will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id as the value of the  data-pftrigger  attribute.", 
            "title": "Setup Your Audiences"
        }, 
        {
            "location": "/toggle/#attributes", 
            "text": "Each toggleable piece of content should have a surrounding container HTML element. This element can be of any type and must have the following two attributes.  \n   \n     \n       HTML data  attribute \n     \n     \n       Attribute \n       Value Type \n       Value \n     \n   \n\n   \n     data-pfgroup \n     string \n     a unique string name for the set of elements to group together \n   \n   \n\n   \n     data-pftrigger \n     string \n     ID of the audience in Lytics or  default \n     If you have multiple elements with the same  pfgroup  name, only the first element with a matching  pftrigger  value will show. This means at most only one piece of content in a group will show.   Additionally, if the user is not a member of one of these audiences you can create a default piece of content and set the  pftrigger  value to be  default . This default element will only show if the user is not a member of any other  pftrigger  audience in a group.", 
            "title": "Attributes"
        }, 
        {
            "location": "/inline_content/", 
            "text": "Pathfora also supports \"fill in the blank\" style inline content recommendations. That is, you can set up your html elements to match the look and feel of your website, and add attributes which will signal to pathfora to fill in the content with results from the Lytics content recommendation API.\n\n\ndiv data-pfblock=\nmy-recommendation\n data-pfrecommend=\nwww.example.com/blog/*\n\n  \ndiv data-pftype=\nimage\n/div\n\n  \na data-pftype=\nurl\nh2 data-pftype=\ntitle\n/h2\n/a\n\n  \np data-pftype=\ndescription\n/p\n\n\n/div\n\n\n\n\n\nAttributes\n\n\nEach toggleable content recomendation block should have a surrounding container element with the following elements.\n\n\n\n  \n\n    \n\n      \nHTML data \nattribute\n\n    \n\n    \n\n      \nAttribute\n\n      \nValue Type\n\n      \nValue\n\n    \n\n  \n\n\n  \n\n    \ndata-pfblock\n\n    \nstring\n\n    \na unique string name for a single recommendation block\n\n  \n\n  \n\n\n  \n\n    \ndata-pfrecommend\n\n    \nstring\n\n    \nurl pattern to filter results from the recommendation API\n\n  \n\n\n\n\n\nThe \npfrecommend\n attribute value may contain wildcards in the url, and should not include the http protocol in the url. This value gets used to formulate the filter we pass to the recommendation API. If you do not want to set a filter this value should be \n*\n.\n\n\nInside the container element you may have several elements with the \ndata-pftype\n attribute. Based on the value of this attribute, Pathfora will set the innerHTML or an attribute of this element to contain a content recommendation for the user.\n\n\n\n  \n\n    \n\n      \nvalue of \ndata-pftype\n attribute\n\n    \n\n    \n\n      \nValue\n\n      \nBehavior\n\n    \n\n  \n\n\n  \n\n    \nimage\n\n    \non an \nimg\n tag this will set the \nsrc\n value to be the meta image of the document, otherwise it will set the \nbackground-image\n\n  \n\n\n  \n\n    \nurl\n\n    \non an \na\n tag this will set the \nhref\n value to be the url of the document, otherwise it will set the innerHTML to be this url\n\n  \n\n\n  \n\n    \ntitle\n\n    \nset the innerHTML of this element to be the title of the document\n\n  \n\n\n  \n\n    \ndescription\n\n    \nset the innerHTML of this element to be the meta description of the document\n\n  \n\n\n\n\n\nIf for some reason the recommendation API returns an error for the user, and cannot fill in recommendation, you can set some default content to show by creating another set of elements with content you've selected filled in and the \ndata-pfrecommend\n value set to default. This content will only show if the any recommendation with a matching \ndata-pfblock\n couldn't be loaded.\n\n\nContent Recommendations - \nLive Preview", 
            "title": "Inline Content Recommendations"
        }, 
        {
            "location": "/inline_content/#attributes", 
            "text": "Each toggleable content recomendation block should have a surrounding container element with the following elements.  \n   \n     \n       HTML data  attribute \n     \n     \n       Attribute \n       Value Type \n       Value \n     \n   \n\n   \n     data-pfblock \n     string \n     a unique string name for a single recommendation block \n   \n   \n\n   \n     data-pfrecommend \n     string \n     url pattern to filter results from the recommendation API \n     The  pfrecommend  attribute value may contain wildcards in the url, and should not include the http protocol in the url. This value gets used to formulate the filter we pass to the recommendation API. If you do not want to set a filter this value should be  * .  Inside the container element you may have several elements with the  data-pftype  attribute. Based on the value of this attribute, Pathfora will set the innerHTML or an attribute of this element to contain a content recommendation for the user.  \n   \n     \n       value of  data-pftype  attribute \n     \n     \n       Value \n       Behavior \n     \n   \n\n   \n     image \n     on an  img  tag this will set the  src  value to be the meta image of the document, otherwise it will set the  background-image \n   \n\n   \n     url \n     on an  a  tag this will set the  href  value to be the url of the document, otherwise it will set the innerHTML to be this url \n   \n\n   \n     title \n     set the innerHTML of this element to be the title of the document \n   \n\n   \n     description \n     set the innerHTML of this element to be the meta description of the document \n     If for some reason the recommendation API returns an error for the user, and cannot fill in recommendation, you can set some default content to show by creating another set of elements with content you've selected filled in and the  data-pfrecommend  value set to default. This content will only show if the any recommendation with a matching  data-pfblock  couldn't be loaded.", 
            "title": "Attributes"
        }
    ]
}