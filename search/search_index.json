{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lytics Pathfora JS is a lightweight SDK for displaying personalized modules on your website. It integrates with your Lytics account to track user actions, and conditionally display modules based on your users' audience membership. This documentation will walk you through everything you need to create your own highly customized and personalized module. Code and live preview examples are provided along the way. Getting Started Before you begin creating modules with Pathfora you must add the Lytics JavaScript tag to your website. If you are using Lytics experiences to power your modules, Pathfora will be automatically loaded through your Lytics javascript tag. If you're creating a custom module, you will need to load pathfora as well as your Lytics JavaScript tag . <!-- Pathfora Tag --> <script src=\"https://c.lytics.io/static/pathfora.min.js\"></script> Next you'll need to set up configuration for your module and initialize it with initializeWidgets . Example configurations, settings, and their generated modules can be found throughout the documentation. Overview Here are a couple sections to get you started on the basics of Pathfora JS. See the navigation in the sidebar for a full list of docs. API Reference This section acts as a reference for Pathfora's top level functions which will use the module configs you create to deploy modules on your website. Types The type parameter relays information to the layout (see below) related to the type of content being rendered. Pathfora currently supports four types of modules: message, form, subscription and gate. Layouts The layout controls the style (what does the module look like & how does it animate into view). Pathfora currently supports four different layouts for each of the types: modal, slideout, bar, and button. Audience Targeting This section will walk you through how to make your modules truly personalized by targeting them to a specific subset of your users as defined by your Lytics audiences. Display Conditions Display conditions can control when the module is displayed based on the current date, previous actions of the user, current scroll position on the page, and many more settings. Customization Here we cover a few of the options for basic to full customization of the settings such as button and field names, color themes, look and feel.","title":"Pathfora JS"},{"location":"#getting-started","text":"Before you begin creating modules with Pathfora you must add the Lytics JavaScript tag to your website. If you are using Lytics experiences to power your modules, Pathfora will be automatically loaded through your Lytics javascript tag. If you're creating a custom module, you will need to load pathfora as well as your Lytics JavaScript tag . <!-- Pathfora Tag --> <script src=\"https://c.lytics.io/static/pathfora.min.js\"></script> Next you'll need to set up configuration for your module and initialize it with initializeWidgets . Example configurations, settings, and their generated modules can be found throughout the documentation.","title":"Getting Started"},{"location":"#overview","text":"Here are a couple sections to get you started on the basics of Pathfora JS. See the navigation in the sidebar for a full list of docs. API Reference This section acts as a reference for Pathfora's top level functions which will use the module configs you create to deploy modules on your website. Types The type parameter relays information to the layout (see below) related to the type of content being rendered. Pathfora currently supports four types of modules: message, form, subscription and gate. Layouts The layout controls the style (what does the module look like & how does it animate into view). Pathfora currently supports four different layouts for each of the types: modal, slideout, bar, and button. Audience Targeting This section will walk you through how to make your modules truly personalized by targeting them to a specific subset of your users as defined by your Lytics audiences. Display Conditions Display conditions can control when the module is displayed based on the current date, previous actions of the user, current scroll position on the page, and many more settings. Customization Here we cover a few of the options for basic to full customization of the settings such as button and field names, color themes, look and feel.","title":"Overview"},{"location":"ab_testing/","text":"Pathfora supports A/B testing on a global level as well as on a targeted audience. You can split a pool of users to show some proportion of them a group of modules \"A\" and the other portion a group \"B\". var moduleTest = new pathfora.ABTest({ id: 'ab-test-id', type: '50/50', groups: [ [moduleA], [] ] }); pathfora.initializeABTesting([moduleTest]); pathfora.initializeWidgets([moduleA]); ABTest Pathfora has a special configuration method for A/B Testing. This configuration is then used as a parameter for initializeABTesting . ABTest settings object Key Type Behavior id string unique identifier for the A/B Test type string the proportional split between A/B (currently only 50/50 , 80/20 , and 100 is supported) groups array jagged array defining the A/B groups that each module belongs to Global For a global A/B test, some proportion of all users will see module \"A\" while the remaining will see module \"B\". In the example below roughly half of all users will be shown a gated form (A) and the other half will see a form modal (B). All Users Form/SiteGate Test - Live Preview With Audience Targeting A/B Testing can be combined with audience targeting to divide an audience into a 50/50 split. In the example below module \"A\" will be displayed to roughly half of the users in the smt_new audience, while the other half of the audience will be shown module \"B\". New Users Message Test var moduleA = new pathfora.Message({ id: 'message-a', layout: 'slideout', msg: 'Message A' }); var moduleB = new pathfora.Message({ id: 'message-b', layout: 'slideout', msg: 'Message B' }); var ab = new pathfora.ABTest({ id: 'targeted-ab-test', type: '50/50', groups: [ [moduleA], [moduleB] ] }); var widgets = { target: [{ segment: 'smt_new', widgets: [moduleA, moduleB] }] }; pathfora.initializeABTesting([ab]); pathfora.initializeWidgets(widgets); Testing To determine which group a user should be assigned to, Pathfora generates a random value the first time they visit the page. This value gets saved as a cookie PathforaTest_[id] so that Pathfora knows which group the user is in on return visits. Since anyone visiting a page that contains A/B test modules should only see the modules from one group, there is no immediate visual way for developers to verify that both groups are working as expected. However, you can attempt to test that both groups are showing correctly by finding and deleting the cookie named PathforaTest_[id] and refreshing the page. It may take a couple tries to show the other group since you are randomly assigned to a group each time. Feel free to try this on the global example above .","title":"A/B Testing"},{"location":"ab_testing/#abtest","text":"Pathfora has a special configuration method for A/B Testing. This configuration is then used as a parameter for initializeABTesting . ABTest settings object Key Type Behavior id string unique identifier for the A/B Test type string the proportional split between A/B (currently only 50/50 , 80/20 , and 100 is supported) groups array jagged array defining the A/B groups that each module belongs to","title":"ABTest"},{"location":"ab_testing/#global","text":"For a global A/B test, some proportion of all users will see module \"A\" while the remaining will see module \"B\". In the example below roughly half of all users will be shown a gated form (A) and the other half will see a form modal (B).","title":"Global"},{"location":"ab_testing/#with-audience-targeting","text":"A/B Testing can be combined with audience targeting to divide an audience into a 50/50 split. In the example below module \"A\" will be displayed to roughly half of the users in the smt_new audience, while the other half of the audience will be shown module \"B\".","title":"With Audience Targeting"},{"location":"ab_testing/#new-users-message-test","text":"var moduleA = new pathfora.Message({ id: 'message-a', layout: 'slideout', msg: 'Message A' }); var moduleB = new pathfora.Message({ id: 'message-b', layout: 'slideout', msg: 'Message B' }); var ab = new pathfora.ABTest({ id: 'targeted-ab-test', type: '50/50', groups: [ [moduleA], [moduleB] ] }); var widgets = { target: [{ segment: 'smt_new', widgets: [moduleA, moduleB] }] }; pathfora.initializeABTesting([ab]); pathfora.initializeWidgets(widgets);","title":"New Users Message Test"},{"location":"ab_testing/#testing","text":"To determine which group a user should be assigned to, Pathfora generates a random value the first time they visit the page. This value gets saved as a cookie PathforaTest_[id] so that Pathfora knows which group the user is in on return visits. Since anyone visiting a page that contains A/B test modules should only see the modules from one group, there is no immediate visual way for developers to verify that both groups are working as expected. However, you can attempt to test that both groups are showing correctly by finding and deleting the cookie named PathforaTest_[id] and refreshing the page. It may take a couple tries to show the other group since you are randomly assigned to a group each time. Feel free to try this on the global example above .","title":"Testing"},{"location":"callbacks/","text":"All actions taken for clicking a button, submitting a form, and other such events support optional javascript callback settings. confirmAction Set a tracking name and javascript callback for a \"confirm\" button click event. confirmAction object Key Type Behavior name string optional name of the confirm event to send to Lytics and Google Analytics close boolean optional if false, prevent the modal from closing after the callback is executed callback function optional function to execute when the use clicks the \"confirm\" button (see params below) waitForAsyncResponse boolean optional if true, a third parameter (cb) will be passed to the callback function (see params below) callback function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the config of the widget (config), the javascript event (event), and the data submitted by the user in the case of modules with a form (data) cb function optional cb accepts a single boolean param, if true, the submission was counted as successful, and the success state will show. if false, the error state will show. Live Preview cancelAction Set a tracking name and javascript callback for a \"cancel\" button click event. cancelAction object Key Type Behavior name string optional name of the cancel event to send to Lytics and Google Analytics close boolean optional if false, prevent the modal from closing after the callback is executed callback function optional function to execute when the use clicks the \"cancel\" button (see params below) callback function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the config of the widget (config), and the javascript event (event) Live Preview closeAction Set a tracking name and javascript callback for a \"close\" button click event. cancelAction object Key Type Behavior name string optional name of the cancel event to send to Lytics and Google Analytics callback function optional function to execute when the use clicks the \"close\" button (see params below) callback function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the config of the widget (config), and the javascript event (event) Live Preview onInit Javascript callback function on initialization of the module. This should trigger just before the module is shown. onInit function Parameter Type Behavior event string name of the event payload object object containing the pathfora module (config) Live Preview onLoad Javascript callback function on loading the module, triggered when the module is shown to the user. onLoad function Parameter Type Behavior event string name of the event payload object object containing the Pathfora module (config) and the rendered DOM Element (widget) Live Preview onClick Javascript callback function for button layouts only on click of the button widget. onClick function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the pathfora module (config), and the javascript MouseEvent (event) Live Preview onSubmit (deprecated) This callback is deprecated. We advise using confirmAction instead, as it has the same functionality. Javascript callback function for any types with form elements on submission of the form (includes form data as param). onSubmit function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the pathfora module (config), and the javascript Event (event), and the data submitted by the user (data) Live Preview onModalClose Javascript callback function for when a module is closed, this will fire anytime the modal is closed, regardless if the user clicks the confirm, close, or cancel button. onModalClose function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the pathfora module (config), and the javascript Event (event), and the data submitted by the user (data) Live Preview","title":"Callbacks"},{"location":"callbacks/#confirmaction","text":"Set a tracking name and javascript callback for a \"confirm\" button click event. confirmAction object Key Type Behavior name string optional name of the confirm event to send to Lytics and Google Analytics close boolean optional if false, prevent the modal from closing after the callback is executed callback function optional function to execute when the use clicks the \"confirm\" button (see params below) waitForAsyncResponse boolean optional if true, a third parameter (cb) will be passed to the callback function (see params below) callback function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the config of the widget (config), the javascript event (event), and the data submitted by the user in the case of modules with a form (data) cb function optional cb accepts a single boolean param, if true, the submission was counted as successful, and the success state will show. if false, the error state will show.","title":"confirmAction"},{"location":"callbacks/#cancelaction","text":"Set a tracking name and javascript callback for a \"cancel\" button click event. cancelAction object Key Type Behavior name string optional name of the cancel event to send to Lytics and Google Analytics close boolean optional if false, prevent the modal from closing after the callback is executed callback function optional function to execute when the use clicks the \"cancel\" button (see params below) callback function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the config of the widget (config), and the javascript event (event)","title":"cancelAction"},{"location":"callbacks/#closeaction","text":"Set a tracking name and javascript callback for a \"close\" button click event. cancelAction object Key Type Behavior name string optional name of the cancel event to send to Lytics and Google Analytics callback function optional function to execute when the use clicks the \"close\" button (see params below) callback function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the config of the widget (config), and the javascript event (event)","title":"closeAction"},{"location":"callbacks/#oninit","text":"Javascript callback function on initialization of the module. This should trigger just before the module is shown. onInit function Parameter Type Behavior event string name of the event payload object object containing the pathfora module (config)","title":"onInit"},{"location":"callbacks/#onload","text":"Javascript callback function on loading the module, triggered when the module is shown to the user. onLoad function Parameter Type Behavior event string name of the event payload object object containing the Pathfora module (config) and the rendered DOM Element (widget)","title":"onLoad"},{"location":"callbacks/#onclick","text":"Javascript callback function for button layouts only on click of the button widget. onClick function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the pathfora module (config), and the javascript MouseEvent (event)","title":"onClick"},{"location":"callbacks/#onsubmit-deprecated","text":"This callback is deprecated. We advise using confirmAction instead, as it has the same functionality. Javascript callback function for any types with form elements on submission of the form (includes form data as param). onSubmit function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the pathfora module (config), and the javascript Event (event), and the data submitted by the user (data)","title":"onSubmit (deprecated)"},{"location":"callbacks/#onmodalclose","text":"Javascript callback function for when a module is closed, this will fire anytime the modal is closed, regardless if the user clicks the confirm, close, or cancel button. onModalClose function Parameter Type Behavior event string name of the event payload object object containing the rendered DOM Element (widget), the pathfora module (config), and the javascript Event (event), and the data submitted by the user (data)","title":"onModalClose"},{"location":"content_recommend/","text":"Instead of hand selecting content to show an audience, you can can create a module that will suggest content at a individual level, based on the viewer's content affinities in Lytics. Note : only Message modules using a slideout , modal or modal layout and a variant of 3 support content recommendations. recommend Recommend controls any parameters necessary for making a content suggestions to a user using the Lytics content recommendation API. recommend object Key Type Behavior collection string id of a content collection - the source list of content to recommend from** rollups array if supplied, only allow recommendations of documents with topics from the specified topic rollups visited boolean if false, only recommend an article the user has not previously visited. shuffle boolean if true, randomly shuffle the recommendations to show a different recommendation on each page load rank string must be one of popular (prioritizes most popular documents), recent (prioritizes most recent documents), or affinity (prioritizes based on user affinity - default) display object additional settings to control the appearance of the recommendation (see below) ** You can get the id of the content collection from the url of that collection in the Lytics App. display object Key Type Behavior title boolean if false, do not show the title of the recommended content image boolean if false, do not show the meta image of the recommended content description boolean if false, do not show the meta description of the recommended content author boolean if true, display the author of the recommended content date boolean if false, display the published date of the recommended content descriptionLimit int limit the number of characters in the meta description preview, a value of -1 removes the limit locale string locale to be used to format the published date dateOptions object options to be used to format the published date content Content acts as a backfill/helper for the recommend key . If the content recommendation API cannot return a recommendation for the user (if they don't have any content affinity data or an error occurs), a default document may be provided. object in content array Key Type Behavior url string url of the default document to recommend to the user title string meta title of the default document description string meta description of the default document image string url of the meta image of the default document author string full name of the author of the document date string ISO 8601 formatted date that the document was published default boolean required true if the content provided is to be used should the recommendation fail Note: The examples below will show the default content since the account used does not have content affinity set up. Content Recommendation Modal - Live Preview Content Recommendation Slideout - Live Preview","title":"Content Recommendations"},{"location":"content_recommend/#recommend","text":"Recommend controls any parameters necessary for making a content suggestions to a user using the Lytics content recommendation API. recommend object Key Type Behavior collection string id of a content collection - the source list of content to recommend from** rollups array if supplied, only allow recommendations of documents with topics from the specified topic rollups visited boolean if false, only recommend an article the user has not previously visited. shuffle boolean if true, randomly shuffle the recommendations to show a different recommendation on each page load rank string must be one of popular (prioritizes most popular documents), recent (prioritizes most recent documents), or affinity (prioritizes based on user affinity - default) display object additional settings to control the appearance of the recommendation (see below) ** You can get the id of the content collection from the url of that collection in the Lytics App. display object Key Type Behavior title boolean if false, do not show the title of the recommended content image boolean if false, do not show the meta image of the recommended content description boolean if false, do not show the meta description of the recommended content author boolean if true, display the author of the recommended content date boolean if false, display the published date of the recommended content descriptionLimit int limit the number of characters in the meta description preview, a value of -1 removes the limit locale string locale to be used to format the published date dateOptions object options to be used to format the published date","title":"recommend"},{"location":"content_recommend/#content","text":"Content acts as a backfill/helper for the recommend key . If the content recommendation API cannot return a recommendation for the user (if they don't have any content affinity data or an error occurs), a default document may be provided. object in content array Key Type Behavior url string url of the default document to recommend to the user title string meta title of the default document description string meta description of the default document image string url of the meta image of the default document author string full name of the author of the document date string ISO 8601 formatted date that the document was published default boolean required true if the content provided is to be used should the recommendation fail Note: The examples below will show the default content since the account used does not have content affinity set up.","title":"content"},{"location":"display_conditions/","text":"The displayConditions key controls how, when, and for how long any single module is displayed/hidden. All options can be combined with one another for maximum control. Each module requires its own set of displayConditions . By default all modules will leverage showOnInit . Once other display conditions are set, they will override this default. var module = new pathfora.Message({ displayConditions: { showDelay: 10, impressions: { session: 2 } } }); pathfora.initializeWidgets([module]); Some display conditions may require that cookies be enabled to work properly. showOnInit Determines if the rendered module is displayed as soon as it is initialized or waits for another event. showOnInit boolean Value Behavior true default module will be displayed as soon as it has been loaded false module will be added to DOM but not displayed until another trigger instructs it to // example: loads immediately after initializing the module displayConditions: { showOnInit: true } showDelay Adds a delay, in seconds, that must be completed before module is loaded. showDelay int Value Behavior 0 default using 0 disables the showDelay property and will show immediately 0 \u2013 \u221e module will be displayed after waiting x seconds after initialization // example: loads after a 10 second delay displayConditions: { showDelay: 10 } showOnMissingFields By default, a module will be hidden if tried to include an entity field that the user does not have. showOnMissingFields can override this beahvior. showOnMissingFields int Value Behavior false default module will be hidden if the field does not exist and no fallback is defined true module will show regardless of the missing field value, and the template will be replaced by an empty string. displayConditions: { showOnMissingFields: true } hideAfter Adds a countdown, in seconds, that must hides module on expiration. hideAfter int Value Behavior 0 default using 0 disables the showDelay property and will not be hidden 0 \u2013 \u221e module will hidden from screen after x seconds have passed // example: hide module after 10 seconds displayConditions: { hideAfter: 10 } displayWhenElementVisible Triggers the module when a specific DOM element enters the viewport. Key Type Behavior displayWhenElementVisible string selector for the element which when visible will trigger the module // example: show module when the .footer is visible displayConditions: { displayWhenElementVisible: '.footer' } scrollPercentageToDisplay Triggers the modal after a percentage of the page scroll has been performed. scrollPercentageToDisplay int Value Behavior 0 default using 0 disables the property and will show immediately 0 \u2013 100 module will hidden until x percent of total scroll has been performed // example: show module when the 50 percent of the page scroll has been completed displayConditions: { scrollPercentageToDisplay: 50 } pageVisits Triggers the module when the user visits the page a certain amount of times. The total number of page visits is saved in cookie PathforaPageView to compare against this value. pageVisits int Value Behavior 0 default using 0 disables the property and will show on all visits 0 \u2013 \u221e module will show only when the user has visited more than x times // example: show module after they have visited at least 3 times displayConditions: { pageVisits: 3 } date Display the module in a specified interval of time. date object Key Type Behavior start_at string optional valid ISO 8601 formatted date for date to start showing module end_at string optional valid ISO 8601 formatted date for date to stop showing module // example: show module starting February 12, 2017 displayConditions: { date: { start_at: '2017-02-12T11:00:00.000Z' } } // example: hide module starting February 12, 2017 displayConditions: { date: { end_at: '2017-02-12T11:00:00.000Z' } } // example: show module between February 12, 2017 and March 12, 2017 displayConditions: { date: { start_at: '2017-02-12T11:00:00.000Z', end_at: '2017-03-12T11:00:00.000Z' } } impressions Hide the module after a certain number of impressions or global impressions across all widgets. The current number of impressions is saved in localstorage with the key PathforaImpressions_[module id] to compare against this value. If you opt to use the duration setting for total impressions, an additional localstorage item is populated with the key PathforaTotalImpressionsSince_[module id] impressions object Key Type Behavior widget object optional contains settings specific to the widget itself global object optional contains settings specific to the widget but based upon all consumable or consumed widgets widget / global object Key Type Behavior session int optional count of how many session-based impressions before hiding the module total int optional count of how many total (multisession) impressions before hiding the module buffer int optional time in seconds between subsequent impressions buffer int optional time in seconds before \"resetting\" the impression count for total values // example: hide module after the second impression in the same session displayConditions: { impressions: { widget: { session: 2 } } } // example: hide module after five total impressions displayConditions: { impressions: { widget: { total: 5 } } } // example: hide the module for 24 hours after five impressions displayConditions: { impressions: { widget: { total: 5 duration: 60 * 60 * 24, } } } // example: hide the module after the second impression in the same session // or if it has been seen five times ever displayConditions: { impressions: { widget: { session: 2, total: 5 } } } // example: hide the module after two impressions from **any** pathfora modules in the same session displayConditions: { impressions: { global: { session: 2 } } } // example: hide the module for 24 hours after five impressions from **any** pathfora modules displayConditions: { impressions: { global: { total: 5, duration: 60 * 60 * 24, } } } hideAfterAction Hide the module after a particular action has been taken ( closed , cancel , or confirm ). The current number of impressions is saved in a cookie Pathfora[action]_[module id] to compare against this value. hideAfterAction object Key Type Behavior closed object optional settings for hiding the module based on the close action cancel object optional settings for hiding the module based on the cancel button click action confirm object optional settings for hiding the module based on the confirm button action closed / confirm / cancel object Key Type Behavior hideCount int optional count of times module has been closed manually by user before hiding the module duration int optional how long the module should be hidden in seconds // example: hide module for 6 minutes after 5th close displayConditions: { hideAfterAction: { closed: { hideCount: 5, duration: 60 * 6 } } } // example: hide module permanently after confirmation has been clicked displayConditions: { hideAfterAction: { confirm: { hideCount: 1 } } } // example: hide module for 1 week after cancel has been clicked displayConditions: { hideAfterAction: { cancel: { hideCount: 1, duration: 60 * 60 * 24 * 7 } } } // example: all of the above displayConditions: { hideAfterAction: { cancel: { hideCount: 1, duration: 60 * 60 * 24 * 7 }, confirm: { hideCount: 1 }, closed: { hideCount: 5, duration: 60 * 6 } } } showOnExitIntent Only display the module when the user is about to leave the page. showOnExitIntent boolean Value Behavior true module will be displayed as soon as the user is about to leave the page. false default module will be displayed either on init or when manually invoked, depending on showOnInit // example: loads immediately after initializing the module displayConditions: { showOnExitIntent: true } Exit Intent Modal - Live Preview manualTrigger Control when a module is triggered with javascript. Use this displayCondition in conjunction with the triggerWidgets . manualTrigger boolean Value Behavior true module will be displayed when triggerWidgets method is called. false default module will be displayed either on init or when manually invoked, depending on showOnInit // example: this script alone will not display the module var module = new pathfora.Message({ id: 'trigger-message', layout: 'modal', msg: 'You clicked the button!', displayConditions: { manualTrigger: true } }); pathfora.initializeWidgets([module]); <!-- module will display when the user clicks this button --> <input type=\"submit\" value=\"Click to display module\" onclick=\"pathfora.triggerWidgets(['trigger-message'])\"> urlContains Only display the module on pages that match the url conditions defined. object in urlContains array Key Type Behavior match string optional name of the matching rule (see below) value string value to match the current page url against exclude boolean optional if true, the module will not display on any page that matches this rule match string Value Type Behavior simple string default fuzzy match that removes the URL protocol and query string before matching exact string the url must match what is typed exactly: protocol, query params, etc. string string sub-string match against the url regex string evaluates regex against the url // example: simple match displayConditions: { urlContains: [ { match: 'simple', value: 'www.getlytics.com' } ] } // Matches: // https://www.getlytics.com // http://www.getlytics.com // http://www.getlytics.com?ad_campaign=1ed387faed // Doesn't Match: // http://www.getlytics.com/blog // https://activate.getlytics.com // example: exact match displayConditions: { urlContains: [ { match: 'exact', value: 'https://www.getlytics.com/resources?id=a763efd12c' } ] } // Matches: // https://www.getlytics.com/resources?id=a763efd12c // Doesn't Match: // http://www.getlytics.com/resources?id=a763efd12c // https://getlytics.com/resources?id=a763efd12c // https://www.getlytics.com/resources?id=a763efd12c&something=that-will-404 // example: string match displayConditions: { urlContains: [ { match: 'string', value: '/blog/' } ] } // Matches: // http://www.getlytics.com/blog/ // http://getlytics.com/blog/some-post-in-the-past // https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle // Doesn't Match: // https://www.getlytics.com/ // http://getlytics.com/careers // example: regex match displayConditions: { urlContains: [ { match: 'regex', value: '\\/integrations\\/.+?\\?.*?ref=our_partner' } ] } // Matches: // http://www.getlytics.com/integrations/campaignmonitor?ref=our_partner // http://www.getlytics.com/integrations/campaignmonitor?session=125929&ref=our_partner // https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle // Doesn't Match: // http://www.getlytics.com/integrations/campaignmonitor?ref=some_stranger // http://www.getlytics.com/integrations?ref=our_partner // http://www.getlytics.com/blog/adroll?session=125929&ref=our_partner metaContains Only display the module on pages that have meta tags that match the conditions defined. Note that metaContains does not support partial matches as urlContains does. Treat metaContains values as having the exact match rule. object in metaContains array Key Type Behavior property string optional property attribute of the meta tag content string optional value of the content attribute of the meta tag to match against name string optional name attribute of the meta tag // example match based on og:type displayConditions: { metaContains: [ { property: 'og:type', content: 'website' } ] } // Matches: // <meta property=\"og:type\" content=\"website\" />","title":"Display Conditions"},{"location":"display_conditions/#showoninit","text":"Determines if the rendered module is displayed as soon as it is initialized or waits for another event. showOnInit boolean Value Behavior true default module will be displayed as soon as it has been loaded false module will be added to DOM but not displayed until another trigger instructs it to // example: loads immediately after initializing the module displayConditions: { showOnInit: true }","title":"showOnInit"},{"location":"display_conditions/#showdelay","text":"Adds a delay, in seconds, that must be completed before module is loaded. showDelay int Value Behavior 0 default using 0 disables the showDelay property and will show immediately 0 \u2013 \u221e module will be displayed after waiting x seconds after initialization // example: loads after a 10 second delay displayConditions: { showDelay: 10 }","title":"showDelay"},{"location":"display_conditions/#showonmissingfields","text":"By default, a module will be hidden if tried to include an entity field that the user does not have. showOnMissingFields can override this beahvior. showOnMissingFields int Value Behavior false default module will be hidden if the field does not exist and no fallback is defined true module will show regardless of the missing field value, and the template will be replaced by an empty string. displayConditions: { showOnMissingFields: true }","title":"showOnMissingFields"},{"location":"display_conditions/#hideafter","text":"Adds a countdown, in seconds, that must hides module on expiration. hideAfter int Value Behavior 0 default using 0 disables the showDelay property and will not be hidden 0 \u2013 \u221e module will hidden from screen after x seconds have passed // example: hide module after 10 seconds displayConditions: { hideAfter: 10 }","title":"hideAfter"},{"location":"display_conditions/#displaywhenelementvisible","text":"Triggers the module when a specific DOM element enters the viewport. Key Type Behavior displayWhenElementVisible string selector for the element which when visible will trigger the module // example: show module when the .footer is visible displayConditions: { displayWhenElementVisible: '.footer' }","title":"displayWhenElementVisible"},{"location":"display_conditions/#scrollpercentagetodisplay","text":"Triggers the modal after a percentage of the page scroll has been performed. scrollPercentageToDisplay int Value Behavior 0 default using 0 disables the property and will show immediately 0 \u2013 100 module will hidden until x percent of total scroll has been performed // example: show module when the 50 percent of the page scroll has been completed displayConditions: { scrollPercentageToDisplay: 50 }","title":"scrollPercentageToDisplay"},{"location":"display_conditions/#pagevisits","text":"Triggers the module when the user visits the page a certain amount of times. The total number of page visits is saved in cookie PathforaPageView to compare against this value. pageVisits int Value Behavior 0 default using 0 disables the property and will show on all visits 0 \u2013 \u221e module will show only when the user has visited more than x times // example: show module after they have visited at least 3 times displayConditions: { pageVisits: 3 }","title":"pageVisits"},{"location":"display_conditions/#date","text":"Display the module in a specified interval of time. date object Key Type Behavior start_at string optional valid ISO 8601 formatted date for date to start showing module end_at string optional valid ISO 8601 formatted date for date to stop showing module // example: show module starting February 12, 2017 displayConditions: { date: { start_at: '2017-02-12T11:00:00.000Z' } } // example: hide module starting February 12, 2017 displayConditions: { date: { end_at: '2017-02-12T11:00:00.000Z' } } // example: show module between February 12, 2017 and March 12, 2017 displayConditions: { date: { start_at: '2017-02-12T11:00:00.000Z', end_at: '2017-03-12T11:00:00.000Z' } }","title":"date"},{"location":"display_conditions/#impressions","text":"Hide the module after a certain number of impressions or global impressions across all widgets. The current number of impressions is saved in localstorage with the key PathforaImpressions_[module id] to compare against this value. If you opt to use the duration setting for total impressions, an additional localstorage item is populated with the key PathforaTotalImpressionsSince_[module id] impressions object Key Type Behavior widget object optional contains settings specific to the widget itself global object optional contains settings specific to the widget but based upon all consumable or consumed widgets widget / global object Key Type Behavior session int optional count of how many session-based impressions before hiding the module total int optional count of how many total (multisession) impressions before hiding the module buffer int optional time in seconds between subsequent impressions buffer int optional time in seconds before \"resetting\" the impression count for total values // example: hide module after the second impression in the same session displayConditions: { impressions: { widget: { session: 2 } } } // example: hide module after five total impressions displayConditions: { impressions: { widget: { total: 5 } } } // example: hide the module for 24 hours after five impressions displayConditions: { impressions: { widget: { total: 5 duration: 60 * 60 * 24, } } } // example: hide the module after the second impression in the same session // or if it has been seen five times ever displayConditions: { impressions: { widget: { session: 2, total: 5 } } } // example: hide the module after two impressions from **any** pathfora modules in the same session displayConditions: { impressions: { global: { session: 2 } } } // example: hide the module for 24 hours after five impressions from **any** pathfora modules displayConditions: { impressions: { global: { total: 5, duration: 60 * 60 * 24, } } }","title":"impressions"},{"location":"display_conditions/#hideafteraction","text":"Hide the module after a particular action has been taken ( closed , cancel , or confirm ). The current number of impressions is saved in a cookie Pathfora[action]_[module id] to compare against this value. hideAfterAction object Key Type Behavior closed object optional settings for hiding the module based on the close action cancel object optional settings for hiding the module based on the cancel button click action confirm object optional settings for hiding the module based on the confirm button action closed / confirm / cancel object Key Type Behavior hideCount int optional count of times module has been closed manually by user before hiding the module duration int optional how long the module should be hidden in seconds // example: hide module for 6 minutes after 5th close displayConditions: { hideAfterAction: { closed: { hideCount: 5, duration: 60 * 6 } } } // example: hide module permanently after confirmation has been clicked displayConditions: { hideAfterAction: { confirm: { hideCount: 1 } } } // example: hide module for 1 week after cancel has been clicked displayConditions: { hideAfterAction: { cancel: { hideCount: 1, duration: 60 * 60 * 24 * 7 } } } // example: all of the above displayConditions: { hideAfterAction: { cancel: { hideCount: 1, duration: 60 * 60 * 24 * 7 }, confirm: { hideCount: 1 }, closed: { hideCount: 5, duration: 60 * 6 } } }","title":"hideAfterAction"},{"location":"display_conditions/#showonexitintent","text":"Only display the module when the user is about to leave the page. showOnExitIntent boolean Value Behavior true module will be displayed as soon as the user is about to leave the page. false default module will be displayed either on init or when manually invoked, depending on showOnInit // example: loads immediately after initializing the module displayConditions: { showOnExitIntent: true }","title":"showOnExitIntent"},{"location":"display_conditions/#manualtrigger","text":"Control when a module is triggered with javascript. Use this displayCondition in conjunction with the triggerWidgets . manualTrigger boolean Value Behavior true module will be displayed when triggerWidgets method is called. false default module will be displayed either on init or when manually invoked, depending on showOnInit // example: this script alone will not display the module var module = new pathfora.Message({ id: 'trigger-message', layout: 'modal', msg: 'You clicked the button!', displayConditions: { manualTrigger: true } }); pathfora.initializeWidgets([module]); <!-- module will display when the user clicks this button --> <input type=\"submit\" value=\"Click to display module\" onclick=\"pathfora.triggerWidgets(['trigger-message'])\">","title":"manualTrigger"},{"location":"display_conditions/#urlcontains","text":"Only display the module on pages that match the url conditions defined. object in urlContains array Key Type Behavior match string optional name of the matching rule (see below) value string value to match the current page url against exclude boolean optional if true, the module will not display on any page that matches this rule match string Value Type Behavior simple string default fuzzy match that removes the URL protocol and query string before matching exact string the url must match what is typed exactly: protocol, query params, etc. string string sub-string match against the url regex string evaluates regex against the url // example: simple match displayConditions: { urlContains: [ { match: 'simple', value: 'www.getlytics.com' } ] } // Matches: // https://www.getlytics.com // http://www.getlytics.com // http://www.getlytics.com?ad_campaign=1ed387faed // Doesn't Match: // http://www.getlytics.com/blog // https://activate.getlytics.com // example: exact match displayConditions: { urlContains: [ { match: 'exact', value: 'https://www.getlytics.com/resources?id=a763efd12c' } ] } // Matches: // https://www.getlytics.com/resources?id=a763efd12c // Doesn't Match: // http://www.getlytics.com/resources?id=a763efd12c // https://getlytics.com/resources?id=a763efd12c // https://www.getlytics.com/resources?id=a763efd12c&something=that-will-404 // example: string match displayConditions: { urlContains: [ { match: 'string', value: '/blog/' } ] } // Matches: // http://www.getlytics.com/blog/ // http://getlytics.com/blog/some-post-in-the-past // https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle // Doesn't Match: // https://www.getlytics.com/ // http://getlytics.com/careers // example: regex match displayConditions: { urlContains: [ { match: 'regex', value: '\\/integrations\\/.+?\\?.*?ref=our_partner' } ] } // Matches: // http://www.getlytics.com/integrations/campaignmonitor?ref=our_partner // http://www.getlytics.com/integrations/campaignmonitor?session=125929&ref=our_partner // https://www.getlytics.com/blog/tag/customer-data-platform?referrer=thegreatgoogle // Doesn't Match: // http://www.getlytics.com/integrations/campaignmonitor?ref=some_stranger // http://www.getlytics.com/integrations?ref=our_partner // http://www.getlytics.com/blog/adroll?session=125929&ref=our_partner","title":"urlContains"},{"location":"display_conditions/#metacontains","text":"Only display the module on pages that have meta tags that match the conditions defined. Note that metaContains does not support partial matches as urlContains does. Treat metaContains values as having the exact match rule. object in metaContains array Key Type Behavior property string optional property attribute of the meta tag content string optional value of the content attribute of the meta tag to match against name string optional name attribute of the meta tag // example match based on og:type displayConditions: { metaContains: [ { property: 'og:type', content: 'website' } ] } // Matches: // <meta property=\"og:type\" content=\"website\" />","title":"metaContains"},{"location":"inline_content/","text":"Pathfora also supports \"fill in the blank\" style inline content recommendations. That is, you can set up your html elements to match the look and feel of your website, and add attributes which will signal to pathfora to fill in the content with results from the Lytics content recommendation API. <div data-pfblock=\"my-recommendation\" data-pfrecommend=\"recent_articles\"> <div data-pftype=\"image\"></div> <a data-pftype=\"url\"><h2 data-pftype=\"title\"></h2></a> <p data-pftype=\"description\"></p> </div> Attributes Each toggleable content recomendation block should have a surrounding container element with the following elements. HTML data attribute Attribute Value Type Value data-pfblock string a unique string name for a single recommendation block data-pfrecommend string id of a content collection - the source list of content to recommend from** or default data-pfshuffle boolean optional if true, shuffle the result of the recommendations on each page load. ** You can get the id of the content collection from the url of that collection in the Lytics App. Inside the container element you may have several elements with the data-pfblock attribute. Based on the value of this attribute, Pathfora will set the innerHTML or an attribute of this element to contain a content recommendation for the user. Note that only one data-pfshuffle attribute is necessary per unique value of data-pfrecommend . This shuffle param will be applied to all blocks with a common data-pfrecommend value since we make one API request per content collection referenced on the page. value of data-pftype attribute Value Behavior image on an img tag this will set the src value to be the meta image of the document, otherwise it will set the background-image url on an a tag this will set the href value to be the url of the document, otherwise it will set the innerHTML to be this url title set the innerHTML of this element to be the title of the document description set the innerHTML of this element to be the meta description of the document author set the innerHTML of this element to be the author of the document published set the innerHTML of this element to be the date this article was published, see below for formatting If for some reason the recommendation API returns an error for the user, and cannot fill in recommendation, you can set some default content to show by creating another set of elements with content you've selected filled in and the data-pfrecommend value set to default. This content will only show if the any recommendation with a matching data-pfblock couldn't be loaded. Note: Pathfora loads some CSS to hide the toggle elements before selecting which element to show. Because the js library will load after the body of the page, you may see a flicker of html elements when the page is first loaded. To prevent this, you can add the following line of CSS to the stylesheet of your website: [data-pftrigger], [data-pfrecommend]{ display: none; } Date formatting Pathfora uses toLocaleDateString() to format the date published of an article. You can set the locale and options for this function on the pathfora object. If unset by the user, the locale will default to en-US . Content Recommendations - Live Preview","title":"Inline Content Recommendations"},{"location":"inline_content/#attributes","text":"Each toggleable content recomendation block should have a surrounding container element with the following elements. HTML data attribute Attribute Value Type Value data-pfblock string a unique string name for a single recommendation block data-pfrecommend string id of a content collection - the source list of content to recommend from** or default data-pfshuffle boolean optional if true, shuffle the result of the recommendations on each page load. ** You can get the id of the content collection from the url of that collection in the Lytics App. Inside the container element you may have several elements with the data-pfblock attribute. Based on the value of this attribute, Pathfora will set the innerHTML or an attribute of this element to contain a content recommendation for the user. Note that only one data-pfshuffle attribute is necessary per unique value of data-pfrecommend . This shuffle param will be applied to all blocks with a common data-pfrecommend value since we make one API request per content collection referenced on the page. value of data-pftype attribute Value Behavior image on an img tag this will set the src value to be the meta image of the document, otherwise it will set the background-image url on an a tag this will set the href value to be the url of the document, otherwise it will set the innerHTML to be this url title set the innerHTML of this element to be the title of the document description set the innerHTML of this element to be the meta description of the document author set the innerHTML of this element to be the author of the document published set the innerHTML of this element to be the date this article was published, see below for formatting If for some reason the recommendation API returns an error for the user, and cannot fill in recommendation, you can set some default content to show by creating another set of elements with content you've selected filled in and the data-pfrecommend value set to default. This content will only show if the any recommendation with a matching data-pfblock couldn't be loaded. Note: Pathfora loads some CSS to hide the toggle elements before selecting which element to show. Because the js library will load after the body of the page, you may see a flicker of html elements when the page is first loaded. To prevent this, you can add the following line of CSS to the stylesheet of your website: [data-pftrigger], [data-pfrecommend]{ display: none; }","title":"Attributes"},{"location":"inline_content/#date-formatting","text":"Pathfora uses toLocaleDateString() to format the date published of an article. You can set the locale and options for this function on the pathfora object. If unset by the user, the locale will default to en-US .","title":"Date formatting"},{"location":"targeting/","text":"Pathfora gains power by seamlessly integrating with Lytics for real-time user identification. This allows for precise audience targeting with each module. Setting this up in Pathfora requires an object with certain targeting rules as the first parameter to initializeWidgets . var modules = { target: [ { segment: 'smt_name', widgets: [module], }, ], }; pathfora.initializeWidgets(modules); For audience targeting, it is required that you load the Lytics Javascript Tag . Pathfora interacts with this tag to retrieve the a list of Lytics audiences that the user is a member of. If you do not load this tag for targeted modules they will never initialize. Setup Your Audiences You will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id in the targeting rules. target A list of rules assigning modules to audiences. Key Type Behavior target string list of targeting rule objects object in target array Key Type Behavior segment string API access ID of the Lytics audience rule function A function that returns true or false based on if the module should show or not widgets array list of modules to show the users in the audience rule function Parameter Type Behavior data object the user data returned from Lytics Single Target Audience - High Value Users // example: show a bar module to all users in the `high_value_users` audience promoting new products var module = new pathfora.Message({ id: 'targeted_bar', layout: 'bar', msg: 'Thanks for being a valued customer, please check out our new products.', cancelShow: false, okMessage: 'View Now', confirmAction: { name: 'targeted_bar_confirm', callback: function () { window.location.pathname = '/new-products'; }, }, }); var modules = { target: [ { segment: 'high_value_users', // API Access ID for your Lytics audience widgets: [module], }, ], }; pathfora.initializeWidgets(modules); Multiple Target Audiences - New vs. Returning // example: change messaging of module for new vs returning users var newModule = new pathfora.Message({ id: 'new_slideout', layout: 'slideout', position: 'bottom-right', headline: 'Welcome', msg: 'You must be new here! Please take a look at our guide for new users.', cancelShow: false, okMessage: 'View Guide', }); var returningModule = new pathfora.Message({ id: 'returning_slideout', layout: 'slideout', position: 'bottom-right', headline: 'Welcome Back', msg: 'Thanks for coming back, why not check out our blog for the newest updates?', cancelShow: false, okMessage: 'View Blog', }); var modules = { target: [ { segment: 'new_users', // API Access ID for your Lytics audience widgets: [newModule], }, { segment: 'returning', // API Access ID for your Lytics audience widgets: [returningModule], }, ], }; pathfora.initializeWidgets(modules); User Attribute targeting // example: show if user is from the US using the visit_country user field var newModule = new pathfora.Message({ id: 'us_slidout', layout: 'slideout', position: 'bottom-right', headline: 'Welcome', msg: 'Greatings from America', }); var modules = { target: [ { rule: function (data) { return data.visit_country === 'US'; }, widgets: [newModule], }, ], }; pathfora.initializeWidgets(modules); inverse Target all users who are not a part of any of the audiences in the defined targeting rules. Key Type Behavior inverse array list of modules to show any user who is not a member of any of the audiences in the targeting rules // example: show a feedback form module to all users that are known (has email) // and a subsciption module to everyone else var subscriptionModule = new pathfora.Subscription({ id: 'sign_up_module', layout: 'modal', headline: 'Sign Up', msg: 'We want to send you updates, sign up now!', }); var feedbackModule = new pathfora.Message({ id: 'known_module', layout: 'modal', headline: 'Give us Feedback', msg: 'What do you think of our newest updates?', fields: { name: false, email: false, title: false, message: true, }, }); var modules = { target: [ { segment: 'known', // API Access ID for your Lytics audience widgets: [feedbackModule], }, ], inverse: [subscriptionModule], }; pathfora.initializeWidgets(modules);","title":"Audience Targeting"},{"location":"targeting/#setup-your-audiences","text":"You will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id in the targeting rules.","title":"Setup Your Audiences"},{"location":"targeting/#target","text":"A list of rules assigning modules to audiences. Key Type Behavior target string list of targeting rule objects object in target array Key Type Behavior segment string API access ID of the Lytics audience rule function A function that returns true or false based on if the module should show or not widgets array list of modules to show the users in the audience rule function Parameter Type Behavior data object the user data returned from Lytics","title":"target"},{"location":"targeting/#single-target-audience-high-value-users","text":"// example: show a bar module to all users in the `high_value_users` audience promoting new products var module = new pathfora.Message({ id: 'targeted_bar', layout: 'bar', msg: 'Thanks for being a valued customer, please check out our new products.', cancelShow: false, okMessage: 'View Now', confirmAction: { name: 'targeted_bar_confirm', callback: function () { window.location.pathname = '/new-products'; }, }, }); var modules = { target: [ { segment: 'high_value_users', // API Access ID for your Lytics audience widgets: [module], }, ], }; pathfora.initializeWidgets(modules);","title":"Single Target Audience - High Value Users"},{"location":"targeting/#multiple-target-audiences-new-vs-returning","text":"// example: change messaging of module for new vs returning users var newModule = new pathfora.Message({ id: 'new_slideout', layout: 'slideout', position: 'bottom-right', headline: 'Welcome', msg: 'You must be new here! Please take a look at our guide for new users.', cancelShow: false, okMessage: 'View Guide', }); var returningModule = new pathfora.Message({ id: 'returning_slideout', layout: 'slideout', position: 'bottom-right', headline: 'Welcome Back', msg: 'Thanks for coming back, why not check out our blog for the newest updates?', cancelShow: false, okMessage: 'View Blog', }); var modules = { target: [ { segment: 'new_users', // API Access ID for your Lytics audience widgets: [newModule], }, { segment: 'returning', // API Access ID for your Lytics audience widgets: [returningModule], }, ], }; pathfora.initializeWidgets(modules);","title":"Multiple Target Audiences - New vs. Returning"},{"location":"targeting/#user-attribute-targeting","text":"// example: show if user is from the US using the visit_country user field var newModule = new pathfora.Message({ id: 'us_slidout', layout: 'slideout', position: 'bottom-right', headline: 'Welcome', msg: 'Greatings from America', }); var modules = { target: [ { rule: function (data) { return data.visit_country === 'US'; }, widgets: [newModule], }, ], }; pathfora.initializeWidgets(modules);","title":"User Attribute targeting"},{"location":"targeting/#inverse","text":"Target all users who are not a part of any of the audiences in the defined targeting rules. Key Type Behavior inverse array list of modules to show any user who is not a member of any of the audiences in the targeting rules // example: show a feedback form module to all users that are known (has email) // and a subsciption module to everyone else var subscriptionModule = new pathfora.Subscription({ id: 'sign_up_module', layout: 'modal', headline: 'Sign Up', msg: 'We want to send you updates, sign up now!', }); var feedbackModule = new pathfora.Message({ id: 'known_module', layout: 'modal', headline: 'Give us Feedback', msg: 'What do you think of our newest updates?', fields: { name: false, email: false, title: false, message: true, }, }); var modules = { target: [ { segment: 'known', // API Access ID for your Lytics audience widgets: [feedbackModule], }, ], inverse: [subscriptionModule], }; pathfora.initializeWidgets(modules);","title":"inverse"},{"location":"toggle/","text":"Beyond it's modules, the Pathfora library can also show or hide inline content based on audience membership. With a little bit of HTML and some specially named attributes you can begin seemlessly personalizing the content of your website to fit targetted audiences. <!-- This content will show to first-time visitors --> <div data-pfgroup=\"my-personalized-group\" data-pftrigger=\"new_user\"> You must be new here! Please take a look at our guide for new users. </div> <!-- This content will show to returning visitors --> <div data-pfgroup=\"my-personalized-group\" data-pftrigger=\"returning\"> Thanks for coming back, why not check out our blog for the newest updates? </div> You must load the Lytics Javascript Tag to toggle elements based on audience membership. Pathfora interacts with this tag to retrieve the a list of Lytics audiences that the user is a member of and will select which elements to show/hide based on this list. Setup Your Audiences You will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id as the value of the data-pftrigger attribute. Attributes Each toggleable piece of content should have a surrounding container HTML element. This element can be of any type and must have the following two attributes. HTML data attribute Attribute Value Type Value data-pfgroup string a unique string name for the set of elements to group together data-pftrigger string id or slug of the audience in Lytics or default If you have multiple elements with the same pfgroup name, only the first element with a matching pftrigger value will show. This means at most only one piece of content in a group will show. Additionally, if the user is not a member of one of these audiences you can create a default piece of content and set the pftrigger value to be default . This default element will only show if the user is not a member of any other pftrigger audience in a group. Note: Pathfora loads some CSS to hide the toggle elements before selecting which element to show. Because the js library will load after the body of the page, you may see a flicker of html elements when the page is first loaded. To prevent this, you can add the following line of CSS to the stylesheet of your website: [data-pftrigger], [data-pfrecommend] { display: none; } Content Element Toggle - Live Preview You can check which audiences you are a member of by typing lio.data.segments into a console log. If you are in the high_value or registered_users audience you should see the appropriate content, otherwise you will see the default options.","title":"Element Toggle"},{"location":"toggle/#setup-your-audiences","text":"You will need to have at least one audience built in Lytics that you want to target with a module. Make sure that you have API access enabled for the audience, and have entered an ID. You will use this id as the value of the data-pftrigger attribute.","title":"Setup Your Audiences"},{"location":"toggle/#attributes","text":"Each toggleable piece of content should have a surrounding container HTML element. This element can be of any type and must have the following two attributes. HTML data attribute Attribute Value Type Value data-pfgroup string a unique string name for the set of elements to group together data-pftrigger string id or slug of the audience in Lytics or default If you have multiple elements with the same pfgroup name, only the first element with a matching pftrigger value will show. This means at most only one piece of content in a group will show. Additionally, if the user is not a member of one of these audiences you can create a default piece of content and set the pftrigger value to be default . This default element will only show if the user is not a member of any other pftrigger audience in a group. Note: Pathfora loads some CSS to hide the toggle elements before selecting which element to show. Because the js library will load after the body of the page, you may see a flicker of html elements when the page is first loaded. To prevent this, you can add the following line of CSS to the stylesheet of your website: [data-pftrigger], [data-pfrecommend] { display: none; }","title":"Attributes"},{"location":"tracking/","text":"Pathfora can send tracking events and the user data submitted to Lytics and Google Analytics. As long as your tags are all set up in the correct order, module data will be sent Lytics automatically. Below we will look at which data fields are sent in detail and their formats. censorTrackingKeys This option exposes the capability to censor keys from payloads sent into Lytics. Any keys included as strings, or matching patterns as regular expressions that should be omitted from all payloads. censorTrackingKeys array of string and/or regular expressions Value Behavior array of strings keys which match any of the strings exactly will be censored from any payloads sent to Lytics array of regular expressions any key which matches any of the regular expression patterns will be censored from any payloads sent to Lytics // help ensure compliance with industry-specific PII regulations by censoring form data, var widget = new pathfora.Form({ // other configuration options elided censorTrackingKeys: [/pf-form/], }); Lytics As long as your Lytics JavaScript tag is loaded before the Pathfora tag, all event data and data collected from modules with user input will be sent to the the stream configured in your Lytics JavaScript tag . The following raw data fields can be sent to Lytics by Pathfora. Attribute Type Value pf-widget-id string id of the module set in the config pf-widget-type string type of the module pf-widget-layout string layout of the module pf-widget-variant int variant of the module pf-widget-event string name of the event (see below) pf-widget-action string custom tracking names for button click events as defined in confirmAction or cancelAction pf-form-username string user submitted value of \"name\" field on module pf-form-title string user submitted value of \"title\" field on module pf-form-email string user submitted value of \"email\" field on module pf-form-message string user submitted value of \"message\" field on module pf-form-company string user submitted value of \"company\" field on module pf-form-phone string user submitted value of \"phone number\" field on module pf-widget-event string Value Behavior show module was displayed to the user close module was closed by the user confirm \"confirm\" CTA button was clicked by the user cancel \"cancel\" button was clicked by the user submit user submitted information from a form module subscribe user submitted email from a subscription module unlock user submitted information from a gate module hover indicates that the user hovered over a button on the modal, name of button is recorded by pf-widget-action focus indicates that a form element on a modal received focus, name of the form field is recorded by pf-widget-action form_started indicates that a user began typing in a form element on the modal, name of the form field is recorded by pf-widget-action To verify that the event data fields are being sent properly to Lytics, you can simulate an action by interacting with your module and checking that the expected fields exist in the data streams section of your Lytics Account. By default these fields are available as user fields so that you can use them in the creation of segments. If you need help using these fields or would like to map the user fields differently please contact your customer success representative success@getlytics.com . Google Analytics To enable this data to be sent to Google Analytics set the enableGA flag before loading any module configs in your code: window.pathfora.enableGA = true; If this flag is enabled, pathfora will send event data from the modules on your website to your Google Analytics account as long as it has access to the ga function. This requires that you have the analytics.js snippet on your website loaded before the Pathfora tag. An event sent to Google Analytics by Pathfora will use the following attributes for event tracking : Attribute Type Value eventCategory string Lytics eventAction string [id of module] : [event name] The [event name] signifier in eventAction will match the event names for the pf-widget-event field sent to Lytics . However, if you've defined custom names in the confirmAction or cancelAction settings this will override the event name for those actions.","title":"Tracking"},{"location":"tracking/#censortrackingkeys","text":"This option exposes the capability to censor keys from payloads sent into Lytics. Any keys included as strings, or matching patterns as regular expressions that should be omitted from all payloads. censorTrackingKeys array of string and/or regular expressions Value Behavior array of strings keys which match any of the strings exactly will be censored from any payloads sent to Lytics array of regular expressions any key which matches any of the regular expression patterns will be censored from any payloads sent to Lytics // help ensure compliance with industry-specific PII regulations by censoring form data, var widget = new pathfora.Form({ // other configuration options elided censorTrackingKeys: [/pf-form/], });","title":"censorTrackingKeys"},{"location":"tracking/#lytics","text":"As long as your Lytics JavaScript tag is loaded before the Pathfora tag, all event data and data collected from modules with user input will be sent to the the stream configured in your Lytics JavaScript tag . The following raw data fields can be sent to Lytics by Pathfora. Attribute Type Value pf-widget-id string id of the module set in the config pf-widget-type string type of the module pf-widget-layout string layout of the module pf-widget-variant int variant of the module pf-widget-event string name of the event (see below) pf-widget-action string custom tracking names for button click events as defined in confirmAction or cancelAction pf-form-username string user submitted value of \"name\" field on module pf-form-title string user submitted value of \"title\" field on module pf-form-email string user submitted value of \"email\" field on module pf-form-message string user submitted value of \"message\" field on module pf-form-company string user submitted value of \"company\" field on module pf-form-phone string user submitted value of \"phone number\" field on module pf-widget-event string Value Behavior show module was displayed to the user close module was closed by the user confirm \"confirm\" CTA button was clicked by the user cancel \"cancel\" button was clicked by the user submit user submitted information from a form module subscribe user submitted email from a subscription module unlock user submitted information from a gate module hover indicates that the user hovered over a button on the modal, name of button is recorded by pf-widget-action focus indicates that a form element on a modal received focus, name of the form field is recorded by pf-widget-action form_started indicates that a user began typing in a form element on the modal, name of the form field is recorded by pf-widget-action To verify that the event data fields are being sent properly to Lytics, you can simulate an action by interacting with your module and checking that the expected fields exist in the data streams section of your Lytics Account. By default these fields are available as user fields so that you can use them in the creation of segments. If you need help using these fields or would like to map the user fields differently please contact your customer success representative success@getlytics.com .","title":"Lytics"},{"location":"tracking/#google-analytics","text":"To enable this data to be sent to Google Analytics set the enableGA flag before loading any module configs in your code: window.pathfora.enableGA = true; If this flag is enabled, pathfora will send event data from the modules on your website to your Google Analytics account as long as it has access to the ga function. This requires that you have the analytics.js snippet on your website loaded before the Pathfora tag. An event sent to Google Analytics by Pathfora will use the following attributes for event tracking : Attribute Type Value eventCategory string Lytics eventAction string [id of module] : [event name] The [event name] signifier in eventAction will match the event names for the pf-widget-event field sent to Lytics . However, if you've defined custom names in the confirmAction or cancelAction settings this will override the event name for those actions.","title":"Google Analytics"},{"location":"api/config/","text":"For multiple modules with common elements we can define a configuration to apply to all modules, or all modules of a certain type. Maintaining a common config helps reduce the code repitition and allows you to change settings accross many widgets in one place. A config object can be passed as a second, optional argument to initializeWidgets . var config = { generic: { theme: 'dark' } }; pathfora.initializeWidgets([module, module2], config); config object Key Type Behavior generic object optional setting which should apply to all modules initialized with this config message object optional setting which should apply to all message modules initialized with this config form object optional setting which should apply to all form modules initialized with this config subscription object optional setting which should apply to all subscription modules initialized with this config sitegate object optional setting which should apply to all gate modules initialized with this config Example Live Preview","title":"Generalized Configuration"},{"location":"api/config/#example","text":"","title":"Example"},{"location":"api/methods/","text":"This document will walk you through the methods of the pathfora class that will be used to help you deploy your modules. The rest of the SDK documentation will walk you through how to customize your module's configuration, and provide code examples to show you these methods in context. initializeWidgets This method is used to initialize any modules built with Pathfora. It kicks off all the heavy lifting that needs to be done to render the modules on the page based on their configuration settings. initializeWidgets function Parameter Type Behavior modules array or targetting object list of modules to initilize on the page config object optional generalized configuration settings for multiple modules options object optional additional options for the initialization (see below) options object Key Type Behavior priority string if set to \"ordered\" will only show the first valid module from the list initialized Type Configuration Methods Each module type that Pathfora supports has its own configuration method, which accepts a single object as a parameter. This object should include the configuration settings for the module, the following keys are common across all module configuration types. type configuration object Parameter Type Behavior id string required unique id for the module, no two modules can have the same id msg string text message content, often contained in a paragraph tag in the module headline string header or title text for the module, not supported by some layouts footerText string text footer content, not supported by some layouts We cover each of these type configuration methods and their parameters in individual type sections below. Message Form Subscription Gate initializeABTesting This method is used to initialize A/B Tests modules. If you're creating an A/B test scenario this should always be called before the initializeWidgets method. initializeABTesting function Parameter Type Behavior abTests array list of A/B test config objects to initialize A/B Test Configuration Method A/B Tests have their own configuration method ABTest . We cover this configuration in detail in the A/B Testing section of this documentation. recommendContent recommendContent is a public method that makes a request to the Lytics content recommendation API and returns a list of recommended documents for the user. These results are also placed in session storage to reduce the number of calls to the API on subsequent page loads. Note: Lytics' public recommendation API is only authorized for use on domains that have been whitelisted for your account. Contact your customer success representative success@lytics.io if you need to whitelist a new domain. initializeWidgets function Parameter Type Behavior accountId string id of the Lytics account to make API requests to params object object containing query params to call the recommendation API with id string \"unique identifier\" for the recommendation, used to reaccess response data from session storage callback function function to execute once we've received a response from the API. This function is passed the document objects in an array triggerWidgets triggerWidgets is a helper method for widgets with the manualTrigger displayCondition. Widgets with this condition will not display until all other display conditions are met, and pathfora.triggerWidgets has been called. This method is similar to initializeWidgets , in that it is useful when you want to trigger a module on a custom event with JavaScript. However with triggerWidgets you don't need to pass in widget object thus you can call this method even before the config has been defined. initializeWidgets function Parameter Type Behavior widgetIds array optional list of ids of widgets to display, if empty this method will trigger all widgets with the manualTrigger displayCondition","title":"Methods"},{"location":"api/methods/#initializewidgets","text":"This method is used to initialize any modules built with Pathfora. It kicks off all the heavy lifting that needs to be done to render the modules on the page based on their configuration settings. initializeWidgets function Parameter Type Behavior modules array or targetting object list of modules to initilize on the page config object optional generalized configuration settings for multiple modules options object optional additional options for the initialization (see below) options object Key Type Behavior priority string if set to \"ordered\" will only show the first valid module from the list initialized","title":"initializeWidgets"},{"location":"api/methods/#type-configuration-methods","text":"Each module type that Pathfora supports has its own configuration method, which accepts a single object as a parameter. This object should include the configuration settings for the module, the following keys are common across all module configuration types. type configuration object Parameter Type Behavior id string required unique id for the module, no two modules can have the same id msg string text message content, often contained in a paragraph tag in the module headline string header or title text for the module, not supported by some layouts footerText string text footer content, not supported by some layouts We cover each of these type configuration methods and their parameters in individual type sections below. Message Form Subscription Gate","title":"Type Configuration Methods"},{"location":"api/methods/#initializeabtesting","text":"This method is used to initialize A/B Tests modules. If you're creating an A/B test scenario this should always be called before the initializeWidgets method. initializeABTesting function Parameter Type Behavior abTests array list of A/B test config objects to initialize","title":"initializeABTesting"},{"location":"api/methods/#ab-test-configuration-method","text":"A/B Tests have their own configuration method ABTest . We cover this configuration in detail in the A/B Testing section of this documentation.","title":"A/B Test Configuration Method"},{"location":"api/methods/#recommendcontent","text":"recommendContent is a public method that makes a request to the Lytics content recommendation API and returns a list of recommended documents for the user. These results are also placed in session storage to reduce the number of calls to the API on subsequent page loads. Note: Lytics' public recommendation API is only authorized for use on domains that have been whitelisted for your account. Contact your customer success representative success@lytics.io if you need to whitelist a new domain. initializeWidgets function Parameter Type Behavior accountId string id of the Lytics account to make API requests to params object object containing query params to call the recommendation API with id string \"unique identifier\" for the recommendation, used to reaccess response data from session storage callback function function to execute once we've received a response from the API. This function is passed the document objects in an array","title":"recommendContent"},{"location":"api/methods/#triggerwidgets","text":"triggerWidgets is a helper method for widgets with the manualTrigger displayCondition. Widgets with this condition will not display until all other display conditions are met, and pathfora.triggerWidgets has been called. This method is similar to initializeWidgets , in that it is useful when you want to trigger a module on a custom event with JavaScript. However with triggerWidgets you don't need to pass in widget object thus you can call this method even before the config has been defined. initializeWidgets function Parameter Type Behavior widgetIds array optional list of ids of widgets to display, if empty this method will trigger all widgets with the manualTrigger displayCondition","title":"triggerWidgets"},{"location":"customization/buttons/","text":"Pathfora modules can have up to two action buttons \"confirm\" and \"cancel\". You can set custom text for these buttons as well as select to hide one or both of them. See the callbacks section for how to add javascript callbacks on these buttons. okShow Show or hide the \"Confirm\" button. okShow boolean Value Behavior true default module has confirm button false module does not have confirm button cancelShow Show or hide the \"Cancel\" button. cancelShow boolean Value Behavior true default module has cancel button false module does not have cancel button Hide Cancel Button - Live Preview okMessage Set the text for the \"Confirm\" button. Key Value Behavior confirmMessage string set custom text for the module's confirm button cancelMessage Set the text for the \"Cancel\" button. Key Value Behavior cancelMessage string set custom text for the module's cancel button Custom Button Text - Live Preview","title":"Action Buttons"},{"location":"customization/buttons/#okshow","text":"Show or hide the \"Confirm\" button. okShow boolean Value Behavior true default module has confirm button false module does not have confirm button","title":"okShow"},{"location":"customization/buttons/#cancelshow","text":"Show or hide the \"Cancel\" button. cancelShow boolean Value Behavior true default module has cancel button false module does not have cancel button","title":"cancelShow"},{"location":"customization/buttons/#okmessage","text":"Set the text for the \"Confirm\" button. Key Value Behavior confirmMessage string set custom text for the module's confirm button","title":"okMessage"},{"location":"customization/buttons/#cancelmessage","text":"Set the text for the \"Cancel\" button. Key Value Behavior cancelMessage string set custom text for the module's cancel button","title":"cancelMessage"},{"location":"customization/css/","text":"Pathfora is built to be entirely customizable for developers. With the javascript config alone you can change the colors of any element of the module. But, to make your module fully fit the look and feel of your site you can add custom CSS. Key Class Names The outer most <div> of all Pathfora modules have the pf-widget class. For most modules this will be the containing div surrounding the content, but for modal and gate modules this div will contain the full-screen overlay behind the module. pf-widget has a number of useful subclasses to help select modules by their settings from the javascript config. Subclasses of pf-widget : Class Name Use pf-[type] select modules by type pf-widget-[layout] select modules by layout pf-position-[position] select modules by position pf-widget-variant-[variant] select modules by variant opened added once the module becomes visiable to the user, can be used for changing the transition animation Within the pf-widget div most key elements are assigned class names. Form components are nested in a <form> element and should be selected and styled by element type. Key Classes: Class Name Element pf-widget-content second container div inside pf-widget (for modal and gate layouts this will the the box surrounding the actual module content) pf-widget-text third container div inside pf-widget for modals, gates, and inline layouts (it contains the text: headline and message/form) pf-widget-headline <h2> headline text pf-widget-message <p> containing widget message text pf-widget-close \"x\" icon to close the modal pf-widget-btn general class for all buttons pf-widget-ok \"Confirm\" button pf-widget-cancel \"Cancel\" button pf-widget-img image element for modules of variant 2 To see these classes in action, you can view the html templates that will be rendered on your website. This is the html that gets minified, and added to a div with the class pf-widget . That div then gets added to the DOM of your website. Custom Class Name All modules use the pf-widget class and thus any styles applied to this class and sub-elements will effect all modules used on the page. If you want to select and style a single module without using its id as a selector, you can add a custom class name to the pf-widget div in your javascript config. var module = new pathfora.Subscription({ id: 'form-css', className: 'sign-up-newsletter', layout: 'modal', headline: 'Sign Up!', msg: 'Submit this form to get updates' }); pathfora.initializeWidgets([module]); Example Live Preview Javascript CSS SASS/LESS .pf-widget { &.pf-twitter-module { background-color: #4a4a4a; color: #fff; border-radius: 0px; box-shadow: none; font-family: Roboto, Arial, 'sans-serif'; /* message paragraph */ .pf-widget-message { font-size: 15px; line-height: 1.7; } /* headline */ .pf-widget-headline { font-size: 28px; } .pf-widget-close, .pf-widget-headline { color: #39aec0; } /* buttons */ .pf-widget-btn { border-radius: 0px; padding: 1px 25px; } /* confirm button */ .pf-widget-btn.pf-widget-ok { background-color: #1b91a7; color: #fff; box-shadow: none; } /* cancel button */ .pf-widget-btn.pf-widget-cancel { background: transparent; color: #fff; border: 1px solid #6a6a6a; } /* img */ .pf-widget-img { border-radius: 0px; } } }","title":"Custom CSS"},{"location":"customization/css/#key-class-names","text":"The outer most <div> of all Pathfora modules have the pf-widget class. For most modules this will be the containing div surrounding the content, but for modal and gate modules this div will contain the full-screen overlay behind the module. pf-widget has a number of useful subclasses to help select modules by their settings from the javascript config. Subclasses of pf-widget : Class Name Use pf-[type] select modules by type pf-widget-[layout] select modules by layout pf-position-[position] select modules by position pf-widget-variant-[variant] select modules by variant opened added once the module becomes visiable to the user, can be used for changing the transition animation Within the pf-widget div most key elements are assigned class names. Form components are nested in a <form> element and should be selected and styled by element type. Key Classes: Class Name Element pf-widget-content second container div inside pf-widget (for modal and gate layouts this will the the box surrounding the actual module content) pf-widget-text third container div inside pf-widget for modals, gates, and inline layouts (it contains the text: headline and message/form) pf-widget-headline <h2> headline text pf-widget-message <p> containing widget message text pf-widget-close \"x\" icon to close the modal pf-widget-btn general class for all buttons pf-widget-ok \"Confirm\" button pf-widget-cancel \"Cancel\" button pf-widget-img image element for modules of variant 2 To see these classes in action, you can view the html templates that will be rendered on your website. This is the html that gets minified, and added to a div with the class pf-widget . That div then gets added to the DOM of your website.","title":"Key Class Names"},{"location":"customization/css/#custom-class-name","text":"All modules use the pf-widget class and thus any styles applied to this class and sub-elements will effect all modules used on the page. If you want to select and style a single module without using its id as a selector, you can add a custom class name to the pf-widget div in your javascript config. var module = new pathfora.Subscription({ id: 'form-css', className: 'sign-up-newsletter', layout: 'modal', headline: 'Sign Up!', msg: 'Submit this form to get updates' }); pathfora.initializeWidgets([module]);","title":"Custom Class Name"},{"location":"customization/css/#example","text":"","title":"Example"},{"location":"customization/css/#javascript","text":"","title":"Javascript"},{"location":"customization/css/#css","text":"","title":"CSS"},{"location":"customization/css/#sassless","text":".pf-widget { &.pf-twitter-module { background-color: #4a4a4a; color: #fff; border-radius: 0px; box-shadow: none; font-family: Roboto, Arial, 'sans-serif'; /* message paragraph */ .pf-widget-message { font-size: 15px; line-height: 1.7; } /* headline */ .pf-widget-headline { font-size: 28px; } .pf-widget-close, .pf-widget-headline { color: #39aec0; } /* buttons */ .pf-widget-btn { border-radius: 0px; padding: 1px 25px; } /* confirm button */ .pf-widget-btn.pf-widget-ok { background-color: #1b91a7; color: #fff; box-shadow: none; } /* cancel button */ .pf-widget-btn.pf-widget-cancel { background: transparent; color: #fff; border: 1px solid #6a6a6a; } /* img */ .pf-widget-img { border-radius: 0px; } } }","title":"SASS/LESS"},{"location":"customization/entity_fields/","text":"If you have a whitelisted entity fields in Lytics or a custom data field in javascript, you can include them in your message, headline, image, or confirm callback function field using a simple template that pathfora will recognize and replace with field data. These dynamic field templates allow you to further personalize the customer experience of your module. Entity Field Templates Any field that is available via window.lio.data can be placed into a module's message, headline, or image. For example, if you wanted to include the user's name in the headline of a module: var module = new pathfora.Message({ id: 'welcome-back', layout: 'modal', headline: 'Welcome back, {{name}}.', msg: 'Thanks for returning. Please check out our new products.' }); pathfora.initializeWidgets([module]); Pathfora will attempt to replace {{name}} with the value of window.lio.data.name . Similarly, if you wanted to include a subfield, you can use dot notation in the template. {{last_cta.resource}} would be replaced with the value of window.lio.data.last_cta.resource . In addition to using Lytics entity fields, you can pass pathfora the value of a field to include in a module using the window.pathfora.customData object: pathfora.customData.name = 'Jon Snow'; For example, if a user submits a form on your website asking for their info and you would like to immediately use this data in a module, you can add it to the customData object before initializing the widget and use an entity field template. If the data isn't present for the user viewing the modal there are a couple options available to control the behavior of the module. By default if there is no fallback defined for the field, pathfora will prevent the module from being displayed for visitors who lack the necessary fields. This behavior can be changed with the showOnMissingFields display condition. Defining a Fallback (default) Value Alternatively, we can define a fallback or \"default\" value to be shown in case the user is missing the data. To define a fallback value, place it after the field name and a | character in the template. Building from the previous example: var module = new pathfora.Message({ id: 'welcome-back', layout: 'modal', headline: 'Welcome back, {{name | Valued Customer}}.', msg: 'Thanks for returning. Please check out our new products.' }); pathfora.initializeWidgets([module]); In this example all visitors who lack the \"name\" field will be greeted with \"Wecome back, Valued Customer\".","title":"Entity Fields"},{"location":"customization/entity_fields/#entity-field-templates","text":"Any field that is available via window.lio.data can be placed into a module's message, headline, or image. For example, if you wanted to include the user's name in the headline of a module: var module = new pathfora.Message({ id: 'welcome-back', layout: 'modal', headline: 'Welcome back, {{name}}.', msg: 'Thanks for returning. Please check out our new products.' }); pathfora.initializeWidgets([module]); Pathfora will attempt to replace {{name}} with the value of window.lio.data.name . Similarly, if you wanted to include a subfield, you can use dot notation in the template. {{last_cta.resource}} would be replaced with the value of window.lio.data.last_cta.resource . In addition to using Lytics entity fields, you can pass pathfora the value of a field to include in a module using the window.pathfora.customData object: pathfora.customData.name = 'Jon Snow'; For example, if a user submits a form on your website asking for their info and you would like to immediately use this data in a module, you can add it to the customData object before initializing the widget and use an entity field template. If the data isn't present for the user viewing the modal there are a couple options available to control the behavior of the module. By default if there is no fallback defined for the field, pathfora will prevent the module from being displayed for visitors who lack the necessary fields. This behavior can be changed with the showOnMissingFields display condition.","title":"Entity Field Templates"},{"location":"customization/entity_fields/#defining-a-fallback-default-value","text":"Alternatively, we can define a fallback or \"default\" value to be shown in case the user is missing the data. To define a fallback value, place it after the field name and a | character in the template. Building from the previous example: var module = new pathfora.Message({ id: 'welcome-back', layout: 'modal', headline: 'Welcome back, {{name | Valued Customer}}.', msg: 'Thanks for returning. Please check out our new products.' }); pathfora.initializeWidgets([module]); In this example all visitors who lack the \"name\" field will be greeted with \"Wecome back, Valued Customer\".","title":"Defining a Fallback (default) Value"},{"location":"customization/form/","text":"Pathfora now allows for fully customized form fields for modules of type form and gate . These input fields include text, texarea, select, checkbox, and radio button. Try out our form schema builder to easily build forms with a drag and drop interface and output a formElements object for your module config. Legacy form documentation is also available here formElements This is a list of form element objects to include in the module's form. The order of these elements determines the order in which they render in the module. object in formElements array Key Type Behavior type string type of form element: checkbox-group, radio-group, select, text, email, us-postal-code, date, or textarea name string name attribute of the field, this is the primary identifier used in tracking label string optional label to give the field context to the user placeholder string optional placeholder text for text input, textarea, and select fields values array optional list of options for checkbox, radio, or select elements. minDate string optional minimum allowed date the user can select. Can be today or a date formatted mm-dd-yyyy (only applicable when type = date) maxDate string optional maximum allowed date the user can select. Can be today or a date formatted mm-dd-yyyy (only applicable when type = date) pattern string optional a valid regular expression that the input value must match before form submission for example ^[0-9]{5}$ object in values array Key Type Behavior label string the value of the option shown in the form to the user value string the value attribute of the option or input element, used in tracking Custom Forms - Live Preview formStates Set a custom success or error state message on confirmation to show after the user submits a form. formStates object Key Type Behavior success object optional object containing the settings for the success state error object optional object containing the settings for the error state (note that the error state is only used by modules with the waitForAsyncResponse field set to true success or error object Key Type Behavior headline string header or title text for the success state msg string text message content of the success state delay int how long in seconds to show the success state before hiding the module. if 0, the module will not hide until the user closes it okShow boolean if true, show a confirmation button as part of the success state cancelShow boolean if true, show a cancel button as part of the success state okMessage string text for the confirmation button on the sucess state cancelMessage string text for the cancelation button on the success state confirmAction object object containing the name and callback function for the confirmation button on the success state (see confirmAction note that only the name and callback fields are relevant in this nested version of confirmAction ). cancelAction object object containing the name and callback function for the cancelation button on the success state (see cancelAction ) Success & Error State - Live Preview","title":"Form Elements"},{"location":"customization/form/#formelements","text":"This is a list of form element objects to include in the module's form. The order of these elements determines the order in which they render in the module. object in formElements array Key Type Behavior type string type of form element: checkbox-group, radio-group, select, text, email, us-postal-code, date, or textarea name string name attribute of the field, this is the primary identifier used in tracking label string optional label to give the field context to the user placeholder string optional placeholder text for text input, textarea, and select fields values array optional list of options for checkbox, radio, or select elements. minDate string optional minimum allowed date the user can select. Can be today or a date formatted mm-dd-yyyy (only applicable when type = date) maxDate string optional maximum allowed date the user can select. Can be today or a date formatted mm-dd-yyyy (only applicable when type = date) pattern string optional a valid regular expression that the input value must match before form submission for example ^[0-9]{5}$ object in values array Key Type Behavior label string the value of the option shown in the form to the user value string the value attribute of the option or input element, used in tracking","title":"formElements"},{"location":"customization/form/#formstates","text":"Set a custom success or error state message on confirmation to show after the user submits a form. formStates object Key Type Behavior success object optional object containing the settings for the success state error object optional object containing the settings for the error state (note that the error state is only used by modules with the waitForAsyncResponse field set to true success or error object Key Type Behavior headline string header or title text for the success state msg string text message content of the success state delay int how long in seconds to show the success state before hiding the module. if 0, the module will not hide until the user closes it okShow boolean if true, show a confirmation button as part of the success state cancelShow boolean if true, show a cancel button as part of the success state okMessage string text for the confirmation button on the sucess state cancelMessage string text for the cancelation button on the success state confirmAction object object containing the name and callback function for the confirmation button on the success state (see confirmAction note that only the name and callback fields are relevant in this nested version of confirmAction ). cancelAction object object containing the name and callback function for the cancelation button on the success state (see cancelAction )","title":"formStates"},{"location":"customization/form_builder/","text":"Drag a field from the right hand list onto the canvas to add it to your custom form. Change the settings and options for your fields and click \"save\" to generate the schema that you can copy and paste into your Pathfora config.","title":"Form Schema Builder"},{"location":"customization/form_legacy/","text":"Pathfora now supports fully customizable form elements . This doc outlines the customization options for deprecated forms including hiding specific input fields, setting placeholder text, and selecting which fields are required for the user to submit the form. fields Select which fields should be a part of the module's form. By default, a form module has the name, email, title, and message fields. And a gate module has the name, email, company, and title fields. fields object Key Type Behavior name boolean optional show or hide input for the user's full name email boolean optional show or hide input for the user's email address title boolean optional show or hide input for the user's job title company boolean optional show or hide input for the user's company of employment phone boolean optional show or hide input for the user's phone number referralEmail boolean optional show or hide input for a referral email message boolean optional show or hide texarea field for comments or a longer form message Show/Hide Fields - Live Preview required Set which fields are required to be filled out by the user to submit the form. By default only name and email fields are required for all modules with forms. required object Key Type Behavior name boolean optional set the required status for the name field email boolean optional set the required status for the email address field title boolean optional set the required status for the job title field company boolean optional set the required status for the company of employment field phone boolean optional set the required status for the phone number field referralEmail boolean optional set the required status for the referral email field message boolean optional set the required status for the long form message field Required Fields - Live Preview placeholders Set the placeholder text for form elements. placeholders object Key Type Behavior name string optional set the placeholder text for the name field email string optional set the placeholder text for the email address field title string optional set the placeholder text for the job title field company string optional set the placeholder text for the company of employment field phone string optional set the placeholder text for the phone number field referralEmail string optional set the placeholder text for the referral email field message string optional set the placeholder text for the long form message field Placeholders - Live Preview","title":"Form Elements (Legacy)"},{"location":"customization/form_legacy/#fields","text":"Select which fields should be a part of the module's form. By default, a form module has the name, email, title, and message fields. And a gate module has the name, email, company, and title fields. fields object Key Type Behavior name boolean optional show or hide input for the user's full name email boolean optional show or hide input for the user's email address title boolean optional show or hide input for the user's job title company boolean optional show or hide input for the user's company of employment phone boolean optional show or hide input for the user's phone number referralEmail boolean optional show or hide input for a referral email message boolean optional show or hide texarea field for comments or a longer form message","title":"fields"},{"location":"customization/form_legacy/#required","text":"Set which fields are required to be filled out by the user to submit the form. By default only name and email fields are required for all modules with forms. required object Key Type Behavior name boolean optional set the required status for the name field email boolean optional set the required status for the email address field title boolean optional set the required status for the job title field company boolean optional set the required status for the company of employment field phone boolean optional set the required status for the phone number field referralEmail boolean optional set the required status for the referral email field message boolean optional set the required status for the long form message field","title":"required"},{"location":"customization/form_legacy/#placeholders","text":"Set the placeholder text for form elements. placeholders object Key Type Behavior name string optional set the placeholder text for the name field email string optional set the placeholder text for the email address field title string optional set the placeholder text for the job title field company string optional set the placeholder text for the company of employment field phone string optional set the placeholder text for the phone number field referralEmail string optional set the placeholder text for the referral email field message string optional set the placeholder text for the long form message field","title":"placeholders"},{"location":"customization/responsive/","text":"By default, all Pathfora modules have a responsive design which will scale for screen size and device. Larger modules such as gate or modals will likely take up the full screen space on a mobile device. Smaller modules such as bar and slideout will fit completely within a mobile screen if the content is short enough, and scroll otherwise. The responsive behavior can be turned off if you would not like to show your modules on smaller screen sizes. responsive Turn on or off responsive styles for windows of certain dimensions. responsive boolean Value Behavior true default modules will scale for any browser size false modules will be hidden for windows less than 768px in width or less than 640px in height","title":"Responsive Styles"},{"location":"customization/responsive/#responsive","text":"Turn on or off responsive styles for windows of certain dimensions. responsive boolean Value Behavior true default modules will scale for any browser size false modules will be hidden for windows less than 768px in width or less than 640px in height","title":"responsive"},{"location":"customization/themes/","text":"Pathfora has two basic built-in color themes: light (default if no theme is set) and dark. Furthermore, the user can set their own custom colors for any element of the module within the javascript configuration. For more advanced color and style customization you can add your own CSS . theme Set the color scheme of the module. This can be a predefined theme or indicate that the module should have custom colors. theme string Value Behavior light default default light color scheme dark a predefined darker color scheme custom the user should define custom colors using colors Dark Theme - Live Preview colors Define a set of custom colors for each element of the module. colors object Key Type Behavior background string optional hex color code for the background of the module text string optional hex color code for the msg text headline string optional hex color code for the headline text close string optional hex color code for close button (\"X\" in the corner) actionBackground string optional hex color code for the background of the \"confirm\" button actionText string optional hex color code for the text of the \"confirm\" button cancelBackground string optional hex color code for the background of the \"cancel\" button cancelText string optional hex color code for the text of the \"cancel\" button fieldBackground string optional hex color code for the background of field elements required string optional hex color code for the flag and/outline on required form fields requiredText string optional hex color code for the flag text on required form fields Custom Theme - Live Preview","title":"Color Themes"},{"location":"customization/themes/#theme","text":"Set the color scheme of the module. This can be a predefined theme or indicate that the module should have custom colors. theme string Value Behavior light default default light color scheme dark a predefined darker color scheme custom the user should define custom colors using colors","title":"theme"},{"location":"customization/themes/#colors","text":"Define a set of custom colors for each element of the module. colors object Key Type Behavior background string optional hex color code for the background of the module text string optional hex color code for the msg text headline string optional hex color code for the headline text close string optional hex color code for close button (\"X\" in the corner) actionBackground string optional hex color code for the background of the \"confirm\" button actionText string optional hex color code for the text of the \"confirm\" button cancelBackground string optional hex color code for the background of the \"cancel\" button cancelText string optional hex color code for the text of the \"cancel\" button fieldBackground string optional hex color code for the background of field elements required string optional hex color code for the flag and/outline on required form fields requiredText string optional hex color code for the flag text on required form fields","title":"colors"},{"location":"layouts/bar/","text":"A bar is a thin module which appears at the top or bottom of the browser window. Note: the bar module does not support the headline config property. position Position of the bar module relative to the browser window. position string Value Behavior top default module is absolutely positioned to the top of the window top-fixed module sticks to the top of the window when scrolling bottom-fixed module sticks to the bottom of the window when scrolling Positions - Live Preview positionSelector Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. Note : Depending on which position your bar has, it may or may not \"appear\" within your selected element. top-fixed and bottom-fixed use the position: fixed css rule, so while the HTML for your bar will be inserted into the DOM element defined by positionSelector it will appear fixed and full width on the page. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear. Custom Position - Live Preview variant Variant determines any extra content that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image image Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature Image (variant 2) - Live Preview pushDown For top or top-fixed positioned bars, we can select an element to push down (add a top margin) so it doesn't get covered by the module. This is especially helpful for a top-aligned site navigation. Key Type Behavior pushDown string selector of the element that should move down with the bar Live Preview","title":"Bar"},{"location":"layouts/bar/#position","text":"Position of the bar module relative to the browser window. position string Value Behavior top default module is absolutely positioned to the top of the window top-fixed module sticks to the top of the window when scrolling bottom-fixed module sticks to the bottom of the window when scrolling","title":"position"},{"location":"layouts/bar/#positionselector","text":"Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. Note : Depending on which position your bar has, it may or may not \"appear\" within your selected element. top-fixed and bottom-fixed use the position: fixed css rule, so while the HTML for your bar will be inserted into the DOM element defined by positionSelector it will appear fixed and full width on the page. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear.","title":"positionSelector"},{"location":"layouts/bar/#variant","text":"Variant determines any extra content that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image","title":"variant"},{"location":"layouts/bar/#image","text":"Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature","title":"image"},{"location":"layouts/bar/#pushdown","text":"For top or top-fixed positioned bars, we can select an element to push down (add a top margin) so it doesn't get covered by the module. This is especially helpful for a top-aligned site navigation. Key Type Behavior pushDown string selector of the element that should move down with the bar","title":"pushDown"},{"location":"layouts/button/","text":"A button is a small module which only allows for a short piece of text, and a single click action. Because of their limited size and capabilities, button modules are best used for short messages, such as calling out a new site feature, or directing a user to a new piece of content. position Positition of the button module relative to the browser window. position string Value Behavior top-left default display the module in the top left corner of the window top-right display the module in the top right corner of the window left display the module so that it sticks to the left side of the window right display the module so that it sticks to the right side of the window bottom-right display the module in the bottom right corner of the window bottom-left display the module in the bottom left corner of the window Positions - Live Preview positionSelector Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. Note : Because buttons use the position: fixed css rule your button may or may not \"appear\" within your selected element, so while the HTML for your button will be inserted into the DOM element defined by positionSelector it will appear fixed and full width on the page. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear. Custom Position - Live Preview","title":"Button"},{"location":"layouts/button/#position","text":"Positition of the button module relative to the browser window. position string Value Behavior top-left default display the module in the top left corner of the window top-right display the module in the top right corner of the window left display the module so that it sticks to the left side of the window right display the module so that it sticks to the right side of the window bottom-right display the module in the bottom right corner of the window bottom-left display the module in the bottom left corner of the window","title":"position"},{"location":"layouts/button/#positionselector","text":"Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. Note : Because buttons use the position: fixed css rule your button may or may not \"appear\" within your selected element, so while the HTML for your button will be inserted into the DOM element defined by positionSelector it will appear fixed and full width on the page. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear.","title":"positionSelector"},{"location":"layouts/inline/","text":"An inline module can be inserted into an existing <div> element on your page. This allows you to render personalized messages and forms anywhere on your page. Note: inline modules do not support the close or cancel option. Clicking the confirm button will trigger success state for form or subscription modules, but we recommend setting a custom callback for the confirm button of a inline message module. positionSelector Define the DOM selector of the parent element you would like to insert the module into. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear. Custom Position - Live Preview variant Variant determines any extra content that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image 3 module includes a content recommendation image Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature Image (variant 2) - Live Preview","title":"Inline"},{"location":"layouts/inline/#positionselector","text":"Define the DOM selector of the parent element you would like to insert the module into. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear.","title":"positionSelector"},{"location":"layouts/inline/#variant","text":"Variant determines any extra content that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image 3 module includes a content recommendation","title":"variant"},{"location":"layouts/inline/#image","text":"Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature","title":"image"},{"location":"layouts/modal/","text":"A modal is a large size module with an overlay behind it. It's meant to cover a substantial area of the browser window, so that it demands attention from the user. variant Variant determines any extra content (dictated by extra keys in the config) that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image 3 module includes a content recommendation image Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature Image (variant 2) - Live Preview positionSelector Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear. Custom Position - Live Preview","title":"Modal"},{"location":"layouts/modal/#variant","text":"Variant determines any extra content (dictated by extra keys in the config) that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image 3 module includes a content recommendation","title":"variant"},{"location":"layouts/modal/#image","text":"Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature","title":"image"},{"location":"layouts/modal/#positionselector","text":"Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear.","title":"positionSelector"},{"location":"layouts/slideout/","text":"A slideout is a medium module which slides from either side into the window. This module provides a good amount of space for text and content without taking the full attention of the user. position Position of the slideout module relative to the browser window. position string Value Behavior bottom-left default display the module in the bottom left corner of the window bottom-right display the module in the bottom right corner of the window left display the module in the center left of the window right display the module in the center right of the window top-left display the module in the top left corner of the window top-right display the module in the top right corner of the window Positions - Live Preview positionSelector Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. Note : Because slideouts use the position: fixed css rule your button may or may not \"appear\" within your selected element, so while the HTML for your slideout will be inserted into the DOM element defined by positionSelector it will appear fixed and full width on the page. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear. Custom Position - Live Preview origin Origin is the direction from which the the module will slide in. origin string Value Behavior left default for bottom-left positioned modules right default for bottom-right positioned modules bottom module slides up from the bottom of the window Bottom - Live Preview variant Variant determines any extra content that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image 3 module includes a content recommendation image Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature Image (variant 2) - Live Preview","title":"Slideout"},{"location":"layouts/slideout/#position","text":"Position of the slideout module relative to the browser window. position string Value Behavior bottom-left default display the module in the bottom left corner of the window bottom-right display the module in the bottom right corner of the window left display the module in the center left of the window right display the module in the center right of the window top-left display the module in the top left corner of the window top-right display the module in the top right corner of the window","title":"position"},{"location":"layouts/slideout/#positionselector","text":"Optionally define the DOM selector of the parent element you would like to insert the module into an element besides the document body. Note : Because slideouts use the position: fixed css rule your button may or may not \"appear\" within your selected element, so while the HTML for your slideout will be inserted into the DOM element defined by positionSelector it will appear fixed and full width on the page. positionSelector string Value Behavior selector Javascript selector of an existing div on the page where the module should appear.","title":"positionSelector"},{"location":"layouts/slideout/#origin","text":"Origin is the direction from which the the module will slide in. origin string Value Behavior left default for bottom-left positioned modules right default for bottom-right positioned modules bottom module slides up from the bottom of the window","title":"origin"},{"location":"layouts/slideout/#variant","text":"Variant determines any extra content that may be used by the module. variant int Value Behavior 1 default text-only-module 2 module includes an image 3 module includes a content recommendation","title":"variant"},{"location":"layouts/slideout/#image","text":"Define the featured image you would like to use for the module. Note: This setting is only valid for modules with a variant value of 2. Key Type Behavior image string URL of the image to feature","title":"image"},{"location":"types/form/","text":"Form type modules are used primarily for data collection or user identification. Supporting a variety of form fields and options for passing data to various end-points, this type presents a form for the user to fill out and submit. var module = new pathfora.Form({ id: 'my-form-module-id', headline: 'My Headline Text', msg: 'My message text here.' }); pathfora.initializeWidgets([module]); layout Define which layout type the form module should use. layout string Value Behavior modal module uses a modal layout slideout module uses a slideout layout inline module uses a inline layout Form - Live Preview Slideout - Live Preview Inline - Live Preview","title":"Form"},{"location":"types/form/#layout","text":"Define which layout type the form module should use. layout string Value Behavior modal module uses a modal layout slideout module uses a slideout layout inline module uses a inline layout","title":"layout"},{"location":"types/gate/","text":"Gate modules provide an approach for requiring data collection or user identification. This type of module prevents users from viewing content or navigating until some sort of data has been collected and processed. These modules are highly effective when promoting white papers or other online materials that are not to be freely available. var module = new pathfora.SiteGate({ id: 'my-gate-module-id', headline: 'My Headline Text', msg: 'My message text here.' }); pathfora.initializeWidgets([module]); Gate Gate modules will remain hidden once the user has submitted their information once. A cookie PathforaUnlocked_[id of module] is created to save this status so that the user has access to the gated content as long as their cookies persist. SiteGate - Live Preview showForm By default the a gate module includes a form, with this setting it can be hidden for a text-only gated widget. showForm boolean Value Behavior true default show the gated form false hide the form for a text-only gated widget Text-only Gate - Live Preview","title":"Gate"},{"location":"types/gate/#gate","text":"Gate modules will remain hidden once the user has submitted their information once. A cookie PathforaUnlocked_[id of module] is created to save this status so that the user has access to the gated content as long as their cookies persist.","title":"Gate"},{"location":"types/gate/#showform","text":"By default the a gate module includes a form, with this setting it can be hidden for a text-only gated widget. showForm boolean Value Behavior true default show the gated form false hide the form for a text-only gated widget","title":"showForm"},{"location":"types/message/","text":"Message type modules are focused on delivering outbound communication. For example: announcing a product launch, new content, top-level alert, etc. These modules provide a simple text message which can be used in a variety of formats. var module = new pathfora.Message({ id: 'my-message-module-id', headline: 'My Headline Text', msg: 'My message text here.' }); pathfora.initializeWidgets([module]); layout Define which layout type the form module should use. layout string Value Behavior modal module uses a modal layout slideout module uses a slideout layout bar module uses a bar layout button module uses a button layout inline module uses a inline layout Modal - Live Preview Slideout - Live Preview Bar - Live Preview Button - Live Preview Inline - Live Preview","title":"Message"},{"location":"types/message/#layout","text":"Define which layout type the form module should use. layout string Value Behavior modal module uses a modal layout slideout module uses a slideout layout bar module uses a bar layout button module uses a button layout inline module uses a inline layout","title":"layout"},{"location":"types/subscription/","text":"Subscription modules are a lite version of the form type focused on gathering the minimum amount of user data necessary to maintain communication. By default only email address will be collected by a subscription module. var module = new pathfora.Subscription({ id: 'my-subscription-module-id', headline: 'My Headline Text', msg: 'My message text here.' }); pathfora.initializeWidgets([module]); layout Define which layout type the form module should use. layout string Value Behavior modal module uses a modal layout slideout module uses a slideout layout bar module uses a bar layout inline module uses a inline layout Modal - Live Preview Slideout - Live Preview Bar - Live Preview Inline - Live Preview","title":"Subscription"},{"location":"types/subscription/#layout","text":"Define which layout type the form module should use. layout string Value Behavior modal module uses a modal layout slideout module uses a slideout layout bar module uses a bar layout inline module uses a inline layout","title":"layout"}]}